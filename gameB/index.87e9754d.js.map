{"mappings":"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","sources":["node_modules/matter-js/build/matter.js","node_modules/query-string/index.js","node_modules/strict-uri-encode/index.js","node_modules/decode-uri-component/index.js","node_modules/split-on-first/index.js","node_modules/filter-obj/index.js","src/gameB/game.js"],"sourcesContent":["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","import MagicHand from \"../MagicHand\";\nimport {\n  Engine,\n  Render,\n  Runner,\n  Bodies,\n  Body,\n  Composite,\n  World,\n  Composites,\n  Constraint,\n  Mouse,\n  MouseConstraint,\n} from \"matter-js\";\nimport * as queryString from \"query-string\";\n\nclass Marionette {\n  constructor(debug) {\n    this.sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    this.isDebug = debug;\n  }\n\n  init() {\n    this.engine = Engine.create();\n    this.world = this.engine.world;\n    this.render = Render.create({\n      element: document.body,\n      engine: this.engine,\n      options: {\n        width: this.sizes.width,\n        height: this.sizes.height,\n        // showAngleIndicator: true,\n        // showCollisions: true,\n        // showVelocity: true,\n        wireframes: false,\n      },\n    });\n    this.canvas = this.render.canvas;\n    this.runner = Runner.create();\n  }\n\n  start() {\n    this.init();\n    Render.run(this.render);\n    Runner.run(this.runner, this.engine);\n    this.drawWorld();\n    this.handleEventListener();\n  }\n\n  drawWorld() {\n    // 바닥\n    const ground = Bodies.rectangle(\n      this.sizes.width / 2,\n      this.sizes.height,\n      this.sizes.width,\n      100,\n      { isStatic: true }\n    );\n    Composite.add(this.world, [ground]);\n    this.dollA = [];\n    this.dollB = [];\n    this.controlPointA = [];\n    this.controlPointB = [];\n    this.drawDoll(this.dollA);\n    this.drawDoll(this.dollB);\n    this.controlDoll(this.dollA, this.controlPointA);\n    this.controlDoll(this.dollB, this.controlPointB);\n    this.addMouse();\n  }\n\n  drawDoll(doll) {\n    // 인형\n    const bodyGroup = Body.nextGroup(true);\n\n    // 인형 머리\n    const head = Bodies.circle(this.sizes.width / 2, 100, 50, {\n      collisionFilter: { group: bodyGroup },\n    });\n    // Composite.add(\n    //   this.world,\n    //   Constraint.create({\n    //     bodyB: head,\n    //     pointB: { x: 0, y: -50 },\n    //     pointA: {\n    //       x: head.position.x,\n    //       y: 30,\n    //     },\n    //     stiffness: 0.5,\n    //   })\n    // );\n    doll.push(head);\n\n    // 인형 몸\n    const body = Bodies.rectangle(this.sizes.width / 2 + 10, 300, 40, 200, {\n      collisionFilter: { group: bodyGroup },\n    });\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: head,\n        bodyB: body,\n        pointA: {\n          x: 0,\n          y: 50,\n        },\n        pointB: { x: 0, y: -100 },\n        stiffness: 0.02,\n        length: 10,\n      })\n    );\n    doll.push(body);\n\n    // 인형 왼쪽 팔\n    const leftArm = Composites.stack(\n      this.sizes.width / 2 - 200,\n      100,\n      1,\n      2,\n      10,\n      10,\n      function (x, y) {\n        return Bodies.rectangle(x, y, 20, 80, {\n          collisionFilter: { group: bodyGroup },\n        });\n      }\n    );\n    Composites.chain(leftArm, 0, 0.5, 0, -0.5, {\n      stiffness: 0.8,\n      length: 10,\n      render: { type: \"line\" },\n    });\n    Composite.add(\n      leftArm,\n      Constraint.create({\n        bodyA: body,\n        bodyB: leftArm.bodies[0],\n        pointA: {\n          x: -20,\n          y: -100,\n        },\n        pointB: { x: 0, y: -40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(leftArm);\n\n    // 인형 왼쪽 손\n    const leftHand = Bodies.circle(this.sizes.width / 2 - 300, 500, 15, {\n      collisionFilter: { group: bodyGroup },\n    });\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: leftHand,\n        bodyB: leftArm.bodies[1],\n        pointA: {\n          x: 0,\n          y: -15,\n        },\n        pointB: { x: 0, y: 40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(leftHand);\n\n    // 인형 오른쪽 팔\n    const rightArm = Composites.stack(\n      this.sizes.width / 2 + 200,\n      100,\n      1,\n      2,\n      10,\n      10,\n      function (x, y) {\n        return Bodies.rectangle(x, y, 20, 80, {\n          collisionFilter: { group: bodyGroup },\n        });\n      }\n    );\n    Composites.chain(rightArm, 0, 0.5, 0, -0.5, {\n      stiffness: 0.8,\n      length: 10,\n      render: { type: \"line\" },\n    });\n    Composite.add(\n      rightArm,\n      Constraint.create({\n        bodyA: body,\n        bodyB: rightArm.bodies[0],\n        pointA: {\n          x: 20,\n          y: -100,\n        },\n        pointB: { x: 0, y: -40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(rightArm);\n\n    // 인형 오른쪽 손\n    const rightHand = Bodies.circle(this.sizes.width / 2 + 300, 500, 15, {\n      collisionFilter: { group: bodyGroup },\n    });\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: rightHand,\n        bodyB: rightArm.bodies[1],\n        pointA: {\n          x: 0,\n          y: -15,\n        },\n        pointB: { x: 0, y: 40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(rightHand);\n\n    // 인형 왼쪽 다리\n    const leftLeg = Composites.stack(\n      this.sizes.width / 2 - 200,\n      300,\n      1,\n      2,\n      10,\n      10,\n      function (x, y) {\n        return Bodies.rectangle(x, y, 20, 80, {\n          collisionFilter: { group: bodyGroup },\n        });\n      }\n    );\n    Composites.chain(leftLeg, 0, 0.5, 0, -0.5, {\n      stiffness: 0.8,\n      length: 10,\n      render: { type: \"line\" },\n    });\n    Composite.add(\n      leftLeg,\n      Constraint.create({\n        bodyA: body,\n        bodyB: leftLeg.bodies[0],\n        pointA: {\n          x: -20,\n          y: 100,\n        },\n        pointB: { x: 0, y: -40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(leftLeg);\n\n    // 인형 왼쪽 발\n    const leftFoot = Bodies.circle(this.sizes.width / 2 - 300, 600, 15, {\n      collisionFilter: { group: bodyGroup },\n    });\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: leftFoot,\n        bodyB: leftLeg.bodies[1],\n        pointA: {\n          x: 0,\n          y: -15,\n        },\n        pointB: { x: 0, y: 40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(leftFoot);\n\n    // 인형 오른쪽 다리\n    const rightLeg = Composites.stack(\n      this.sizes.width / 2 + 200,\n      300,\n      1,\n      2,\n      10,\n      10,\n      function (x, y) {\n        return Bodies.rectangle(x, y, 20, 80, {\n          collisionFilter: { group: bodyGroup },\n        });\n      }\n    );\n    Composites.chain(rightLeg, 0, 0.5, 0, -0.5, {\n      stiffness: 0.8,\n      length: 10,\n      render: { type: \"line\" },\n    });\n    Composite.add(\n      rightLeg,\n      Constraint.create({\n        bodyA: body,\n        bodyB: rightLeg.bodies[0],\n        pointA: {\n          x: 20,\n          y: 100,\n        },\n        pointB: { x: 0, y: -40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(rightLeg);\n\n    // 인형 오른쪽 발\n    const rightFoot = Bodies.circle(this.sizes.width / 2 + 300, 600, 15, {\n      collisionFilter: { group: bodyGroup },\n    });\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: rightFoot,\n        bodyB: rightLeg.bodies[1],\n        pointA: {\n          x: 0,\n          y: -15,\n        },\n        pointB: { x: 0, y: 40 },\n        stiffness: 0.5,\n        length: 2,\n      })\n    );\n    doll.push(rightFoot);\n\n    Composite.add(this.world, doll);\n  }\n\n  controlDoll(doll, point) {\n    point.push(\n      Bodies.circle(this.sizes.width / 2, 10, 10, {\n        // isStatic: true,\n        render: {\n          strokeStyle: \"transparent\",\n          fillStyle: \"transparent\",\n        },\n      })\n    );\n    point.push(\n      Bodies.circle(this.sizes.width / 2, 10, 10, {\n        // isStatic: true,\n        render: {\n          strokeStyle: \"transparent\",\n          fillStyle: \"transparent\",\n        },\n      })\n    );\n    point.push(\n      Bodies.circle(this.sizes.width / 2, 10, 10, {\n        // isStatic: true,\n        render: {\n          strokeStyle: \"transparent\",\n          fillStyle: \"transparent\",\n        },\n      })\n    );\n    point.push(\n      Bodies.circle(this.sizes.width / 2, 10, 10, {\n        // isStatic: true,\n        render: {\n          strokeStyle: \"transparent\",\n          fillStyle: \"transparent\",\n        },\n      })\n    );\n    point.push(\n      Bodies.circle(this.sizes.width / 2, 10, 10, {\n        // isStatic: true,\n        render: {\n          strokeStyle: \"transparent\",\n          fillStyle: \"transparent\",\n        },\n      })\n    );\n\n    const basicLength = 150;\n    const handLength = 300;\n    const footLength = 400;\n    const stiffness = 0.02;\n\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: point[0],\n        bodyB: doll[7],\n        pointA: {\n          x: 0,\n          y: 0,\n        },\n        pointB: { x: 0, y: 0 },\n        stiffness: stiffness,\n        length: basicLength + footLength,\n        render: {\n          strokeStyle: this.isDebug ? \"white\" : \"transparent\",\n        },\n      })\n    );\n\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: point[1],\n        bodyB: doll[3],\n        pointA: {\n          x: 0,\n          y: 0,\n        },\n        pointB: { x: 0, y: 0 },\n        stiffness: stiffness,\n        length: basicLength + handLength,\n        render: {\n          // strokeStyle: \"white\",\n          strokeStyle: this.isDebug ? \"white\" : \"transparent\",\n        },\n      })\n    );\n\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: point[2],\n        bodyB: doll[0],\n        pointA: {\n          x: 0,\n          y: 0,\n        },\n        pointB: { x: 0, y: 0 },\n        stiffness: stiffness,\n        length: basicLength,\n        render: {\n          strokeStyle: this.isDebug ? \"white\" : \"transparent\",\n        },\n      })\n    );\n\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: point[3],\n        bodyB: doll[5],\n        pointA: {\n          x: 0,\n          y: 0,\n        },\n        pointB: { x: 0, y: 0 },\n        stiffness: stiffness,\n        length: basicLength + handLength,\n        render: {\n          strokeStyle: this.isDebug ? \"white\" : \"transparent\",\n        },\n      })\n    );\n\n    Composite.add(\n      this.world,\n      Constraint.create({\n        bodyA: point[4],\n        bodyB: doll[9],\n        pointA: {\n          x: 0,\n          y: 0,\n        },\n        pointB: { x: 0, y: 0 },\n        stiffness: stiffness,\n        length: basicLength + footLength,\n        render: {\n          strokeStyle: this.isDebug ? \"white\" : \"transparent\",\n        },\n      })\n    );\n\n    Composite.add(this.world, [...point]);\n  }\n\n  setControlPosition(left, right) {\n    left.forEach((p, idx) => {\n      Body.setPosition(this.controlPointA[4 - idx], {\n        x: p.x.toFixed(2) * this.sizes.width,\n        y: p.y.toFixed(2) * this.sizes.height,\n        z: 0,\n      });\n      Body.setVelocity(this.controlPointA[4 - idx], {\n        x: 0,\n        y: 0,\n        z: 0,\n      });\n    });\n    right.forEach((p, idx) => {\n      Body.setPosition(this.controlPointB[4 - idx], {\n        x: p.x.toFixed(2) * this.sizes.width,\n        y: p.y.toFixed(2) * this.sizes.height,\n        z: 0,\n      });\n      Body.setVelocity(this.controlPointB[4 - idx], {\n        x: 0,\n        y: 0,\n        z: 0,\n      });\n    });\n  }\n\n  cleanWorld() {\n    World.clear(this.world, false);\n  }\n\n  addMouse() {\n    this.mouse = Mouse.create(this.render.canvas);\n    this.mouseConstraint = MouseConstraint.create(this.engine, {\n      mouse: this.mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false,\n        },\n      },\n    });\n\n    Composite.add(this.world, this.mouseConstraint);\n\n    // keep the mouse in sync with rendering\n    this.render.mouse = this.mouse;\n  }\n\n  handleEventListener() {\n    window.addEventListener(\"resize\", () => {\n      if (this.resizeT) {\n        clearTimeout(this.resizeT);\n      }\n      this.resizeT = setTimeout(this.resize.bind(this), 300);\n    });\n  }\n\n  resize() {\n    // Update sizes\n    this.sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n    this.canvas.width = this.sizes.width;\n    this.canvas.height = this.sizes.height;\n    this.cleanWorld();\n    this.drawWorld();\n  }\n}\n\ndocument.body.onload = () => {\n  const parsed = queryString.parse(location.search);\n  let debugMarionette = false;\n  let debugHand = false;\n  if (parsed.debugA) {\n    debugMarionette = !!Number(parsed.debugA);\n  }\n  if (parsed.debugB) {\n    debugHand = !!Number(parsed.debugB);\n  }\n\n  const marionette = new Marionette(debugMarionette);\n  marionette.start();\n\n  const magicHand = new MagicHand();\n  magicHand.start();\n  if (debugHand) {\n    magicHand.debug();\n  }\n  // magicHand.onGesture(handleGesture);\n  magicHand.onPosition(handlePosition);\n\n  function handlePosition({ left, right }) {\n    marionette.setControlPosition(left, right);\n  }\n\n  function handleGesture({ left, right }) {\n    console.log(`Left is ${left}`);\n    console.log(`Right is ${right}`);\n  }\n};\n"],"names":["root","factory","$941104ff00431419$export$f9380c9a627682d3","$941104ff00431419$export$98e6a39c04603d36","$941104ff00431419$export$fac44ee5b035f737","$941104ff00431419$export$7a5253c0f62e0150","$941104ff00431419$export$a8c1621ea79325d3","$941104ff00431419$export$357523c63a2253b9","$08fafc059bd79222$exports","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","i1","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","$parcel$global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","dx","dy","pointX","pointY","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","object1","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","_supports","_overlapAB","_overlapBA","Pair","overlap","axis","collided","parentA","parentB","depth","normal","tangent","penetration","supports","collides","_overlapAxes","minOverlap","table","minAxis","minAxisX","minAxisY","supportsB","_findSupports","supportCount","supportsA","verticesA","verticesB","overlapAB","overlapBA","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","axisX","axisY","minA","minB","maxA","maxB","_projectToAxis","projection","direction","vertexC","distance","bodyAPositionX","bodyAPositionY","normalX","normalY","nearestDistance","Contact","timestamp","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","parentAVerticesLength","support","contactId","contact","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","vertices1","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","setBodies","detector","collisions","bodiesLength","canCollide","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsBStart","filterA","filterB","module1","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","pattern","exec","major","minor","patch","isRange","operator","prerelease","Render","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","engine","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","showBroadphase","setPixelRatio","appendChild","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","Part","Cons","Comp","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","fps","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","positionIterations","velocityIterations","constraintIterations","gravity","grid","buckets","broadphase","metrics","_bodiesApplyGravity","_bodiesUpdate","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","pairsLength","contactShare","positionDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contactsLength","contactVertex","impulseX","impulseY","maxFriction","timeScaleSquared","restingThresh","frictionNormalMultiplier","restingThreshTangent","NumberMaxValue","bodyAVelocity","bodyBVelocity","tangentX","tangentY","inverseMassTotal","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairIndex","pairsList","pairsListLength","pairsTable","collisionsLength","removePairIndex","Matter","Composites","Grid","MouseConstraint","Query","Runner","SAT","Svg","World","columns","rows","columnGap","rowGap","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","stack","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","col","crossBrace","bodyC","actualRows","lastBodyWidth","size","newtonsCradle","wheelSize","wheelAOffset","wheelBOffset","car","axelA","wheelA","axelB","wheelB","softBody","particleRadius","particleOptions","constraintOptions","bucket","bucketId","gridChanged","forceUpdate","newRegion","_getRegion","region","isInsideNewRegion","startCol","endCol","startRow","endRow","isInsideOldRegion","regionA","regionB","bucketWidth","bucketHeight","bucketLength","pairId","gridPairs","_bucketRemoveBody","pairKeys","pairKeysLength","mouseConstraint","_triggerEvents","partsAStart","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","ray","outside","_frameTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","isFixed","deltaMin","deltaMax","tick","sampleLength","point1","segment1","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","segment","segType","pathSegTypeAsLetter","toUpperCase","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","addSegmentPoint","getPointAtLength","il","y1","y2","segs","len","seg","replaceItem","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","define","amd","$aaa7cefdf7a784a2$exports","str","encodeURIComponent","charCodeAt","$4d59aa2685883bb0$var$singleMatcher","RegExp","$4d59aa2685883bb0$var$multiMatcher","$4d59aa2685883bb0$var$decodeComponents","components","decodeURIComponent","err","right","$4d59aa2685883bb0$var$decode","input","tokens","$4d59aa2685883bb0$exports","encodedURI","TypeError","replaceMap","entries","$4d59aa2685883bb0$var$customDecodeURIComponent","$f01e1f0f6e7b5474$exports","string","separator","separatorIndex","$be57bb40855fde4b$exports","predicate","ret","isArr","$941104ff00431419$var$encodeFragmentIdentifier","$941104ff00431419$var$validateArrayFormatSeparator","$941104ff00431419$var$encode","encode","strict","$941104ff00431419$var$decode","decode","$941104ff00431419$var$keysSorter","a","b","$941104ff00431419$var$removeHash","hashStart","$941104ff00431419$var$extract","queryStart","$941104ff00431419$var$parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","$941104ff00431419$var$parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","includes","isEncodedArray","newValue","arrayValue","$941104ff00431419$var$parserForArrayFormat","param","reduce","skipNull","skipEmptyString","keyValueSep","$941104ff00431419$var$encoderForArrayFormat","objectCopy","key1","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","queryFromUrl","parsedQueryFromUrl","queryString","$941104ff00431419$var$getHash","$b34245f66866acf5$var$Marionette","debug","this","sizes","innerWidth","innerHeight","isDebug","init","drawWorld","handleEventListener","ground","dollA","dollB","controlPointA","controlPointB","drawDoll","controlDoll","addMouse","doll","bodyGroup","head","leftArm","leftHand","rightArm","rightHand","leftLeg","leftFoot","rightLeg","rightFoot","doll1","basicLength","setControlPosition","left1","right1","forEach","idx","cleanWorld","resizeT","clearTimeout","resize","onload","location","search","debugMarionette","debugHand","debugA","debugB","marionette","magicHand","$bgO2p","default","onPosition"],"version":3,"file":"index.87e9754d.js.map"}