// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"6oyVt":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "4a236f9275d0a351";
module.bundle.HMR_BUNDLE_ID = "8c70626fb793e1a0";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"6hGTq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _magicHand = require("../MagicHand");
var _magicHandDefault = parcelHelpers.interopDefault(_magicHand);
var _matterJs = require("matter-js");
var _toxiclibsjs = require("toxiclibsjs");
var _toxiclibsjsDefault = parcelHelpers.interopDefault(_toxiclibsjs);
class PunchGame {
    constructor(debug){
        this.sizes = {
            width: window.innerWidth,
            height: window.innerHeight
        };
    }
    init() {
        this.engine = _matterJs.Engine.create();
        this.world = this.engine.world;
        this.render = _matterJs.Render.create({
            element: document.body,
            engine: this.engine,
            options: {
                width: this.sizes.width,
                height: this.sizes.height,
                // showAngleIndicator: true,
                // showCollisions: true,
                // showVelocity: true,
                wireframes: false
            }
        });
        this.canvas = this.render.canvas;
        this.runner = _matterJs.Runner.create();
    }
    start() {
        this.init();
        _matterJs.Render.run(this.render);
        _matterJs.Runner.run(this.runner, this.engine);
        this.drawWorld();
        this.addMouse();
        this.handleEventListener();
    }
    drawWorld() {
        // 바닥
        const ground = _matterJs.Bodies.rectangle(this.sizes.width / 2, this.sizes.height, this.sizes.width, 100, {
            isStatic: true
        });
        const wall = [
            _matterJs.Bodies.rectangle(0, this.sizes.height / 2, 100, this.sizes.height, {
                isStatic: true
            }),
            _matterJs.Bodies.rectangle(this.sizes.width, this.sizes.height / 2, 100, this.sizes.height, {
                isStatic: true
            }), 
        ];
        this.balls = _matterJs.Composites.stack(this.sizes.width / 3, -3000, 12, 40, 10, 10, function(x, y) {
            return _matterJs.Bodies.circle(x, y, _matterJs.Common.random(15, 60), {
                restitution: 0.6,
                friction: 0.1
            });
        });
        _matterJs.Composite.add(this.world, [
            ground,
            ...wall,
            this.balls
        ]);
    }
    cleanWorld() {
        _matterJs.World.clear(this.world, false);
    }
    addMouse() {
        this.mouse = _matterJs.Mouse.create(this.render.canvas);
        this.mouseConstraint = _matterJs.MouseConstraint.create(this.engine, {
            mouse: this.mouse,
            constraint: {
                stiffness: 0.2,
                render: {
                    visible: false
                }
            }
        });
        _matterJs.Composite.add(this.world, this.mouseConstraint);
        // keep the mouse in sync with rendering
        this.render.mouse = this.mouse;
    }
    impact(point) {
        console.log(point);
        const ballsInArea = this.balls.bodies.filter((ball)=>{
            if (this.distance(point, ball.position) < 300) return true;
            else return false;
        });
        ballsInArea.forEach((ball)=>{
            _matterJs.Body.applyForce(ball, point, this.calculateForce(ball.position, point));
        });
    }
    calculateForce(from2, to2, factor = 0.01) {
        const force = {
            x: (from2.x - to2.x) * factor,
            y: (from2.y - to2.y) * factor
        };
        return force;
    }
    distance(from1, to1) {
        return Math.sqrt(Math.pow(from1.x - to1.x, 2) + Math.pow(from1.y - to1.y, 2));
    }
    handleEventListener() {
        window.addEventListener("resize", ()=>{
            if (this.resizeT) clearTimeout(this.resizeT);
            this.resizeT = setTimeout(this.resize.bind(this), 300);
        });
        window.addEventListener("click", (e)=>{
            const { clientX , clientY  } = e;
            this.impact({
                x: clientX,
                y: clientY
            });
        });
    }
    resize() {
        // Update sizes
        this.sizes = {
            width: window.innerWidth,
            height: window.innerHeight
        };
        this.canvas.width = this.sizes.width;
        this.canvas.height = this.sizes.height;
        this.cleanWorld();
        this.drawWorld();
    }
}
document.body.onload = ()=>{
    const punch = new PunchGame();
    punch.start();
    const magicHand = new _magicHandDefault.default(document.body);
    magicHand.start();
    magicHand.debug();
    magicHand.onGesture(handleGesture);
    magicHand.onPosition(handlePosition);
    const state = {
        left: {
            gesture: "",
            ready: false
        },
        right: {
            gesture: "",
            ready: false
        }
    };
    function handleGesture({ left , right  }) {
        state.left.gesture = left;
        state.right.gesture = right;
    // console.log(`Left is ${gesture.left}`);
    // console.log(`Right is ${gesture.right}`);
    }
    function handlePosition({ left , right  }) {
        // console.log(left[0], right[0]);
        // console.log(left, right);
        const PUNCH_FIST_SIZE = 17;
        if (state.right.gesture === "") {
            if (state.right.ready) state.right.ready = false;
        } else if (right.length > 0) {
            if (getFistSize(...right) < PUNCH_FIST_SIZE) state.right.ready = true;
            else if (state.right.ready) {
                punch.impact(getFistCenter(...right));
                state.right.ready = false;
            }
        }
        if (state.left.gesture === "") {
            if (state.left.ready) state.left.ready = false;
        } else if (left.length > 0) {
            if (getFistSize(...left) < PUNCH_FIST_SIZE) state.left.ready = true;
            else if (state.left.ready) {
                punch.impact(getFistCenter(...left));
                state.left.ready = false;
            }
        }
    // console.log(state.left, state.right);
    }
    function getFistSize(A, B, C, D) {
        const size = distance2d(A, C) * distance2d(B, D);
        return Math.floor(size * 1000);
    }
    function getFistCenter(A, B, C, D) {
        const xs = [
            A.x,
            B.x,
            C.x,
            D.x
        ].sort();
        const ys = [
            A.y,
            B.y,
            C.y,
            D.y
        ].sort();
        return {
            x: window.innerWidth * ((xs[3] + xs[0]) / 2),
            y: window.innerHeight * ((ys[3] + ys[0]) / 2)
        };
    }
    function getRadius(A, B, C) {
        const yDelta_a = B.y - A.y;
        const xDelta_a = B.x - A.x;
        const yDelta_b = C.y - B.y;
        const xDelta_b = C.x - B.x;
        const center = {
        };
        const aSlope = yDelta_a / xDelta_a;
        const bSlope = yDelta_b / xDelta_b;
        center.x = (aSlope * bSlope * (A.y - C.y) + bSlope * (A.x + B.x) - aSlope * (B.x + C.x)) / (2 * (bSlope - aSlope));
        center.y = -1 * (center.x - (A.x + B.x) / 2) / aSlope + (A.y + B.y) / 2;
        const radius = Math.sqrt(Math.pow(A.x - center.x, 2) + Math.pow(A.y - center.y, 2));
        return Math.floor(radius * 100);
    }
    function distance2d(from, to) {
        return Math.sqrt(Math.pow(from.x - to.x, 2) + Math.pow(from.y - to.y, 2));
    }
};

},{"../MagicHand":"bYgi2","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV","matter-js":"l8ZtM","toxiclibsjs":"9UQZi"}],"bYgi2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hands = require("@mediapipe/hands");
var _cameraUtils = require("@mediapipe/camera_utils");
var _drawingUtils = require("@mediapipe/drawing_utils");
var _gestureValidation = require("./gestureValidation");
var _styleScss = require("./style.scss");
class MagicHand {
    constructor(target){
        // Elements
        this.videoElm = document.createElement("video");
        this.videoElm.id = "input";
        document.body.appendChild(this.videoElm);
        this.canvas = document.createElement("canvas");
        this.canvas.id = "debug";
        this.ctx = this.canvas.getContext("2d");
        this.target = target;
        // LifeCycle
        this.isDebug = false;
        // Detection Data
        this.handIdx = {
            0: undefined,
            1: undefined
        };
        this.existHand = {
            left: false,
            right: false
        };
        this.handPose = {
            left: "noexist",
            right: "noexist"
        };
        this.handPosition = {
            left: [],
            right: []
        };
        this.availableGesture = [
            "stand",
            "stretchBack",
            "rockNRoll",
            "victory",
            "fist", 
        ];
    }
    start() {
        this.resize();
        this.initHands();
        this.initCamera();
        this.hands.onResults(this.onResults.bind(this));
        this.handleEventListener();
    }
    debug() {
        this.isDebug = true;
        this.target.appendChild(this.canvas);
    }
    getAvailableGesture() {
        return this.availableGesture;
    }
    initHands() {
        this.hands = new _hands.Hands({
            locateFile: (file)=>{
                return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;
            }
        });
        this.hands.setOptions({
            maxNumHands: 2,
            modelComplexity: 1,
            minDetectionConfidence: 0.5,
            minTrackingConfidence: 0.5,
            selfieMode: true
        });
    }
    initCamera() {
        this.camera = new _cameraUtils.Camera(this.videoElm, {
            onFrame: async ()=>{
                await this.hands.send({
                    image: this.videoElm
                });
            },
            width: 1920,
            height: 1080
        });
        this.camera.start();
    }
    debugResult(results) {
        this.ctx.save();
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillStyle = "transparent";
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        // this.ctx.drawImage(
        //   results.image,
        //   0,
        //   0,
        //   this.canvas.width,
        //   this.canvas.height
        // );
        if (results.multiHandLandmarks) {
            const { multiHandLandmarks  } = results;
            for(let i = 0; i < 2; i++){
                const landmark = multiHandLandmarks[i];
                const hand = this.handIdx[i]; // left or right
                if (hand) {
                    _drawingUtils.drawConnectors(this.ctx, landmark, _hands.HAND_CONNECTIONS, {
                        color: hand === "left" ? "#006E7F" : "#112B3C",
                        lineWidth: 5
                    });
                    _drawingUtils.drawLandmarks(this.ctx, landmark, {
                        color: hand === "left" ? "#73777B" : "#205375",
                        lineWidth: 2
                    });
                }
            }
        }
        this.ctx.restore();
    }
    onResults(results1) {
        if (this.isDebug) this.debugResult(results1);
        this.existHand = {
            left: false,
            right: false
        };
        const { multiHandLandmarks , multiHandWorldLandmarks , multiHandedness  } = results1;
        // Left or Right
        for(let i = 0; i < 2; i++){
            const hand = multiHandedness[i];
            if (hand) this.handIdx[i] = `${hand.label}`.toLowerCase();
            else this.handIdx[i] = undefined;
        }
        for(let i1 = 0; i1 < 2; i1++){
            const hand = this.handIdx[i1]; // left or right
            if (hand) {
                this.existHand[hand] = true;
                const landmark = multiHandLandmarks[i1];
                const worldLandmark = multiHandWorldLandmarks[i1];
                if (landmark) {
                    this.handPose[hand] = this.findGesture({
                        landmark,
                        worldLandmark
                    });
                    this.handPosition[hand] = this.findPosition({
                        landmark
                    });
                } else {
                    this.handPose[hand] = "unknown";
                    this.handPosition[hand] = [];
                }
            }
        }
        // 보이지 않는 손 초기화
        if (!this.existHand.left) {
            this.handPose.left = "noexist";
            this.handPosition.left = [];
        }
        if (!this.existHand.right) {
            this.handPose.right = "noexist";
            this.handPosition.right = [];
        }
    }
    findGesture({ landmark , worldLandmark  }) {
        if (_gestureValidation.isRockNRoll(landmark)) return "rockNRoll";
        else if (_gestureValidation.isVictory(landmark)) return "victory";
        else if (_gestureValidation.isFist(landmark)) return "fist";
        else if (_gestureValidation.isStretchBack(worldLandmark)) return "stretchBack";
        else if (_gestureValidation.isStand(landmark)) return "stand";
        else return "unknown";
    }
    findPosition({ landmark: landmark1  }) {
        const ret = [];
        ret.push(landmark1[5], landmark1[8], landmark1[17], landmark1[20]);
        return ret;
    }
    onGesture(callback) {
        setInterval(callback.bind(this, this.handPose), 1000 / 24);
    }
    onPosition(callback1) {
        setInterval(callback1.bind(this, this.handPosition), 1000 / 24);
    // setInterval(callback.bind(this, this.handPosition), 5000);
    }
    handleEventListener() {
        window.addEventListener("resize", this.resize.bind(this));
    }
    resize() {
        this.size = {
            width: this.target.clientWidth,
            height: this.target.clientHeight
        };
        this.canvas.width = this.size.width;
        this.canvas.height = this.size.height;
    }
}
exports.default = MagicHand;

},{"@mediapipe/hands":"37Lsh","@mediapipe/camera_utils":"jo1qi","@mediapipe/drawing_utils":"hRegf","./gestureValidation":"aNPGb","./style.scss":"708wo","@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"37Lsh":[function(require,module,exports) {
var global = arguments[3];
(function() {
    var x;
    function aa(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: !1,
                value: a[b++]
            } : {
                done: !0
            };
        };
    }
    var ba = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b] = c.value;
        return a;
    };
    function ca(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        throw Error("Cannot find global object");
    }
    var y = ca(this);
    function B(a, b) {
        if (b) a: {
            var c = y;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                if (!(e in c)) break a;
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && ba(c, a, {
                configurable: !0,
                writable: !0,
                value: b
            });
        }
    }
    B("Symbol", function(a) {
        function b(g) {
            if (this instanceof b) throw new TypeError("Symbol is not a constructor");
            return new c(d + (g || "") + "_" + e++, g);
        }
        function c(g, f) {
            this.g = g;
            ba(this, "description", {
                configurable: !0,
                writable: !0,
                value: f
            });
        }
        if (a) return a;
        c.prototype.toString = function() {
            return this.g;
        };
        var d = "jscomp_symbol_" + (1000000000 * Math.random() >>> 0) + "_", e = 0;
        return b;
    });
    B("Symbol.iterator", function(a) {
        if (a) return a;
        a = Symbol("Symbol.iterator");
        for(var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++){
            var d = y[b[c]];
            "function" === typeof d && "function" != typeof d.prototype[a] && ba(d.prototype, a, {
                configurable: !0,
                writable: !0,
                value: function() {
                    return da(aa(this));
                }
            });
        }
        return a;
    });
    function da(a) {
        a = {
            next: a
        };
        a[Symbol.iterator] = function() {
            return this;
        };
        return a;
    }
    function C(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: aa(a)
        };
    }
    function ea(a) {
        if (!(a instanceof Array)) {
            a = C(a);
            for(var b, c = []; !(b = a.next()).done;)c.push(b.value);
            a = c;
        }
        return a;
    }
    var fa = "function" == typeof Object.create ? Object.create : function(a) {
        function b() {
        }
        b.prototype = a;
        return new b;
    }, ha;
    if ("function" == typeof Object.setPrototypeOf) ha = Object.setPrototypeOf;
    else {
        var ia;
        a: {
            var ja = {
                a: !0
            }, ka = {
            };
            try {
                ka.__proto__ = ja;
                ia = ka.a;
                break a;
            } catch (a) {
            }
            ia = !1;
        }
        ha = ia ? function(a, b) {
            a.__proto__ = b;
            if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
            return a;
        } : null;
    }
    var la = ha;
    function E(a, b) {
        a.prototype = fa(b.prototype);
        a.prototype.constructor = a;
        if (la) la(a, b);
        else for(var c in b)if ("prototype" != c) {
            if (Object.defineProperties) {
                var d = Object.getOwnPropertyDescriptor(b, c);
                d && Object.defineProperty(a, c, d);
            } else a[c] = b[c];
        }
        a.da = b.prototype;
    }
    function ma() {
        this.l = !1;
        this.i = null;
        this.h = void 0;
        this.g = 1;
        this.s = this.m = 0;
        this.j = null;
    }
    function na(a) {
        if (a.l) throw new TypeError("Generator is already running");
        a.l = !0;
    }
    ma.prototype.o = function(a) {
        this.h = a;
    };
    function oa(a, b) {
        a.j = {
            U: b,
            V: !0
        };
        a.g = a.m || a.s;
    }
    ma.prototype.return = function(a) {
        this.j = {
            return: a
        };
        this.g = this.s;
    };
    function F(a, b, c) {
        a.g = c;
        return {
            value: b
        };
    }
    function pa(a) {
        this.g = new ma;
        this.h = a;
    }
    function qa(a, b) {
        na(a.g);
        var c = a.g.i;
        if (c) return ra(a, "return" in c ? c["return"] : function(d) {
            return {
                value: d,
                done: !0
            };
        }, b, a.g.return);
        a.g.return(b);
        return G(a);
    }
    function ra(a, b, c, d) {
        try {
            var e = b.call(a.g.i, c);
            if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
            if (!e.done) return a.g.l = !1, e;
            var g = e.value;
        } catch (f) {
            return a.g.i = null, oa(a.g, f), G(a);
        }
        a.g.i = null;
        d.call(a.g, g);
        return G(a);
    }
    function G(a) {
        for(; a.g.g;)try {
            var b = a.h(a.g);
            if (b) return a.g.l = !1, {
                value: b.value,
                done: !1
            };
        } catch (c) {
            a.g.h = void 0, oa(a.g, c);
        }
        a.g.l = !1;
        if (a.g.j) {
            b = a.g.j;
            a.g.j = null;
            if (b.V) throw b.U;
            return {
                value: b.return,
                done: !0
            };
        }
        return {
            value: void 0,
            done: !0
        };
    }
    function sa(a) {
        this.next = function(b) {
            na(a.g);
            a.g.i ? b = ra(a, a.g.i.next, b, a.g.o) : (a.g.o(b), b = G(a));
            return b;
        };
        this.throw = function(b) {
            na(a.g);
            a.g.i ? b = ra(a, a.g.i["throw"], b, a.g.o) : (oa(a.g, b), b = G(a));
            return b;
        };
        this.return = function(b) {
            return qa(a, b);
        };
        this[Symbol.iterator] = function() {
            return this;
        };
    }
    function ta(a) {
        function b(d) {
            return a.next(d);
        }
        function c(d) {
            return a.throw(d);
        }
        return new Promise(function(d, e) {
            function g(f) {
                f.done ? d(f.value) : Promise.resolve(f.value).then(b, c).then(g, e);
            }
            g(a.next());
        });
    }
    function H(a) {
        return ta(new sa(new pa(a)));
    }
    B("Promise", function(a) {
        function b(f) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.o = !1;
            var k = this.j();
            try {
                f(k.resolve, k.reject);
            } catch (h) {
                k.reject(h);
            }
        }
        function c() {
            this.g = null;
        }
        function d(f) {
            return f instanceof b ? f : new b(function(k) {
                k(f);
            });
        }
        if (a) return a;
        c.prototype.h = function(f) {
            if (null == this.g) {
                this.g = [];
                var k = this;
                this.i(function() {
                    k.l();
                });
            }
            this.g.push(f);
        };
        var e = y.setTimeout;
        c.prototype.i = function(f) {
            e(f, 0);
        };
        c.prototype.l = function() {
            for(; this.g && this.g.length;){
                var f = this.g;
                this.g = [];
                for(var k = 0; k < f.length; ++k){
                    var h = f[k];
                    f[k] = null;
                    try {
                        h();
                    } catch (l) {
                        this.j(l);
                    }
                }
            }
            this.g = null;
        };
        c.prototype.j = function(f) {
            this.i(function() {
                throw f;
            });
        };
        b.prototype.j = function() {
            function f(l) {
                return function(n) {
                    h || (h = !0, l.call(k, n));
                };
            }
            var k = this, h = !1;
            return {
                resolve: f(this.C),
                reject: f(this.l)
            };
        };
        b.prototype.C = function(f) {
            if (f === this) this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (f instanceof b) this.F(f);
            else {
                a: switch(typeof f){
                    case "object":
                        var k = null != f;
                        break a;
                    case "function":
                        k = !0;
                        break a;
                    default:
                        k = !1;
                }
                k ? this.v(f) : this.m(f);
            }
        };
        b.prototype.v = function(f) {
            var k = void 0;
            try {
                k = f.then;
            } catch (h) {
                this.l(h);
                return;
            }
            "function" == typeof k ? this.G(k, f) : this.m(f);
        };
        b.prototype.l = function(f) {
            this.s(2, f);
        };
        b.prototype.m = function(f) {
            this.s(1, f);
        };
        b.prototype.s = function(f, k) {
            if (0 != this.h) throw Error("Cannot settle(" + f + ", " + k + "): Promise already settled in state" + this.h);
            this.h = f;
            this.i = k;
            2 === this.h && this.D();
            this.A();
        };
        b.prototype.D = function() {
            var f = this;
            e(function() {
                if (f.B()) {
                    var k = y.console;
                    "undefined" !== typeof k && k.error(f.i);
                }
            }, 1);
        };
        b.prototype.B = function() {
            if (this.o) return !1;
            var f = y.CustomEvent, k = y.Event, h = y.dispatchEvent;
            if ("undefined" === typeof h) return !0;
            "function" === typeof f ? f = new f("unhandledrejection", {
                cancelable: !0
            }) : "function" === typeof k ? f = new k("unhandledrejection", {
                cancelable: !0
            }) : (f = y.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", !1, !0, f));
            f.promise = this;
            f.reason = this.i;
            return h(f);
        };
        b.prototype.A = function() {
            if (null != this.g) {
                for(var f = 0; f < this.g.length; ++f)g.h(this.g[f]);
                this.g = null;
            }
        };
        var g = new c;
        b.prototype.F = function(f) {
            var k = this.j();
            f.J(k.resolve, k.reject);
        };
        b.prototype.G = function(f, k) {
            var h = this.j();
            try {
                f.call(k, h.resolve, h.reject);
            } catch (l) {
                h.reject(l);
            }
        };
        b.prototype.then = function(f, k) {
            function h(p, m) {
                return "function" == typeof p ? function(q) {
                    try {
                        l(p(q));
                    } catch (t) {
                        n(t);
                    }
                } : m;
            }
            var l, n, r = new b(function(p, m) {
                l = p;
                n = m;
            });
            this.J(h(f, l), h(k, n));
            return r;
        };
        b.prototype.catch = function(f) {
            return this.then(void 0, f);
        };
        b.prototype.J = function(f, k) {
            function h() {
                switch(l.h){
                    case 1:
                        f(l.i);
                        break;
                    case 2:
                        k(l.i);
                        break;
                    default:
                        throw Error("Unexpected state: " + l.h);
                }
            }
            var l = this;
            null == this.g ? g.h(h) : this.g.push(h);
            this.o = !0;
        };
        b.resolve = d;
        b.reject = function(f) {
            return new b(function(k, h) {
                h(f);
            });
        };
        b.race = function(f) {
            return new b(function(k, h) {
                for(var l = C(f), n = l.next(); !n.done; n = l.next())d(n.value).J(k, h);
            });
        };
        b.all = function(f) {
            var k = C(f), h = k.next();
            return h.done ? d([]) : new b(function(l, n) {
                function r(q) {
                    return function(t) {
                        p[q] = t;
                        m--;
                        0 == m && l(p);
                    };
                }
                var p = [], m = 0;
                do p.push(void 0), m++, d(h.value).J(r(p.length - 1), n), h = k.next();
                while (!h.done)
            });
        };
        return b;
    });
    function ua(a, b) {
        a instanceof String && (a += "");
        var c = 0, d = !1, e = {
            next: function() {
                if (!d && c < a.length) {
                    var g = c++;
                    return {
                        value: b(g, a[g]),
                        done: !1
                    };
                }
                d = !0;
                return {
                    done: !0,
                    value: void 0
                };
            }
        };
        e[Symbol.iterator] = function() {
            return e;
        };
        return e;
    }
    var va = "function" == typeof Object.assign ? Object.assign : function(a, b) {
        for(var c = 1; c < arguments.length; c++){
            var d = arguments[c];
            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);
        }
        return a;
    };
    B("Object.assign", function(a) {
        return a || va;
    });
    B("Object.is", function(a) {
        return a ? a : function(b, c) {
            return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;
        };
    });
    B("Array.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            var d = this;
            d instanceof String && (d = String(d));
            var e = d.length;
            c = c || 0;
            for(0 > c && (c = Math.max(c + e, 0)); c < e; c++){
                var g = d[c];
                if (g === b || Object.is(g, b)) return !0;
            }
            return !1;
        };
    });
    B("String.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            if (null == this) throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");
            if (b instanceof RegExp) throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
            return -1 !== this.indexOf(b, c || 0);
        };
    });
    B("Array.prototype.keys", function(a) {
        return a ? a : function() {
            return ua(this, function(b) {
                return b;
            });
        };
    });
    var wa = this || self;
    function J(a, b) {
        a = a.split(".");
        var c = wa;
        a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
        for(var d; a.length && (d = a.shift());)a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {
        } : c[d] = b;
    }
    function xa(a) {
        wa.setTimeout(function() {
            throw a;
        }, 0);
    }
    function K(a) {
        xa(a);
        return;
    }
    function ya(a, b) {
        K(Error("Invalid wire type: " + a + " (at position " + b + ")"));
    }
    function za() {
        K(Error("Failed to read varint, encoding is invalid."));
    }
    function Aa(a, b) {
        b = String.fromCharCode.apply(null, b);
        return null == a ? b : a + b;
    }
    var Ba, Ca = "undefined" !== typeof TextDecoder, Da, Ea = "undefined" !== typeof TextEncoder;
    function Fa(a) {
        if (Ea) a = (Da || (Da = new TextEncoder)).encode(a);
        else {
            var b = void 0;
            b = void 0 === b ? !1 : b;
            for(var c = 0, d = new Uint8Array(3 * a.length), e = 0; e < a.length; e++){
                var g = a.charCodeAt(e);
                if (128 > g) d[c++] = g;
                else {
                    if (2048 > g) d[c++] = g >> 6 | 192;
                    else {
                        if (55296 <= g && 57343 >= g) {
                            if (56319 >= g && e < a.length) {
                                var f = a.charCodeAt(++e);
                                if (56320 <= f && 57343 >= f) {
                                    g = 1024 * (g - 55296) + f - 56320 + 65536;
                                    d[c++] = g >> 18 | 240;
                                    d[c++] = g >> 12 & 63 | 128;
                                    d[c++] = g >> 6 & 63 | 128;
                                    d[c++] = g & 63 | 128;
                                    continue;
                                } else e--;
                            }
                            if (b) throw Error("Found an unpaired surrogate");
                            g = 65533;
                        }
                        d[c++] = g >> 12 | 224;
                        d[c++] = g >> 6 & 63 | 128;
                    }
                    d[c++] = g & 63 | 128;
                }
            }
            a = d.subarray(0, c);
        }
        return a;
    }
    var Ga = {
    }, L = null;
    function Ha(a) {
        var b;
        void 0 === b && (b = 0);
        Ia();
        b = Ga[b];
        for(var c = Array(Math.floor(a.length / 3)), d = b[64] || "", e = 0, g = 0; e < a.length - 2; e += 3){
            var f = a[e], k = a[e + 1], h = a[e + 2], l = b[f >> 2];
            f = b[(f & 3) << 4 | k >> 4];
            k = b[(k & 15) << 2 | h >> 6];
            h = b[h & 63];
            c[g++] = l + f + k + h;
        }
        l = 0;
        h = d;
        switch(a.length - e){
            case 2:
                l = a[e + 1], h = b[(l & 15) << 2] || d;
            case 1:
                a = a[e], c[g] = b[a >> 2] + b[(a & 3) << 4 | l >> 4] + h + d;
        }
        return c.join("");
    }
    function Ja(a) {
        var b = a.length, c = 3 * b / 4;
        c % 3 ? c = Math.floor(c) : -1 != "=.".indexOf(a[b - 1]) && (c = -1 != "=.".indexOf(a[b - 2]) ? c - 2 : c - 1);
        var d = new Uint8Array(c), e = 0;
        Ka(a, function(g) {
            d[e++] = g;
        });
        return d.subarray(0, e);
    }
    function Ka(a, b) {
        function c(h) {
            for(; d < a.length;){
                var l = a.charAt(d++), n = L[l];
                if (null != n) return n;
                if (!/^[\s\xa0]*$/.test(l)) throw Error("Unknown base64 encoding at char: " + l);
            }
            return h;
        }
        Ia();
        for(var d = 0;;){
            var e = c(-1), g = c(0), f = c(64), k = c(64);
            if (64 === k && -1 === e) break;
            b(e << 2 | g >> 4);
            64 != f && (b(g << 4 & 240 | f >> 2), 64 != k && b(f << 6 & 192 | k));
        }
    }
    function Ia() {
        if (!L) {
            L = {
            };
            for(var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = [
                "+/=",
                "+/",
                "-_=",
                "-_.",
                "-_"
            ], c = 0; 5 > c; c++){
                var d = a.concat(b[c].split(""));
                Ga[c] = d;
                for(var e = 0; e < d.length; e++){
                    var g = d[e];
                    void 0 === L[g] && (L[g] = e);
                }
            }
        }
    }
    var La = "function" === typeof Uint8Array, Ma;
    function Na(a) {
        this.g = a;
        if (null !== a && 0 === a.length) throw Error("ByteString should be constructed with non-empty values");
    }
    Na.prototype.toJSON = function() {
        if (null == this.g) var a = "";
        else a = this.g, a = this.g = null == a || "string" === typeof a ? a : La && a instanceof Uint8Array ? Ha(a) : null;
        return a;
    };
    var Oa = "function" === typeof Uint8Array.prototype.slice;
    function Pa(a, b, c) {
        return b === c ? Ma || (Ma = new Uint8Array(0)) : Oa ? a.slice(b, c) : new Uint8Array(a.subarray(b, c));
    }
    var M = 0, N = 0;
    function Qa(a) {
        if (a.constructor === Uint8Array) return a;
        if (a.constructor === ArrayBuffer) return new Uint8Array(a);
        if (a.constructor === Array) return new Uint8Array(a);
        if (a.constructor === String) return Ja(a);
        if (a.constructor === Na) {
            if (null == a.g) var b = Ma || (Ma = new Uint8Array(0));
            else {
                b = Uint8Array;
                var c = a.g;
                c = null == c || La && null != c && c instanceof Uint8Array ? c : "string" === typeof c ? Ja(c) : null;
                a = a.g = c;
                b = new b(a);
            }
            return b;
        }
        if (a instanceof Uint8Array) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
        throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers");
    }
    function Ra(a, b) {
        b = void 0 === b ? {
        } : b;
        b = void 0 === b.u ? !1 : b.u;
        this.h = null;
        this.g = this.i = this.l = 0;
        this.j = !1;
        this.u = b;
        a && Sa(this, a);
    }
    function Sa(a, b) {
        a.h = Qa(b);
        a.l = 0;
        a.i = a.h.length;
        a.g = a.l;
    }
    Ra.prototype.reset = function() {
        this.g = this.l;
    };
    function O(a) {
        a.g > a.i && (a.j = !0, K(Error("Tried to read past the end of the data " + a.g + " > " + a.i)));
    }
    function P(a) {
        var b = a.h, c = b[a.g], d = c & 127;
        if (128 > c) return a.g += 1, O(a), d;
        c = b[a.g + 1];
        d |= (c & 127) << 7;
        if (128 > c) return a.g += 2, O(a), d;
        c = b[a.g + 2];
        d |= (c & 127) << 14;
        if (128 > c) return a.g += 3, O(a), d;
        c = b[a.g + 3];
        d |= (c & 127) << 21;
        if (128 > c) return a.g += 4, O(a), d;
        c = b[a.g + 4];
        d |= (c & 15) << 28;
        if (128 > c) return a.g += 5, O(a), d >>> 0;
        a.g += 5;
        if (128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++]) return a.j = !0, za(), d;
        O(a);
        return d;
    }
    var Ta = [];
    function Ua() {
        this.g = new Uint8Array(64);
        this.h = 0;
    }
    function Q(a, b) {
        if (!(a.h + 1 < a.g.length)) {
            var c = a.g;
            a.g = new Uint8Array(Math.ceil(1 + 2 * a.g.length));
            a.g.set(c);
        }
        a.g[a.h++] = b;
    }
    Ua.prototype.length = function() {
        return this.h;
    };
    Ua.prototype.end = function() {
        var a = this.g, b = this.h;
        this.h = 0;
        return Pa(a, 0, b);
    };
    function S(a, b) {
        for(; 127 < b;)Q(a, b & 127 | 128), b >>>= 7;
        Q(a, b);
    }
    function Va(a) {
        var b = {
        }, c = void 0 === b.N ? !1 : b.N;
        this.m = {
            u: void 0 === b.u ? !1 : b.u
        };
        this.N = c;
        b = this.m;
        Ta.length ? (c = Ta.pop(), b && (c.u = b.u), a && Sa(c, a), a = c) : a = new Ra(a, b);
        this.g = a;
        this.l = this.g.g;
        this.h = this.i = -1;
        this.j = !1;
    }
    Va.prototype.reset = function() {
        this.g.reset();
        this.h = this.i = -1;
    };
    function Wa(a) {
        var b = a.g;
        (b = b.g == b.i) || (b = a.j) || (b = a.g, b = b.j || 0 > b.g || b.g > b.i);
        if (b) return !1;
        a.l = a.g.g;
        var c = P(a.g);
        b = c >>> 3;
        c &= 7;
        if (!(0 <= c && 5 >= c)) return a.j = !0, ya(c, a.l), !1;
        a.i = b;
        a.h = c;
        return !0;
    }
    function Xa(a) {
        switch(a.h){
            case 0:
                if (0 != a.h) Xa(a);
                else a: {
                    a = a.g;
                    for(var b = a.g, c = 0; 10 > c; c++){
                        if (0 === (a.h[b] & 128)) {
                            a.g = b + 1;
                            O(a);
                            break a;
                        }
                        b++;
                    }
                    a.j = !0;
                    za();
                }
                break;
            case 1:
                a = a.g;
                a.g += 8;
                O(a);
                break;
            case 2:
                2 != a.h ? Xa(a) : (b = P(a.g), a = a.g, a.g += b, O(a));
                break;
            case 5:
                a = a.g;
                a.g += 4;
                O(a);
                break;
            case 3:
                b = a.i;
                do {
                    if (!Wa(a)) {
                        a.j = !0;
                        K(Error("Unmatched start-group tag: stream EOF"));
                        break;
                    }
                    if (4 == a.h) {
                        a.i != b && (a.j = !0, K(Error("Unmatched end-group tag")));
                        break;
                    }
                    Xa(a);
                }while (1)
                break;
            default:
                a.j = !0, ya(a.h, a.l);
        }
    }
    function Ya(a, b, c) {
        a.N || (a = Pa(a.g.h, c, a.g.g), (c = b.m) ? c.push(a) : b.m = [
            a
        ]);
    }
    var Za = [];
    function $a() {
        this.h = [];
        this.i = 0;
        this.g = new Ua;
    }
    function ab(a, b) {
        0 !== b.length && (a.h.push(b), a.i += b.length);
    }
    function bb(a, b, c) {
        S(a.g, 8 * b + 2);
        S(a.g, c.length);
        ab(a, a.g.end());
        ab(a, c);
    }
    var cb = "function" === typeof Symbol && "symbol" === typeof Symbol() ? Symbol(void 0) : void 0;
    function db(a, b) {
        Object.isFrozen(a) || (cb ? a[cb] |= b : void 0 !== a.g ? a.g |= b : Object.defineProperties(a, {
            g: {
                value: b,
                configurable: !0,
                writable: !0,
                enumerable: !1
            }
        }));
    }
    function eb(a) {
        if (!a) return 0;
        var b;
        cb ? b = a[cb] : b = a.g;
        return null == b ? 0 : b;
    }
    function fb(a) {
        if (!Array.isArray(a)) return a;
        db(a, 1);
        return a;
    }
    function gb(a) {
        if (!Array.isArray(a)) throw Error("cannot mark non-array as immutable");
        db(a, 2);
    }
    function hb(a) {
        return null !== a && "object" === typeof a && a.constructor === Object;
    }
    function ib(a) {
        switch(typeof a){
            case "number":
                return isFinite(a) ? a : String(a);
            case "object":
                return La && null != a && a instanceof Uint8Array ? Ha(a) : a;
            default:
                return a;
        }
    }
    function jb(a, b) {
        if (null != a) return Array.isArray(a) || hb(a) ? kb(a, b) : b(a);
    }
    function kb(a, b) {
        if (Array.isArray(a)) {
            for(var c = Array(a.length), d = 0; d < a.length; d++)c[d] = jb(a[d], b);
            eb(a) & 1 && fb(c);
            return c;
        }
        c = {
        };
        for(d in a)c[d] = jb(a[d], b);
        return c;
    }
    var lb;
    function T(a, b, c) {
        var d = lb;
        lb = null;
        a || (a = d);
        d = this.constructor.ba;
        a || (a = d ? [
            d
        ] : []);
        this.j = (d ? 0 : -1) - (this.constructor.$ || 0);
        this.i = null;
        this.g = a;
        a: {
            d = this.g.length;
            a = d - 1;
            if (d && (d = this.g[a], hb(d))) {
                this.l = a - this.j;
                this.h = d;
                break a;
            }
            void 0 !== b && -1 < b ? (this.l = Math.max(b, a + 1 - this.j), this.h = null) : this.l = Number.MAX_VALUE;
        }
        if (c) for(b = 0; b < c.length; b++)a = c[b], a < this.l ? (a += this.j, (d = this.g[a]) ? fb(d) : this.g[a] = mb) : (nb(this), (d = this.h[a]) ? fb(d) : this.h[a] = mb);
    }
    var mb = Object.freeze(fb([]));
    function nb(a) {
        var b = a.l + a.j;
        a.g[b] || (a.h = a.g[b] = {
        });
    }
    function U(a, b, c) {
        return -1 === b ? null : (void 0 === c ? 0 : c) || b >= a.l ? a.h ? a.h[b] : void 0 : a.g[b + a.j];
    }
    function ob(a, b, c) {
        c = void 0 === c ? !0 : c;
        var d = void 0 === d ? !1 : d;
        var e = U(a, b, d);
        null == e && (e = mb);
        e === mb ? (e = fb([]), V(a, b, e, d)) : c && Array.isArray(e) && eb(e) & 2 && (e = e.slice(), V(a, b, e, d));
        return e;
    }
    function W(a, b, c) {
        a = U(a, b);
        a = null == a ? a : +a;
        return null == a ? void 0 === c ? 0 : c : a;
    }
    function V(a, b, c, d) {
        (void 0 === d ? 0 : d) || b >= a.l ? (nb(a), a.h[b] = c) : a.g[b + a.j] = c;
    }
    function pb(a, b, c) {
        a.i || (a.i = {
        });
        var d = a.i[c];
        if (!d) {
            var e = ob(a, c, !1);
            d = [];
            for(var g = Array.isArray(e) ? !!(eb(e) & 2) : !1, f = 0; f < e.length; f++)d[f] = new b(e[f]), g && gb(d[f].g);
            g && (gb(d), Object.freeze(d));
            a.i[c] = d;
        }
        return d;
    }
    function qb(a, b, c, d, e) {
        var g = pb(a, d, b);
        c = c ? c : new d;
        a = ob(a, b);
        void 0 != e ? (g.splice(e, 0, c), a.splice(e, 0, X(c))) : (g.push(c), a.push(X(c)));
    }
    T.prototype.toJSON = function() {
        var a = X(this);
        return kb(a, ib);
    };
    function X(a) {
        if (a.i) for(var b in a.i){
            var c = a.i[b];
            if (Array.isArray(c)) for(var d = 0; d < c.length; d++)c[d] && X(c[d]);
            else c && X(c);
        }
        return a.g;
    }
    T.prototype.toString = function() {
        return X(this).toString();
    };
    function rb(a, b) {
        a = U(a, b);
        return null == a ? 0 : a;
    }
    function sb(a, b) {
        a = U(a, b);
        return null == a ? "" : a;
    }
    function tb(a, b) {
        if (a = a.m) {
            ab(b, b.g.end());
            for(var c = 0; c < a.length; c++)ab(b, a[c]);
        }
    }
    function ub(a) {
        var b = a[0];
        switch(a.length){
            case 2:
                var c = a[1];
                return function(h, l, n) {
                    return b(h, l, n, c);
                };
            case 3:
                var d = a[1], e = a[2];
                return function(h, l, n) {
                    return b(h, l, n, d, e);
                };
            case 4:
                var g = a[1], f = a[2], k = a[3];
                return function(h, l, n) {
                    return b(h, l, n, g, f, k);
                };
            default:
                throw Error("unsupported number of parameters, expected [2-4], got " + a.length);
        }
    }
    function vb(a, b, c) {
        for(; Wa(b) && 4 != b.h;){
            var d = b.i, e = c[d];
            if (e) {
                if (Array.isArray(e) && (e = c[d] = ub(e)), !e(b, a, d)) {
                    d = b;
                    e = a;
                    var g = d.l;
                    Xa(d);
                    Ya(d, e, g);
                }
            } else d = b, e = a, g = d.l, Xa(d), Ya(d, e, g);
        }
        return a;
    }
    function wb(a, b) {
        var c = new $a;
        b(a, c);
        a = c.i + c.g.length();
        if (0 === a) c = new Uint8Array(0);
        else {
            a = new Uint8Array(a);
            for(var d = c.h, e = d.length, g = b = 0; g < e; g++){
                var f = d[g];
                0 !== f.length && (a.set(f, b), b += f.length);
            }
            d = c.g;
            e = d.h;
            0 !== e && (a.set(d.g.subarray(0, e), b), d.h = 0);
            c.h = [
                a
            ];
            c = a;
        }
        return c;
    }
    function xb(a, b, c) {
        if (Za.length) {
            var d = Za.pop();
            a && (Sa(d.g, a), d.i = -1, d.h = -1);
            a = d;
        } else a = new Va(a);
        try {
            return c(new b, a);
        } finally{
            b = a.g, b.h = null, b.l = 0, b.i = 0, b.g = 0, b.j = !1, b.u = !1, a.i = -1, a.h = -1, a.j = !1, 100 > Za.length && Za.push(a);
        }
    }
    function Y(a, b, c) {
        b = U(b, c);
        if (null != b) {
            S(a.g, 8 * c + 5);
            a = a.g;
            var d = b;
            d = (c = 0 > d ? 1 : 0) ? -d : d;
            0 === d ? 0 < 1 / d ? M = N = 0 : (N = 0, M = 2147483648) : isNaN(d) ? (N = 0, M = 2147483647) : 340282346638528860000000000000000000000 < d ? (N = 0, M = (c << 31 | 2139095040) >>> 0) : 0.000000000000000000000000000000000000011754943508222875 > d ? (d = Math.round(d / Math.pow(2, -149)), N = 0, M = (c << 31 | d) >>> 0) : (b = Math.floor(Math.log(d) / Math.LN2), d *= Math.pow(2, -b), d = Math.round(8388608 * d), 16777216 <= d && ++b, N = 0, M = (c << 31 | b + 127 << 23 | d & 8388607) >>> 0);
            c = M;
            Q(a, c >>> 0 & 255);
            Q(a, c >>> 8 & 255);
            Q(a, c >>> 16 & 255);
            Q(a, c >>> 24 & 255);
        }
    }
    function Z(a, b, c) {
        if (5 !== a.h) return !1;
        a = a.g;
        var d = a.h[a.g];
        var e = a.h[a.g + 1];
        var g = a.h[a.g + 2], f = a.h[a.g + 3];
        a.g += 4;
        O(a);
        e = (d << 0 | e << 8 | g << 16 | f << 24) >>> 0;
        a = 2 * (e >> 31) + 1;
        d = e >>> 23 & 255;
        e &= 8388607;
        V(b, c, 255 == d ? e ? NaN : Infinity * a : 0 == d ? a * Math.pow(2, -149) * e : a * Math.pow(2, d - 150) * (e + Math.pow(2, 23)));
        return !0;
    }
    function yb(a, b, c) {
        if (0 !== a.h) return !1;
        for(var d = a.g, e = 128, g = 0, f = a = 0; 4 > f && 128 <= e; f++)e = d.h[d.g++], g |= (e & 127) << 7 * f;
        128 <= e && (e = d.h[d.g++], g |= (e & 127) << 28, a |= (e & 127) >> 4);
        if (128 <= e) for(f = 0; 5 > f && 128 <= e; f++)e = d.h[d.g++], a |= (e & 127) << 7 * f + 3;
        if (128 > e) {
            d = g >>> 0;
            e = a >>> 0;
            if (a = e & 2147483648) d = ~d + 1 >>> 0, e = ~e >>> 0, 0 == d && (e = e + 1 >>> 0);
            d = 4294967296 * e + (d >>> 0);
            a = a ? -d : d;
        } else d.j = !0, za(), a = void 0;
        V(b, c, a);
        return !0;
    }
    function zb(a, b, c) {
        if (0 !== a.h) return !1;
        V(b, c, P(a.g));
        return !0;
    }
    function Ab(a, b, c) {
        if (2 !== a.h) return !1;
        var d = P(a.g);
        a = a.g;
        var e = a.g;
        a.g += d;
        O(a);
        a = a.h;
        var g;
        if (Ca) (g = Ba) || (g = Ba = new TextDecoder("utf-8", {
            fatal: !1
        })), g = g.decode(a.subarray(e, e + d));
        else {
            d = e + d;
            for(var f = [], k = null, h, l, n; e < d;)h = a[e++], 128 > h ? f.push(h) : 224 > h ? e >= d ? f.push(65533) : (l = a[e++], 194 > h || 128 !== (l & 192) ? (e--, f.push(65533)) : f.push((h & 31) << 6 | l & 63)) : 240 > h ? e >= d - 1 ? f.push(65533) : (l = a[e++], 128 !== (l & 192) || 224 === h && 160 > l || 237 === h && 160 <= l || 128 !== ((g = a[e++]) & 192) ? (e--, f.push(65533)) : f.push((h & 15) << 12 | (l & 63) << 6 | g & 63)) : 244 >= h ? e >= d - 2 ? f.push(65533) : (l = a[e++], 128 !== (l & 192) || 0 !== (h << 28) + (l - 144) >> 30 || 128 !== ((g = a[e++]) & 192) || 128 !== ((n = a[e++]) & 192) ? (e--, f.push(65533)) : (h = (h & 7) << 18 | (l & 63) << 12 | (g & 63) << 6 | n & 63, h -= 65536, f.push((h >> 10 & 1023) + 55296, (h & 1023) + 56320))) : f.push(65533), 8192 <= f.length && (k = Aa(k, f), f.length = 0);
            g = Aa(k, f);
        }
        V(b, c, g);
        return !0;
    }
    function Bb(a, b, c, d, e) {
        if (2 !== a.h) return !1;
        var g = new d, f = a.g.i, k = P(a.g), h = a.g.g + k;
        a.g.i = h;
        e(g, a);
        e = h - a.g.g;
        if (0 !== e) throw Error("Message parsing ended unexpectedly. Expected to read " + (k + " bytes, instead read " + (k - e) + " bytes, either the data ended unexpectedly or the message misreported its own length"));
        a.g.g = h;
        a.g.i = f;
        qb(b, c, g, d, void 0);
        return !0;
    }
    function Cb(a) {
        T.call(this, a);
    }
    var Db;
    E(Cb, T);
    function Eb(a, b) {
        var c = U(a, 1);
        if (null != c && null != c) {
            S(b.g, 8);
            var d = b.g;
            if (0 <= c) S(d, c);
            else {
                for(var e = 0; 9 > e; e++)Q(d, c & 127 | 128), c >>= 7;
                Q(d, 1);
            }
        }
        Y(b, a, 2);
        d = U(a, 3);
        null != d && bb(b, 3, Fa(d));
        d = U(a, 4);
        null != d && bb(b, 4, Fa(d));
        tb(a, b);
    }
    function Fb(a, b) {
        return vb(a, b, Db || (Db = {
            1: zb,
            2: Z,
            3: Ab,
            4: Ab
        }));
    }
    function Gb(a) {
        T.call(this, a, -1, Hb);
    }
    var Ib;
    E(Gb, T);
    Gb.prototype.addClassification = function(a, b) {
        qb(this, 1, a, Cb, b);
        return this;
    };
    function Jb(a, b) {
        return vb(a, b, Ib || (Ib = {
            1: [
                Bb,
                Cb,
                Fb
            ]
        }));
    }
    var Hb = [
        1
    ];
    function Kb(a) {
        T.call(this, a);
    }
    var Lb;
    E(Kb, T);
    function Mb(a, b) {
        Y(b, a, 1);
        Y(b, a, 2);
        Y(b, a, 3);
        Y(b, a, 4);
        Y(b, a, 5);
        tb(a, b);
    }
    function Nb(a, b) {
        return vb(a, b, Lb || (Lb = {
            1: Z,
            2: Z,
            3: Z,
            4: Z,
            5: Z
        }));
    }
    function Ob(a) {
        T.call(this, a, -1, Pb);
    }
    var Qb;
    E(Ob, T);
    function Rb(a, b) {
        return vb(a, b, Qb || (Qb = {
            1: [
                Bb,
                Kb,
                Nb
            ]
        }));
    }
    var Pb = [
        1
    ];
    function Sb(a) {
        T.call(this, a);
    }
    var Tb;
    E(Sb, T);
    function Ub(a, b) {
        Y(b, a, 1);
        Y(b, a, 2);
        Y(b, a, 3);
        Y(b, a, 4);
        Y(b, a, 5);
        var c = U(a, 6);
        if (null != c && null != c) {
            S(b.g, 48);
            var d = b.g, e = c;
            c = 0 > e;
            e = Math.abs(e);
            var g = e >>> 0;
            e = Math.floor((e - g) / 4294967296);
            e >>>= 0;
            c && (e = ~e >>> 0, g = (~g >>> 0) + 1, 4294967295 < g && (g = 0, e++, 4294967295 < e && (e = 0)));
            M = g;
            N = e;
            c = M;
            for(g = N; 0 < g || 127 < c;)Q(d, c & 127 | 128), c = (c >>> 7 | g << 25) >>> 0, g >>>= 7;
            Q(d, c);
        }
        tb(a, b);
    }
    function Vb(a, b) {
        return vb(a, b, Tb || (Tb = {
            1: Z,
            2: Z,
            3: Z,
            4: Z,
            5: Z,
            6: yb
        }));
    }
    function Wb(a, b, c) {
        c = a.createShader(0 === c ? a.VERTEX_SHADER : a.FRAGMENT_SHADER);
        a.shaderSource(c, b);
        a.compileShader(c);
        if (!a.getShaderParameter(c, a.COMPILE_STATUS)) throw Error("Could not compile WebGL shader.\n\n" + a.getShaderInfoLog(c));
        return c;
    }
    function Xb(a) {
        return pb(a, Cb, 1).map(function(b) {
            return {
                index: rb(b, 1),
                score: W(b, 2),
                label: null != U(b, 3) ? sb(b, 3) : void 0,
                displayName: null != U(b, 4) ? sb(b, 4) : void 0
            };
        });
    }
    function Yb(a) {
        return {
            x: W(a, 1),
            y: W(a, 2),
            z: W(a, 3),
            visibility: null != U(a, 4) ? W(a, 4) : void 0
        };
    }
    function Zb(a) {
        return a.map(function(b) {
            return pb(xb(b, Ob, Rb), Kb, 1).map(Yb);
        });
    }
    function $b(a, b) {
        this.h = a;
        this.g = b;
        this.l = 0;
    }
    function ac(a, b, c) {
        bc(a, b);
        if ("function" === typeof a.g.canvas.transferToImageBitmap) return Promise.resolve(a.g.canvas.transferToImageBitmap());
        if (c) return Promise.resolve(a.g.canvas);
        if ("function" === typeof createImageBitmap) return createImageBitmap(a.g.canvas);
        void 0 === a.i && (a.i = document.createElement("canvas"));
        return new Promise(function(d) {
            a.i.height = a.g.canvas.height;
            a.i.width = a.g.canvas.width;
            a.i.getContext("2d", {
            }).drawImage(a.g.canvas, 0, 0, a.g.canvas.width, a.g.canvas.height);
            d(a.i);
        });
    }
    function bc(a, b) {
        var c = a.g;
        if (void 0 === a.m) {
            var d = Wb(c, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", 0), e = Wb(c, "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }", 1), g = c.createProgram();
            c.attachShader(g, d);
            c.attachShader(g, e);
            c.linkProgram(g);
            if (!c.getProgramParameter(g, c.LINK_STATUS)) throw Error("Could not compile WebGL program.\n\n" + c.getProgramInfoLog(g));
            d = a.m = g;
            c.useProgram(d);
            e = c.getUniformLocation(d, "sampler0");
            a.j = {
                I: c.getAttribLocation(d, "aVertex"),
                H: c.getAttribLocation(d, "aTex"),
                ca: e
            };
            a.s = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.s);
            c.enableVertexAttribArray(a.j.I);
            c.vertexAttribPointer(a.j.I, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            a.o = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.o);
            c.enableVertexAttribArray(a.j.H);
            c.vertexAttribPointer(a.j.H, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                0,
                1,
                0,
                0,
                1,
                0,
                1,
                1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            c.uniform1i(e, 0);
        }
        d = a.j;
        c.useProgram(a.m);
        c.canvas.width = b.width;
        c.canvas.height = b.height;
        c.viewport(0, 0, b.width, b.height);
        c.activeTexture(c.TEXTURE0);
        a.h.bindTexture2d(b.glName);
        c.enableVertexAttribArray(d.I);
        c.bindBuffer(c.ARRAY_BUFFER, a.s);
        c.vertexAttribPointer(d.I, 2, c.FLOAT, !1, 0, 0);
        c.enableVertexAttribArray(d.H);
        c.bindBuffer(c.ARRAY_BUFFER, a.o);
        c.vertexAttribPointer(d.H, 2, c.FLOAT, !1, 0, 0);
        c.bindFramebuffer(c.DRAW_FRAMEBUFFER ? c.DRAW_FRAMEBUFFER : c.FRAMEBUFFER, null);
        c.clearColor(0, 0, 0, 0);
        c.clear(c.COLOR_BUFFER_BIT);
        c.colorMask(!0, !0, !0, !0);
        c.drawArrays(c.TRIANGLE_FAN, 0, 4);
        c.disableVertexAttribArray(d.I);
        c.disableVertexAttribArray(d.H);
        c.bindBuffer(c.ARRAY_BUFFER, null);
        a.h.bindTexture2d(0);
    }
    function cc(a) {
        this.g = a;
    }
    var dc = new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        4,
        1,
        96,
        0,
        0,
        3,
        2,
        1,
        0,
        10,
        9,
        1,
        7,
        0,
        65,
        0,
        253,
        15,
        26,
        11
    ]);
    function ec(a, b) {
        return b + a;
    }
    function fc(a, b) {
        window[a] = b;
    }
    function gc(a) {
        var b = document.createElement("script");
        b.setAttribute("src", a);
        b.setAttribute("crossorigin", "anonymous");
        return new Promise(function(c) {
            b.addEventListener("load", function() {
                c();
            }, !1);
            b.addEventListener("error", function() {
                c();
            }, !1);
            document.body.appendChild(b);
        });
    }
    function hc() {
        return H(function(a) {
            switch(a.g){
                case 1:
                    return a.m = 2, F(a, WebAssembly.instantiate(dc), 4);
                case 4:
                    a.g = 3;
                    a.m = 0;
                    break;
                case 2:
                    return a.m = 0, a.j = null, a.return(!1);
                case 3:
                    return a.return(!0);
            }
        });
    }
    function ic(a) {
        this.g = a;
        this.listeners = {
        };
        this.j = {
        };
        this.F = {
        };
        this.m = {
        };
        this.s = {
        };
        this.G = this.o = this.R = !0;
        this.C = Promise.resolve();
        this.P = "";
        this.B = {
        };
        this.locateFile = a && a.locateFile || ec;
        if ("object" === typeof window) var b = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
        else if ("undefined" !== typeof location) b = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
        else throw Error("solutions can only be loaded on a web page or in a web worker");
        this.S = b;
        if (a.options) {
            b = C(Object.keys(a.options));
            for(var c = b.next(); !c.done; c = b.next()){
                c = c.value;
                var d = a.options[c].default;
                void 0 !== d && (this.j[c] = "function" === typeof d ? d() : d);
            }
        }
    }
    x = ic.prototype;
    x.close = function() {
        this.i && this.i.delete();
        return Promise.resolve();
    };
    function jc(a) {
        var b, c, d, e, g, f, k, h, l, n, r;
        return H(function(p) {
            switch(p.g){
                case 1:
                    if (!a.R) return p.return();
                    b = void 0 === a.g.files ? [] : "function" === typeof a.g.files ? a.g.files(a.j) : a.g.files;
                    return F(p, hc(), 2);
                case 2:
                    c = p.h;
                    if ("object" === typeof window) return fc("createMediapipeSolutionsWasm", {
                        locateFile: a.locateFile
                    }), fc("createMediapipeSolutionsPackedAssets", {
                        locateFile: a.locateFile
                    }), f = b.filter(function(m) {
                        return void 0 !== m.data;
                    }), k = b.filter(function(m) {
                        return void 0 === m.data;
                    }), h = Promise.all(f.map(function(m) {
                        var q = kc(a, m.url);
                        if (void 0 !== m.path) {
                            var t = m.path;
                            q = q.then(function(w) {
                                a.overrideFile(t, w);
                                return Promise.resolve(w);
                            });
                        }
                        return q;
                    })), l = Promise.all(k.map(function(m) {
                        return void 0 === m.simd || m.simd && c || !m.simd && !c ? gc(a.locateFile(m.url, a.S)) : Promise.resolve();
                    })).then(function() {
                        var m, q, t;
                        return H(function(w) {
                            if (1 == w.g) return m = window.createMediapipeSolutionsWasm, q = window.createMediapipeSolutionsPackedAssets, t = a, F(w, m(q), 2);
                            t.h = w.h;
                            w.g = 0;
                        });
                    }), n = (function() {
                        return H(function(m) {
                            a.g.graph && a.g.graph.url ? m = F(m, kc(a, a.g.graph.url), 0) : (m.g = 0, m = void 0);
                            return m;
                        });
                    })(), F(p, Promise.all([
                        l,
                        h,
                        n
                    ]), 7);
                    if ("function" !== typeof importScripts) throw Error("solutions can only be loaded on a web page or in a web worker");
                    d = b.filter(function(m) {
                        return void 0 === m.simd || m.simd && c || !m.simd && !c;
                    }).map(function(m) {
                        return a.locateFile(m.url, a.S);
                    });
                    importScripts.apply(null, ea(d));
                    e = a;
                    return F(p, createMediapipeSolutionsWasm(Module), 6);
                case 6:
                    e.h = p.h;
                    a.l = new OffscreenCanvas(1, 1);
                    a.h.canvas = a.l;
                    g = a.h.GL.createContext(a.l, {
                        antialias: !1,
                        alpha: !1,
                        aa: "undefined" !== typeof WebGL2RenderingContext ? 2 : 1
                    });
                    a.h.GL.makeContextCurrent(g);
                    p.g = 4;
                    break;
                case 7:
                    a.l = document.createElement("canvas");
                    r = a.l.getContext("webgl2", {
                    });
                    if (!r && (r = a.l.getContext("webgl", {
                    }), !r)) return alert("Failed to create WebGL canvas context when passing video frame."), p.return();
                    a.D = r;
                    a.h.canvas = a.l;
                    a.h.createContext(a.l, !0, !0, {
                    });
                case 4:
                    a.i = new a.h.SolutionWasm, a.R = !1, p.g = 0;
            }
        });
    }
    function lc(a) {
        var b, c, d, e, g, f, k, h;
        return H(function(l) {
            if (1 == l.g) {
                if (a.g.graph && a.g.graph.url && a.P === a.g.graph.url) return l.return();
                a.o = !0;
                if (!a.g.graph || !a.g.graph.url) {
                    l.g = 2;
                    return;
                }
                a.P = a.g.graph.url;
                return F(l, kc(a, a.g.graph.url), 3);
            }
            2 != l.g && (b = l.h, a.i.loadGraph(b));
            c = C(Object.keys(a.B));
            for(d = c.next(); !d.done; d = c.next())e = d.value, a.i.overrideFile(e, a.B[e]);
            a.B = {
            };
            if (a.g.listeners) for(g = C(a.g.listeners), f = g.next(); !f.done; f = g.next())k = f.value, mc(a, k);
            h = a.j;
            a.j = {
            };
            a.setOptions(h);
            l.g = 0;
        });
    }
    x.reset = function() {
        var a = this;
        return H(function(b) {
            a.i && (a.i.reset(), a.m = {
            }, a.s = {
            });
            b.g = 0;
        });
    };
    x.setOptions = function(a, b) {
        var c = this;
        if (b = b || this.g.options) {
            for(var d = [], e = [], g = {
            }, f = C(Object.keys(a)), k = f.next(); !k.done; g = {
                K: g.K,
                L: g.L
            }, k = f.next()){
                var h = k.value;
                h in this.j && this.j[h] === a[h] || (this.j[h] = a[h], k = b[h], void 0 !== k && (k.onChange && (g.K = k.onChange, g.L = a[h], d.push(function(l) {
                    return function() {
                        var n;
                        return H(function(r) {
                            if (1 == r.g) return F(r, l.K(l.L), 2);
                            n = r.h;
                            !0 === n && (c.o = !0);
                            r.g = 0;
                        });
                    };
                }(g))), k.graphOptionXref && (h = {
                    valueNumber: 1 === k.type ? a[h] : 0,
                    valueBoolean: 0 === k.type ? a[h] : !1,
                    valueString: 2 === k.type ? a[h] : ""
                }, k = Object.assign(Object.assign(Object.assign({
                }, {
                    calculatorName: "",
                    calculatorIndex: 0
                }), k.graphOptionXref), h), e.push(k))));
            }
            if (0 !== d.length || 0 !== e.length) this.o = !0, this.A = (void 0 === this.A ? [] : this.A).concat(e), this.v = (void 0 === this.v ? [] : this.v).concat(d);
        }
    };
    function nc(a) {
        var b, c, d, e, g, f, k;
        return H(function(h) {
            switch(h.g){
                case 1:
                    if (!a.o) return h.return();
                    if (!a.v) {
                        h.g = 2;
                        break;
                    }
                    b = C(a.v);
                    c = b.next();
                case 3:
                    if (c.done) {
                        h.g = 5;
                        break;
                    }
                    d = c.value;
                    return F(h, d(), 4);
                case 4:
                    c = b.next();
                    h.g = 3;
                    break;
                case 5:
                    a.v = void 0;
                case 2:
                    if (a.A) {
                        e = new a.h.GraphOptionChangeRequestList;
                        g = C(a.A);
                        for(f = g.next(); !f.done; f = g.next())k = f.value, e.push_back(k);
                        a.i.changeOptions(e);
                        e.delete();
                        a.A = void 0;
                    }
                    a.o = !1;
                    h.g = 0;
            }
        });
    }
    x.initialize = function() {
        var a = this;
        return H(function(b) {
            return 1 == b.g ? F(b, jc(a), 2) : 3 != b.g ? F(b, lc(a), 3) : F(b, nc(a), 0);
        });
    };
    function kc(a, b) {
        var c, d;
        return H(function(e) {
            if (b in a.F) return e.return(a.F[b]);
            c = a.locateFile(b, "");
            d = fetch(c).then(function(g) {
                return g.arrayBuffer();
            });
            a.F[b] = d;
            return e.return(d);
        });
    }
    x.overrideFile = function(a, b) {
        this.i ? this.i.overrideFile(a, b) : this.B[a] = b;
    };
    x.clearOverriddenFiles = function() {
        this.B = {
        };
        this.i && this.i.clearOverriddenFiles();
    };
    x.send = function(a, b) {
        var c = this, d, e, g, f, k, h, l, n, r;
        return H(function(p) {
            switch(p.g){
                case 1:
                    if (!c.g.inputs) return p.return();
                    d = 1000 * (void 0 === b || null === b ? performance.now() : b);
                    return F(p, c.C, 2);
                case 2:
                    return F(p, c.initialize(), 3);
                case 3:
                    e = new c.h.PacketDataList;
                    g = C(Object.keys(a));
                    for(f = g.next(); !f.done; f = g.next())if (k = f.value, h = c.g.inputs[k]) {
                        a: {
                            var m = a[k];
                            switch(h.type){
                                case "video":
                                    var q = c.m[h.stream];
                                    q || (q = new $b(c.h, c.D), c.m[h.stream] = q);
                                    0 === q.l && (q.l = q.h.createTexture());
                                    if ("undefined" !== typeof HTMLVideoElement && m instanceof HTMLVideoElement) {
                                        var t = m.videoWidth;
                                        var w = m.videoHeight;
                                    } else "undefined" !== typeof HTMLImageElement && m instanceof HTMLImageElement ? (t = m.naturalWidth, w = m.naturalHeight) : (t = m.width, w = m.height);
                                    w = {
                                        glName: q.l,
                                        width: t,
                                        height: w
                                    };
                                    t = q.g;
                                    t.canvas.width = w.width;
                                    t.canvas.height = w.height;
                                    t.activeTexture(t.TEXTURE0);
                                    q.h.bindTexture2d(q.l);
                                    t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, m);
                                    q.h.bindTexture2d(0);
                                    q = w;
                                    break a;
                                case "detections":
                                    q = c.m[h.stream];
                                    q || (q = new cc(c.h), c.m[h.stream] = q);
                                    q.data || (q.data = new q.g.DetectionListData);
                                    q.data.reset(m.length);
                                    for(w = 0; w < m.length; ++w){
                                        t = m[w];
                                        var v = q.data, A = v.setBoundingBox, I = w;
                                        var D = t.T;
                                        var u = new Sb;
                                        V(u, 1, D.X);
                                        V(u, 2, D.Y);
                                        V(u, 3, D.height);
                                        V(u, 4, D.width);
                                        V(u, 5, D.rotation);
                                        V(u, 6, D.W);
                                        D = wb(u, Ub);
                                        A.call(v, I, D);
                                        if (t.O) for(v = 0; v < t.O.length; ++v){
                                            u = t.O[v];
                                            var z = u.visibility ? !0 : !1;
                                            A = q.data;
                                            I = A.addNormalizedLandmark;
                                            D = w;
                                            u = Object.assign(Object.assign({
                                            }, u), {
                                                visibility: z ? u.visibility : 0
                                            });
                                            z = new Kb;
                                            V(z, 1, u.x);
                                            V(z, 2, u.y);
                                            V(z, 3, u.z);
                                            u.visibility && V(z, 4, u.visibility);
                                            u = wb(z, Mb);
                                            I.call(A, D, u);
                                        }
                                        if (t.M) for(v = 0; v < t.M.length; ++v)A = q.data, I = A.addClassification, D = w, u = t.M[v], z = new Cb, V(z, 2, u.score), u.index && V(z, 1, u.index), u.label && V(z, 3, u.label), u.displayName && V(z, 4, u.displayName), u = wb(z, Eb), I.call(A, D, u);
                                    }
                                    q = q.data;
                                    break a;
                                default:
                                    q = {
                                    };
                            }
                        }
                        l = q;
                        n = h.stream;
                        switch(h.type){
                            case "video":
                                e.pushTexture2d(Object.assign(Object.assign({
                                }, l), {
                                    stream: n,
                                    timestamp: d
                                }));
                                break;
                            case "detections":
                                r = l;
                                r.stream = n;
                                r.timestamp = d;
                                e.pushDetectionList(r);
                                break;
                            default:
                                throw Error("Unknown input config type: '" + h.type + "'");
                        }
                    }
                    c.i.send(e);
                    return F(p, c.C, 4);
                case 4:
                    e.delete(), p.g = 0;
            }
        });
    };
    function oc(a, b, c) {
        var d, e, g, f, k, h, l, n, r, p, m, q, t, w;
        return H(function(v) {
            switch(v.g){
                case 1:
                    if (!c) return v.return(b);
                    d = {
                    };
                    e = 0;
                    g = C(Object.keys(c));
                    for(f = g.next(); !f.done; f = g.next())k = f.value, h = c[k], "string" !== typeof h && "texture" === h.type && void 0 !== b[h.stream] && ++e;
                    1 < e && (a.G = !1);
                    l = C(Object.keys(c));
                    f = l.next();
                case 2:
                    if (f.done) {
                        v.g = 4;
                        break;
                    }
                    n = f.value;
                    r = c[n];
                    if ("string" === typeof r) return t = d, w = n, F(v, pc(a, n, b[r]), 14);
                    p = b[r.stream];
                    if ("detection_list" === r.type) {
                        if (p) {
                            var A = p.getRectList();
                            for(var I = p.getLandmarksList(), D = p.getClassificationsList(), u = [], z = 0; z < A.size(); ++z){
                                var R = xb(A.get(z), Sb, Vb);
                                R = {
                                    T: {
                                        X: W(R, 1),
                                        Y: W(R, 2),
                                        height: W(R, 3),
                                        width: W(R, 4),
                                        rotation: W(R, 5, 0),
                                        W: rb(R, 6)
                                    },
                                    O: pb(xb(I.get(z), Ob, Rb), Kb, 1).map(Yb),
                                    M: Xb(xb(D.get(z), Gb, Jb))
                                };
                                u.push(R);
                            }
                            A = u;
                        } else A = [];
                        d[n] = A;
                        v.g = 7;
                        break;
                    }
                    if ("proto_list" === r.type) {
                        if (p) {
                            A = Array(p.size());
                            for(I = 0; I < p.size(); I++)A[I] = p.get(I);
                            p.delete();
                        } else A = [];
                        d[n] = A;
                        v.g = 7;
                        break;
                    }
                    if (void 0 === p) {
                        v.g = 3;
                        break;
                    }
                    if ("float_list" === r.type) {
                        d[n] = p;
                        v.g = 7;
                        break;
                    }
                    if ("proto" === r.type) {
                        d[n] = p;
                        v.g = 7;
                        break;
                    }
                    if ("texture" !== r.type) throw Error("Unknown output config type: '" + r.type + "'");
                    m = a.s[n];
                    m || (m = new $b(a.h, a.D), a.s[n] = m);
                    return F(v, ac(m, p, a.G), 13);
                case 13:
                    q = v.h, d[n] = q;
                case 7:
                    r.transform && d[n] && (d[n] = r.transform(d[n]));
                    v.g = 3;
                    break;
                case 14:
                    t[w] = v.h;
                case 3:
                    f = l.next();
                    v.g = 2;
                    break;
                case 4:
                    return v.return(d);
            }
        });
    }
    function pc(a, b, c) {
        var d;
        return H(function(e) {
            return "number" === typeof c || c instanceof Uint8Array || c instanceof a.h.Uint8BlobList ? e.return(c) : c instanceof a.h.Texture2dDataOut ? (d = a.s[b], d || (d = new $b(a.h, a.D), a.s[b] = d), e.return(ac(d, c, a.G))) : e.return(void 0);
        });
    }
    function mc(a, b) {
        for(var c = b.name || "$", d = [].concat(ea(b.wants)), e = new a.h.StringList, g = C(b.wants), f = g.next(); !f.done; f = g.next())e.push_back(f.value);
        g = a.h.PacketListener.implement({
            onResults: function(k) {
                for(var h = {
                }, l = 0; l < b.wants.length; ++l)h[d[l]] = k.get(l);
                var n = a.listeners[c];
                n && (a.C = oc(a, h, b.outs).then(function(r) {
                    r = n(r);
                    for(var p = 0; p < b.wants.length; ++p){
                        var m = h[d[p]];
                        "object" === typeof m && m.hasOwnProperty && m.hasOwnProperty("delete") && m.delete();
                    }
                    r && (a.C = r);
                }));
            }
        });
        a.i.attachMultiListener(e, g);
        e.delete();
    }
    x.onResults = function(a, b) {
        this.listeners[b || "$"] = a;
    };
    J("Solution", ic);
    J("OptionType", {
        BOOL: 0,
        NUMBER: 1,
        Z: 2,
        0: "BOOL",
        1: "NUMBER",
        2: "STRING"
    });
    function qc(a) {
        void 0 === a && (a = 0);
        return 1 === a ? "hand_landmark_full.tflite" : "hand_landmark_lite.tflite";
    }
    function rc(a) {
        var b = this;
        a = a || {
        };
        this.g = new ic({
            locateFile: a.locateFile,
            files: function(c) {
                return [
                    {
                        url: "hands_solution_packed_assets_loader.js"
                    },
                    {
                        simd: !1,
                        url: "hands_solution_wasm_bin.js"
                    },
                    {
                        simd: !0,
                        url: "hands_solution_simd_wasm_bin.js"
                    },
                    {
                        data: !0,
                        url: qc(c.modelComplexity)
                    }
                ];
            },
            graph: {
                url: "hands.binarypb"
            },
            inputs: {
                image: {
                    type: "video",
                    stream: "input_frames_gpu"
                }
            },
            listeners: [
                {
                    wants: [
                        "multi_hand_landmarks",
                        "multi_hand_world_landmarks",
                        "image_transformed",
                        "multi_handedness"
                    ],
                    outs: {
                        image: "image_transformed",
                        multiHandLandmarks: {
                            type: "proto_list",
                            stream: "multi_hand_landmarks",
                            transform: Zb
                        },
                        multiHandWorldLandmarks: {
                            type: "proto_list",
                            stream: "multi_hand_world_landmarks",
                            transform: Zb
                        },
                        multiHandedness: {
                            type: "proto_list",
                            stream: "multi_handedness",
                            transform: function(c) {
                                return c.map(function(d) {
                                    return Xb(xb(d, Gb, Jb))[0];
                                });
                            }
                        }
                    }
                }
            ],
            options: {
                useCpuInference: {
                    type: 0,
                    graphOptionXref: {
                        calculatorType: "InferenceCalculator",
                        fieldName: "use_cpu_inference"
                    },
                    default: "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document
                },
                selfieMode: {
                    type: 0,
                    graphOptionXref: {
                        calculatorType: "GlScalerCalculator",
                        calculatorIndex: 1,
                        fieldName: "flip_horizontal"
                    }
                },
                maxNumHands: {
                    type: 1,
                    graphOptionXref: {
                        calculatorType: "ConstantSidePacketCalculator",
                        calculatorName: "ConstantSidePacketCalculator",
                        fieldName: "int_value"
                    }
                },
                modelComplexity: {
                    type: 1,
                    graphOptionXref: {
                        calculatorType: "ConstantSidePacketCalculator",
                        calculatorName: "ConstantSidePacketCalculatorModelComplexity",
                        fieldName: "int_value"
                    },
                    onChange: function(c) {
                        var d, e, g;
                        return H(function(f) {
                            if (1 == f.g) return d = qc(c), e = "third_party/mediapipe/modules/hand_landmark/" + d, F(f, kc(b.g, d), 2);
                            g = f.h;
                            b.g.overrideFile(e, g);
                            return f.return(!0);
                        });
                    }
                },
                minDetectionConfidence: {
                    type: 1,
                    graphOptionXref: {
                        calculatorType: "TensorsToDetectionsCalculator",
                        calculatorName: "handlandmarktrackinggpu__palmdetectiongpu__TensorsToDetectionsCalculator",
                        fieldName: "min_score_thresh"
                    }
                },
                minTrackingConfidence: {
                    type: 1,
                    graphOptionXref: {
                        calculatorType: "ThresholdingCalculator",
                        calculatorName: "handlandmarktrackinggpu__handlandmarkgpu__ThresholdingCalculator",
                        fieldName: "threshold"
                    }
                }
            }
        });
    }
    x = rc.prototype;
    x.close = function() {
        this.g.close();
        return Promise.resolve();
    };
    x.onResults = function(a) {
        this.g.onResults(a);
    };
    x.initialize = function() {
        var a = this;
        return H(function(b) {
            return F(b, a.g.initialize(), 0);
        });
    };
    x.reset = function() {
        this.g.reset();
    };
    x.send = function(a) {
        var b = this;
        return H(function(c) {
            return F(c, b.g.send(a), 0);
        });
    };
    x.setOptions = function(a) {
        this.g.setOptions(a);
    };
    J("Hands", rc);
    J("HAND_CONNECTIONS", [
        [
            0,
            1
        ],
        [
            1,
            2
        ],
        [
            2,
            3
        ],
        [
            3,
            4
        ],
        [
            0,
            5
        ],
        [
            5,
            6
        ],
        [
            6,
            7
        ],
        [
            7,
            8
        ],
        [
            5,
            9
        ],
        [
            9,
            10
        ],
        [
            10,
            11
        ],
        [
            11,
            12
        ],
        [
            9,
            13
        ],
        [
            13,
            14
        ],
        [
            14,
            15
        ],
        [
            15,
            16
        ],
        [
            13,
            17
        ],
        [
            0,
            17
        ],
        [
            17,
            18
        ],
        [
            18,
            19
        ],
        [
            19,
            20
        ]
    ]);
    J("VERSION", "0.4.1635986972");
}).call(this);

},{}],"jo1qi":[function(require,module,exports) {
var global = arguments[3];
(function() {
    function n(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: !1,
                value: a[b++]
            } : {
                done: !0
            };
        };
    }
    var q = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, e) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b] = e.value;
        return a;
    };
    function t(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var b = 0; b < a.length; ++b){
            var e = a[b];
            if (e && e.Math == Math) return e;
        }
        throw Error("Cannot find global object");
    }
    var u = t(this);
    function v(a, b) {
        if (b) a: {
            var e = u;
            a = a.split(".");
            for(var f = 0; f < a.length - 1; f++){
                var h = a[f];
                if (!(h in e)) break a;
                e = e[h];
            }
            a = a[a.length - 1];
            f = e[a];
            b = b(f);
            b != f && null != b && q(e, a, {
                configurable: !0,
                writable: !0,
                value: b
            });
        }
    }
    v("Symbol", function(a) {
        function b(l) {
            if (this instanceof b) throw new TypeError("Symbol is not a constructor");
            return new e(f + (l || "") + "_" + h++, l);
        }
        function e(l, c) {
            this.g = l;
            q(this, "description", {
                configurable: !0,
                writable: !0,
                value: c
            });
        }
        if (a) return a;
        e.prototype.toString = function() {
            return this.g;
        };
        var f = "jscomp_symbol_" + (1000000000 * Math.random() >>> 0) + "_", h = 0;
        return b;
    });
    v("Symbol.iterator", function(a) {
        if (a) return a;
        a = Symbol("Symbol.iterator");
        for(var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), e = 0; e < b.length; e++){
            var f = u[b[e]];
            "function" === typeof f && "function" != typeof f.prototype[a] && q(f.prototype, a, {
                configurable: !0,
                writable: !0,
                value: function() {
                    return w(n(this));
                }
            });
        }
        return a;
    });
    function w(a) {
        a = {
            next: a
        };
        a[Symbol.iterator] = function() {
            return this;
        };
        return a;
    }
    function x(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: n(a)
        };
    }
    function y() {
        this.i = !1;
        this.g = null;
        this.o = void 0;
        this.j = 1;
        this.m = 0;
        this.h = null;
    }
    function z(a) {
        if (a.i) throw new TypeError("Generator is already running");
        a.i = !0;
    }
    y.prototype.l = function(a) {
        this.o = a;
    };
    function A(a, b) {
        a.h = {
            F: b,
            G: !0
        };
        a.j = a.m;
    }
    y.prototype.return = function(a) {
        this.h = {
            return: a
        };
        this.j = this.m;
    };
    function B(a) {
        this.g = new y;
        this.h = a;
    }
    function C(a, b) {
        z(a.g);
        var e = a.g.g;
        if (e) return D(a, "return" in e ? e["return"] : function(f) {
            return {
                value: f,
                done: !0
            };
        }, b, a.g.return);
        a.g.return(b);
        return H(a);
    }
    function D(a, b, e, f) {
        try {
            var h = b.call(a.g.g, e);
            if (!(h instanceof Object)) throw new TypeError("Iterator result " + h + " is not an object");
            if (!h.done) return a.g.i = !1, h;
            var l = h.value;
        } catch (c) {
            return a.g.g = null, A(a.g, c), H(a);
        }
        a.g.g = null;
        f.call(a.g, l);
        return H(a);
    }
    function H(a) {
        for(; a.g.j;)try {
            var b = a.h(a.g);
            if (b) return a.g.i = !1, {
                value: b.value,
                done: !1
            };
        } catch (e) {
            a.g.o = void 0, A(a.g, e);
        }
        a.g.i = !1;
        if (a.g.h) {
            b = a.g.h;
            a.g.h = null;
            if (b.G) throw b.F;
            return {
                value: b.return,
                done: !0
            };
        }
        return {
            value: void 0,
            done: !0
        };
    }
    function I(a) {
        this.next = function(b) {
            z(a.g);
            a.g.g ? b = D(a, a.g.g.next, b, a.g.l) : (a.g.l(b), b = H(a));
            return b;
        };
        this.throw = function(b) {
            z(a.g);
            a.g.g ? b = D(a, a.g.g["throw"], b, a.g.l) : (A(a.g, b), b = H(a));
            return b;
        };
        this.return = function(b) {
            return C(a, b);
        };
        this[Symbol.iterator] = function() {
            return this;
        };
    }
    function J(a) {
        function b(f) {
            return a.next(f);
        }
        function e(f) {
            return a.throw(f);
        }
        return new Promise(function(f, h) {
            function l(c) {
                c.done ? f(c.value) : Promise.resolve(c.value).then(b, e).then(l, h);
            }
            l(a.next());
        });
    }
    v("Promise", function(a) {
        function b(c) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.o = !1;
            var d = this.j();
            try {
                c(d.resolve, d.reject);
            } catch (g) {
                d.reject(g);
            }
        }
        function e() {
            this.g = null;
        }
        function f(c) {
            return c instanceof b ? c : new b(function(d) {
                d(c);
            });
        }
        if (a) return a;
        e.prototype.h = function(c) {
            if (null == this.g) {
                this.g = [];
                var d = this;
                this.i(function() {
                    d.l();
                });
            }
            this.g.push(c);
        };
        var h = u.setTimeout;
        e.prototype.i = function(c) {
            h(c, 0);
        };
        e.prototype.l = function() {
            for(; this.g && this.g.length;){
                var c = this.g;
                this.g = [];
                for(var d = 0; d < c.length; ++d){
                    var g = c[d];
                    c[d] = null;
                    try {
                        g();
                    } catch (k) {
                        this.j(k);
                    }
                }
            }
            this.g = null;
        };
        e.prototype.j = function(c) {
            this.i(function() {
                throw c;
            });
        };
        b.prototype.j = function() {
            function c(k) {
                return function(m) {
                    g || (g = !0, k.call(d, m));
                };
            }
            var d = this, g = !1;
            return {
                resolve: c(this.A),
                reject: c(this.l)
            };
        };
        b.prototype.A = function(c) {
            if (c === this) this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (c instanceof b) this.C(c);
            else {
                a: switch(typeof c){
                    case "object":
                        var d = null != c;
                        break a;
                    case "function":
                        d = !0;
                        break a;
                    default:
                        d = !1;
                }
                d ? this.v(c) : this.m(c);
            }
        };
        b.prototype.v = function(c) {
            var d = void 0;
            try {
                d = c.then;
            } catch (g) {
                this.l(g);
                return;
            }
            "function" == typeof d ? this.D(d, c) : this.m(c);
        };
        b.prototype.l = function(c) {
            this.u(2, c);
        };
        b.prototype.m = function(c) {
            this.u(1, c);
        };
        b.prototype.u = function(c, d) {
            if (0 != this.h) throw Error("Cannot settle(" + c + ", " + d + "): Promise already settled in state" + this.h);
            this.h = c;
            this.i = d;
            2 === this.h && this.B();
            this.H();
        };
        b.prototype.B = function() {
            var c = this;
            h(function() {
                if (c.I()) {
                    var d = u.console;
                    "undefined" !== typeof d && d.error(c.i);
                }
            }, 1);
        };
        b.prototype.I = function() {
            if (this.o) return !1;
            var c = u.CustomEvent, d = u.Event, g = u.dispatchEvent;
            if ("undefined" === typeof g) return !0;
            "function" === typeof c ? c = new c("unhandledrejection", {
                cancelable: !0
            }) : "function" === typeof d ? c = new d("unhandledrejection", {
                cancelable: !0
            }) : (c = u.document.createEvent("CustomEvent"), c.initCustomEvent("unhandledrejection", !1, !0, c));
            c.promise = this;
            c.reason = this.i;
            return g(c);
        };
        b.prototype.H = function() {
            if (null != this.g) {
                for(var c = 0; c < this.g.length; ++c)l.h(this.g[c]);
                this.g = null;
            }
        };
        var l = new e;
        b.prototype.C = function(c) {
            var d = this.j();
            c.s(d.resolve, d.reject);
        };
        b.prototype.D = function(c, d) {
            var g = this.j();
            try {
                c.call(d, g.resolve, g.reject);
            } catch (k) {
                g.reject(k);
            }
        };
        b.prototype.then = function(c, d) {
            function g(p, r) {
                return "function" == typeof p ? function(E) {
                    try {
                        k(p(E));
                    } catch (F) {
                        m(F);
                    }
                } : r;
            }
            var k, m, G = new b(function(p, r) {
                k = p;
                m = r;
            });
            this.s(g(c, k), g(d, m));
            return G;
        };
        b.prototype.catch = function(c) {
            return this.then(void 0, c);
        };
        b.prototype.s = function(c, d) {
            function g() {
                switch(k.h){
                    case 1:
                        c(k.i);
                        break;
                    case 2:
                        d(k.i);
                        break;
                    default:
                        throw Error("Unexpected state: " + k.h);
                }
            }
            var k = this;
            null == this.g ? l.h(g) : this.g.push(g);
            this.o = !0;
        };
        b.resolve = f;
        b.reject = function(c) {
            return new b(function(d, g) {
                g(c);
            });
        };
        b.race = function(c) {
            return new b(function(d, g) {
                for(var k = x(c), m = k.next(); !m.done; m = k.next())f(m.value).s(d, g);
            });
        };
        b.all = function(c) {
            var d = x(c), g = d.next();
            return g.done ? f([]) : new b(function(k, m) {
                function G(E) {
                    return function(F) {
                        p[E] = F;
                        r--;
                        0 == r && k(p);
                    };
                }
                var p = [], r = 0;
                do p.push(void 0), r++, f(g.value).s(G(p.length - 1), m), g = d.next();
                while (!g.done)
            });
        };
        return b;
    });
    var K = "function" == typeof Object.assign ? Object.assign : function(a, b) {
        for(var e = 1; e < arguments.length; e++){
            var f = arguments[e];
            if (f) for(var h in f)Object.prototype.hasOwnProperty.call(f, h) && (a[h] = f[h]);
        }
        return a;
    };
    v("Object.assign", function(a) {
        return a || K;
    });
    var L = this || self;
    var M = {
        facingMode: "user",
        width: 640,
        height: 480
    };
    function N(a, b) {
        this.video = a;
        this.i = 0;
        this.h = Object.assign(Object.assign({
        }, M), b);
    }
    N.prototype.stop = function() {
        var a = this, b, e, f, h;
        return J(new I(new B(function(l) {
            if (a.g) {
                b = a.g.getTracks();
                e = x(b);
                for(f = e.next(); !f.done; f = e.next())h = f.value, h.stop();
                a.g = void 0;
            }
            l.j = 0;
        })));
    };
    N.prototype.start = function() {
        var a = this, b;
        return J(new I(new B(function(e) {
            navigator.mediaDevices && navigator.mediaDevices.getUserMedia || alert("No navigator.mediaDevices.getUserMedia exists.");
            b = a.h;
            return e.return(navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: b.facingMode,
                    width: b.width,
                    height: b.height
                }
            }).then(function(f) {
                O(a, f);
            }).catch(function(f) {
                var h = "Failed to acquire camera feed: " + f;
                console.error(h);
                alert(h);
                throw f;
            }));
        })));
    };
    function P(a) {
        window.requestAnimationFrame(function() {
            Q(a);
        });
    }
    function O(a, b) {
        a.g = b;
        a.video.srcObject = b;
        a.video.onloadedmetadata = function() {
            a.video.play();
            P(a);
        };
    }
    function Q(a) {
        var b = null;
        a.video.paused || a.video.currentTime === a.i || (a.i = a.video.currentTime, b = a.h.onFrame());
        b ? b.then(function() {
            P(a);
        }) : P(a);
    }
    var R = [
        "Camera"
    ], S = L;
    R[0] in S || "undefined" == typeof S.execScript || S.execScript("var " + R[0]);
    for(var T; R.length && (T = R.shift());)R.length || void 0 === N ? S[T] && S[T] !== Object.prototype[T] ? S = S[T] : S = S[T] = {
    } : S[T] = N;
}).call(this);

},{}],"hRegf":[function(require,module,exports) {
var global = arguments[3];
(function() {
    function h(a) {
        var c = 0;
        return function() {
            return c < a.length ? {
                done: !1,
                value: a[c++]
            } : {
                done: !0
            };
        };
    }
    var l = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, c, b) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[c] = b.value;
        return a;
    };
    function m(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var c = 0; c < a.length; ++c){
            var b = a[c];
            if (b && b.Math == Math) return b;
        }
        throw Error("Cannot find global object");
    }
    var n = m(this);
    function p(a, c) {
        if (c) a: {
            var b = n;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                if (!(e in b)) break a;
                b = b[e];
            }
            a = a[a.length - 1];
            d = b[a];
            c = c(d);
            c != d && null != c && l(b, a, {
                configurable: !0,
                writable: !0,
                value: c
            });
        }
    }
    function q(a) {
        var c = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return c ? c.call(a) : {
            next: h(a)
        };
    }
    var r = "function" == typeof Object.assign ? Object.assign : function(a, c) {
        for(var b = 1; b < arguments.length; b++){
            var d = arguments[b];
            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);
        }
        return a;
    };
    p("Object.assign", function(a) {
        return a || r;
    });
    p("Array.prototype.fill", function(a) {
        return a ? a : function(c, b, d) {
            var e = this.length || 0;
            0 > b && (b = Math.max(0, e + b));
            if (null == d || d > e) d = e;
            d = Number(d);
            0 > d && (d = Math.max(0, e + d));
            for(b = Number(b || 0); b < d; b++)this[b] = c;
            return this;
        };
    });
    function t(a) {
        return a ? a : Array.prototype.fill;
    }
    p("Int8Array.prototype.fill", t);
    p("Uint8Array.prototype.fill", t);
    p("Uint8ClampedArray.prototype.fill", t);
    p("Int16Array.prototype.fill", t);
    p("Uint16Array.prototype.fill", t);
    p("Int32Array.prototype.fill", t);
    p("Uint32Array.prototype.fill", t);
    p("Float32Array.prototype.fill", t);
    p("Float64Array.prototype.fill", t);
    var u = this || self;
    function v(a, c) {
        a = a.split(".");
        var b = u;
        a[0] in b || "undefined" == typeof b.execScript || b.execScript("var " + a[0]);
        for(var d; a.length && (d = a.shift());)a.length || void 0 === c ? b[d] && b[d] !== Object.prototype[d] ? b = b[d] : b = b[d] = {
        } : b[d] = c;
    }
    var w = {
        color: "white",
        lineWidth: 4,
        radius: 6,
        visibilityMin: 0.5
    };
    function x(a) {
        a = a || {
        };
        return Object.assign(Object.assign(Object.assign({
        }, w), {
            fillColor: a.color
        }), a);
    }
    function y(a, c) {
        return a instanceof Function ? a(c) : a;
    }
    function z(a, c, b) {
        return Math.max(Math.min(c, b), Math.min(Math.max(c, b), a));
    }
    v("clamp", z);
    v("drawLandmarks", function(a, c, b) {
        if (c) {
            b = x(b);
            a.save();
            var d = a.canvas, e = 0;
            c = q(c);
            for(var f = c.next(); !f.done; f = c.next())if (f = f.value, void 0 !== f && (void 0 === f.visibility || f.visibility > b.visibilityMin)) {
                a.fillStyle = y(b.fillColor, {
                    index: e,
                    from: f
                });
                a.strokeStyle = y(b.color, {
                    index: e,
                    from: f
                });
                a.lineWidth = y(b.lineWidth, {
                    index: e,
                    from: f
                });
                var g = new Path2D;
                g.arc(f.x * d.width, f.y * d.height, y(b.radius, {
                    index: e,
                    from: f
                }), 0, 2 * Math.PI);
                a.fill(g);
                a.stroke(g);
                ++e;
            }
            a.restore();
        }
    });
    v("drawConnectors", function(a, c, b, d) {
        if (c && b) {
            d = x(d);
            a.save();
            var e = a.canvas, f = 0;
            b = q(b);
            for(var g = b.next(); !g.done; g = b.next()){
                var k = g.value;
                a.beginPath();
                g = c[k[0]];
                k = c[k[1]];
                g && k && (void 0 === g.visibility || g.visibility > d.visibilityMin) && (void 0 === k.visibility || k.visibility > d.visibilityMin) && (a.strokeStyle = y(d.color, {
                    index: f,
                    from: g,
                    to: k
                }), a.lineWidth = y(d.lineWidth, {
                    index: f,
                    from: g,
                    to: k
                }), a.moveTo(g.x * e.width, g.y * e.height), a.lineTo(k.x * e.width, k.y * e.height));
                ++f;
                a.stroke();
            }
            a.restore();
        }
    });
    v("drawRectangle", function(a, c, b) {
        b = x(b);
        a.save();
        var d = a.canvas;
        a.beginPath();
        a.lineWidth = y(b.lineWidth, {
        });
        a.strokeStyle = y(b.color, {
        });
        a.fillStyle = y(b.fillColor, {
        });
        a.translate(c.xCenter * d.width, c.yCenter * d.height);
        a.rotate(c.rotation * Math.PI / 180);
        a.rect(-c.width / 2 * d.width, -c.height / 2 * d.height, c.width * d.width, c.height * d.height);
        a.translate(-c.xCenter * d.width, -c.yCenter * d.height);
        a.stroke();
        a.fill();
        a.restore();
    });
    v("lerp", function(a, c, b, d, e) {
        return z(d * (1 - (a - c) / (b - c)) + e * (1 - (b - a) / (b - c)), d, e);
    });
}).call(this);

},{}],"aNPGb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRockNRoll", ()=>isRockNRoll
);
parcelHelpers.export(exports, "isVictory", ()=>isVictory
);
parcelHelpers.export(exports, "isFist", ()=>isFist
);
parcelHelpers.export(exports, "isStand", ()=>isStand
);
parcelHelpers.export(exports, "isStretchBack", ()=>isStretchBack
);
function distance(from, to) {
    return Math.sqrt(Math.pow(Math.abs(from.x - to.x), 2) + Math.pow(Math.abs(from.y - to.y), 2) + Math.pow(Math.abs(from.z - to.z), 2));
}
function isRockNRoll(landmark) {
    if (distance(landmark[0], landmark[8]) > distance(landmark[0], landmark[5]) && distance(landmark[0], landmark[12]) <= distance(landmark[0], landmark[9]) && distance(landmark[0], landmark[16]) <= distance(landmark[0], landmark[13]) && distance(landmark[0], landmark[20]) > distance(landmark[0], landmark[17])) return true;
    else return false;
}
function isVictory(landmark) {
    if (distance(landmark[0], landmark[8]) > distance(landmark[0], landmark[5]) && distance(landmark[0], landmark[12]) > distance(landmark[0], landmark[9]) && distance(landmark[0], landmark[16]) <= distance(landmark[0], landmark[13]) && distance(landmark[0], landmark[20]) <= distance(landmark[0], landmark[17])) return true;
    else return false;
}
function isFist(landmark) {
    if (distance(landmark[0], landmark[8]) <= distance(landmark[0], landmark[5]) && distance(landmark[0], landmark[12]) <= distance(landmark[0], landmark[9]) && distance(landmark[0], landmark[16]) <= distance(landmark[0], landmark[13]) && distance(landmark[0], landmark[20]) <= distance(landmark[0], landmark[17])) return true;
    else if (landmark[5].y <= landmark[8].y && landmark[8].y <= landmark[6].y) return true;
    else return false;
}
function isStand(landmark) {
    // 평범하게 손을 들고 있는 상태 트리거
    let ret = true;
    if (landmark[7].y < landmark[8].y || landmark[11].y < landmark[12].y || landmark[15].y < landmark[16].y || landmark[19].y < landmark[20].y) ret = false;
    return ret;
}
function isStretchBack(landmark) {
    // 농구공을 들듯 손을 당기는 제스쳐
    let ret = false;
    // console.log(
    //   Math.floor(landmark[0].z * 10000) - Math.floor(landmark[9].z * 10000)
    // );
    if (Math.floor(landmark[0].z * 10000) - Math.floor(landmark[9].z * 10000) < -100) ret = true;
    return ret;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"ciiiV"}],"ciiiV":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"708wo":[function() {},{}],"l8ZtM":[function(require,module,exports) {
var global = arguments[3];
/*!
 * matter-js 0.18.0 by @liabru
 * http://brm.io/matter-js/
 * License MIT
 * 
 * The MIT License (MIT)
 * 
 * Copyright (c) Liam Brummitt and contributors.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();
    else if (typeof define === 'function' && define.amd) define("Matter", [], factory);
    else if (typeof exports === 'object') exports["Matter"] = factory();
    else root["Matter"] = factory();
})(this, function() {
    return(/******/ (function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {
        };
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {
                }
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        /******/ };
        /******/ /******/ // define __esModule on exports
        /******/ __webpack_require__.r = function(exports) {
            /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                value: 'Module'
            });
            /******/ Object.defineProperty(exports, '__esModule', {
                value: true
            });
        /******/ };
        /******/ /******/ // create a fake namespace object
        /******/ // mode & 1: value is a module id, require it
        /******/ // mode & 2: merge all properties of value into the ns
        /******/ // mode & 4: return value when already ns object
        /******/ // mode & 8|1: behave like require
        /******/ __webpack_require__.t = function(value, mode) {
            /******/ if (mode & 1) value = __webpack_require__(value);
            /******/ if (mode & 8) return value;
            /******/ if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
            /******/ var ns = Object.create(null);
            /******/ __webpack_require__.r(ns);
            /******/ Object.defineProperty(ns, 'default', {
                enumerable: true,
                value: value
            });
            /******/ if (mode & 2 && typeof value != 'string') for(var key in value)__webpack_require__.d(ns, key, (function(key) {
                return value[key];
            }).bind(null, key));
            /******/ return ns;
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module) {
            /******/ var getter = module && module.__esModule ? /******/ function getDefault() {
                return module['default'];
            } : /******/ function getModuleExports() {
                return module;
            };
            /******/ __webpack_require__.d(getter, 'a', getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 21);
    /******/ })([
        function(module, exports) {
            /**
* The `Matter.Common` module contains utility functions that are common to all modules.
*
* @class Common
*/ var Common = {
            };
            module.exports = Common;
            (function() {
                Common._nextId = 0;
                Common._seed = 0;
                Common._nowStartTime = +new Date();
                Common._warnedOnce = {
                };
                Common._decomp = null;
                /**
     * Extends the object in the first argument using the object in the second argument.
     * @method extend
     * @param {} obj
     * @param {boolean} deep
     * @return {} obj extended
     */ Common.extend = function(obj, deep) {
                    var argsStart, args, deepClone;
                    if (typeof deep === 'boolean') {
                        argsStart = 2;
                        deepClone = deep;
                    } else {
                        argsStart = 1;
                        deepClone = true;
                    }
                    for(var i = argsStart; i < arguments.length; i++){
                        var source = arguments[i];
                        if (source) {
                            for(var prop in source)if (deepClone && source[prop] && source[prop].constructor === Object) {
                                if (!obj[prop] || obj[prop].constructor === Object) {
                                    obj[prop] = obj[prop] || {
                                    };
                                    Common.extend(obj[prop], deepClone, source[prop]);
                                } else obj[prop] = source[prop];
                            } else obj[prop] = source[prop];
                        }
                    }
                    return obj;
                };
                /**
     * Creates a new clone of the object, if deep is true references will also be cloned.
     * @method clone
     * @param {} obj
     * @param {bool} deep
     * @return {} obj cloned
     */ Common.clone = function(obj, deep) {
                    return Common.extend({
                    }, deep, obj);
                };
                /**
     * Returns the list of keys for the given object.
     * @method keys
     * @param {} obj
     * @return {string[]} keys
     */ Common.keys = function(obj) {
                    if (Object.keys) return Object.keys(obj);
                    // avoid hasOwnProperty for performance
                    var keys = [];
                    for(var key in obj)keys.push(key);
                    return keys;
                };
                /**
     * Returns the list of values for the given object.
     * @method values
     * @param {} obj
     * @return {array} Array of the objects property values
     */ Common.values = function(obj) {
                    var values = [];
                    if (Object.keys) {
                        var keys = Object.keys(obj);
                        for(var i = 0; i < keys.length; i++)values.push(obj[keys[i]]);
                        return values;
                    }
                    // avoid hasOwnProperty for performance
                    for(var key in obj)values.push(obj[key]);
                    return values;
                };
                /**
     * Gets a value from `base` relative to the `path` string.
     * @method get
     * @param {} obj The base object
     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'
     * @param {number} [begin] Path slice begin
     * @param {number} [end] Path slice end
     * @return {} The object at the given path
     */ Common.get = function(obj, path, begin, end) {
                    path = path.split('.').slice(begin, end);
                    for(var i = 0; i < path.length; i += 1)obj = obj[path[i]];
                    return obj;
                };
                /**
     * Sets a value on `base` relative to the given `path` string.
     * @method set
     * @param {} obj The base object
     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'
     * @param {} val The value to set
     * @param {number} [begin] Path slice begin
     * @param {number} [end] Path slice end
     * @return {} Pass through `val` for chaining
     */ Common.set = function(obj, path, val, begin, end) {
                    var parts = path.split('.').slice(begin, end);
                    Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;
                    return val;
                };
                /**
     * Shuffles the given array in-place.
     * The function uses a seeded random generator.
     * @method shuffle
     * @param {array} array
     * @return {array} array shuffled randomly
     */ Common.shuffle = function(array) {
                    for(var i = array.length - 1; i > 0; i--){
                        var j = Math.floor(Common.random() * (i + 1));
                        var temp = array[i];
                        array[i] = array[j];
                        array[j] = temp;
                    }
                    return array;
                };
                /**
     * Randomly chooses a value from a list with equal probability.
     * The function uses a seeded random generator.
     * @method choose
     * @param {array} choices
     * @return {object} A random choice object from the array
     */ Common.choose = function(choices) {
                    return choices[Math.floor(Common.random() * choices.length)];
                };
                /**
     * Returns true if the object is a HTMLElement, otherwise false.
     * @method isElement
     * @param {object} obj
     * @return {boolean} True if the object is a HTMLElement, otherwise false
     */ Common.isElement = function(obj) {
                    if (typeof HTMLElement !== 'undefined') return obj instanceof HTMLElement;
                    return !!(obj && obj.nodeType && obj.nodeName);
                };
                /**
     * Returns true if the object is an array.
     * @method isArray
     * @param {object} obj
     * @return {boolean} True if the object is an array, otherwise false
     */ Common.isArray = function(obj) {
                    return Object.prototype.toString.call(obj) === '[object Array]';
                };
                /**
     * Returns true if the object is a function.
     * @method isFunction
     * @param {object} obj
     * @return {boolean} True if the object is a function, otherwise false
     */ Common.isFunction = function(obj) {
                    return typeof obj === "function";
                };
                /**
     * Returns true if the object is a plain object.
     * @method isPlainObject
     * @param {object} obj
     * @return {boolean} True if the object is a plain object, otherwise false
     */ Common.isPlainObject = function(obj) {
                    return typeof obj === 'object' && obj.constructor === Object;
                };
                /**
     * Returns true if the object is a string.
     * @method isString
     * @param {object} obj
     * @return {boolean} True if the object is a string, otherwise false
     */ Common.isString = function(obj) {
                    return toString.call(obj) === '[object String]';
                };
                /**
     * Returns the given value clamped between a minimum and maximum value.
     * @method clamp
     * @param {number} value
     * @param {number} min
     * @param {number} max
     * @return {number} The value clamped between min and max inclusive
     */ Common.clamp = function(value, min, max) {
                    if (value < min) return min;
                    if (value > max) return max;
                    return value;
                };
                /**
     * Returns the sign of the given value.
     * @method sign
     * @param {number} value
     * @return {number} -1 if negative, +1 if 0 or positive
     */ Common.sign = function(value) {
                    return value < 0 ? -1 : 1;
                };
                /**
     * Returns the current timestamp since the time origin (e.g. from page load).
     * The result is in milliseconds and will use high-resolution timing if available.
     * @method now
     * @return {number} the current timestamp in milliseconds
     */ Common.now = function() {
                    if (typeof window !== 'undefined' && window.performance) {
                        if (window.performance.now) return window.performance.now();
                        else if (window.performance.webkitNow) return window.performance.webkitNow();
                    }
                    if (Date.now) return Date.now();
                    return new Date() - Common._nowStartTime;
                };
                /**
     * Returns a random value between a minimum and a maximum value inclusive.
     * The function uses a seeded random generator.
     * @method random
     * @param {number} min
     * @param {number} max
     * @return {number} A random number between min and max inclusive
     */ Common.random = function(min, max) {
                    min = typeof min !== "undefined" ? min : 0;
                    max = typeof max !== "undefined" ? max : 1;
                    return min + _seededRandom() * (max - min);
                };
                var _seededRandom = function() {
                    // https://en.wikipedia.org/wiki/Linear_congruential_generator
                    Common._seed = (Common._seed * 9301 + 49297) % 233280;
                    return Common._seed / 233280;
                };
                /**
     * Converts a CSS hex colour string into an integer.
     * @method colorToNumber
     * @param {string} colorString
     * @return {number} An integer representing the CSS hex string
     */ Common.colorToNumber = function(colorString) {
                    colorString = colorString.replace('#', '');
                    if (colorString.length == 3) colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);
                    return parseInt(colorString, 16);
                };
                /**
     * The console logging level to use, where each level includes all levels above and excludes the levels below.
     * The default level is 'debug' which shows all console messages.  
     *
     * Possible level values are:
     * - 0 = None
     * - 1 = Debug
     * - 2 = Info
     * - 3 = Warn
     * - 4 = Error
     * @property Common.logLevel
     * @type {Number}
     * @default 1
     */ Common.logLevel = 1;
                /**
     * Shows a `console.log` message only if the current `Common.logLevel` allows it.
     * The message will be prefixed with 'matter-js' to make it easily identifiable.
     * @method log
     * @param ...objs {} The objects to log.
     */ Common.log = function() {
                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) console.log.apply(console, [
                        'matter-js:'
                    ].concat(Array.prototype.slice.call(arguments)));
                };
                /**
     * Shows a `console.info` message only if the current `Common.logLevel` allows it.
     * The message will be prefixed with 'matter-js' to make it easily identifiable.
     * @method info
     * @param ...objs {} The objects to log.
     */ Common.info = function() {
                    if (console && Common.logLevel > 0 && Common.logLevel <= 2) console.info.apply(console, [
                        'matter-js:'
                    ].concat(Array.prototype.slice.call(arguments)));
                };
                /**
     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.
     * The message will be prefixed with 'matter-js' to make it easily identifiable.
     * @method warn
     * @param ...objs {} The objects to log.
     */ Common.warn = function() {
                    if (console && Common.logLevel > 0 && Common.logLevel <= 3) console.warn.apply(console, [
                        'matter-js:'
                    ].concat(Array.prototype.slice.call(arguments)));
                };
                /**
     * Uses `Common.warn` to log the given message one time only.
     * @method warnOnce
     * @param ...objs {} The objects to log.
     */ Common.warnOnce = function() {
                    var message = Array.prototype.slice.call(arguments).join(' ');
                    if (!Common._warnedOnce[message]) {
                        Common.warn(message);
                        Common._warnedOnce[message] = true;
                    }
                };
                /**
     * Shows a deprecated console warning when the function on the given object is called.
     * The target function will be replaced with a new function that first shows the warning
     * and then calls the original function.
     * @method deprecated
     * @param {object} obj The object or module
     * @param {string} name The property name of the function on obj
     * @param {string} warning The one-time message to show if the function is called
     */ Common.deprecated = function(obj, prop, warning) {
                    obj[prop] = Common.chain(function() {
                        Common.warnOnce('🔅 deprecated 🔅', warning);
                    }, obj[prop]);
                };
                /**
     * Returns the next unique sequential ID.
     * @method nextId
     * @return {Number} Unique sequential ID
     */ Common.nextId = function() {
                    return Common._nextId++;
                };
                /**
     * A cross browser compatible indexOf implementation.
     * @method indexOf
     * @param {array} haystack
     * @param {object} needle
     * @return {number} The position of needle in haystack, otherwise -1.
     */ Common.indexOf = function(haystack, needle) {
                    if (haystack.indexOf) return haystack.indexOf(needle);
                    for(var i = 0; i < haystack.length; i++){
                        if (haystack[i] === needle) return i;
                    }
                    return -1;
                };
                /**
     * A cross browser compatible array map implementation.
     * @method map
     * @param {array} list
     * @param {function} func
     * @return {array} Values from list transformed by func.
     */ Common.map = function(list, func) {
                    if (list.map) return list.map(func);
                    var mapped = [];
                    for(var i = 0; i < list.length; i += 1)mapped.push(func(list[i]));
                    return mapped;
                };
                /**
     * Takes a directed graph and returns the partially ordered set of vertices in topological order.
     * Circular dependencies are allowed.
     * @method topologicalSort
     * @param {object} graph
     * @return {array} Partially ordered set of vertices in topological order.
     */ Common.topologicalSort = function(graph) {
                    // https://github.com/mgechev/javascript-algorithms
                    // Copyright (c) Minko Gechev (MIT license)
                    // Modifications: tidy formatting and naming
                    var result = [], visited = [], temp = [];
                    for(var node in graph)if (!visited[node] && !temp[node]) Common._topologicalSort(node, visited, temp, graph, result);
                    return result;
                };
                Common._topologicalSort = function(node, visited, temp, graph, result) {
                    var neighbors = graph[node] || [];
                    temp[node] = true;
                    for(var i = 0; i < neighbors.length; i += 1){
                        var neighbor = neighbors[i];
                        if (temp[neighbor]) continue;
                        if (!visited[neighbor]) Common._topologicalSort(neighbor, visited, temp, graph, result);
                    }
                    temp[node] = false;
                    visited[node] = true;
                    result.push(node);
                };
                /**
     * Takes _n_ functions as arguments and returns a new function that calls them in order.
     * The arguments applied when calling the new function will also be applied to every function passed.
     * The value of `this` refers to the last value returned in the chain that was not `undefined`.
     * Therefore if a passed function does not return a value, the previously returned value is maintained.
     * After all passed functions have been called the new function returns the last returned value (if any).
     * If any of the passed functions are a chain, then the chain will be flattened.
     * @method chain
     * @param ...funcs {function} The functions to chain.
     * @return {function} A new function that calls the passed functions in order.
     */ Common.chain = function() {
                    var funcs = [];
                    for(var i1 = 0; i1 < arguments.length; i1 += 1){
                        var func = arguments[i1];
                        if (func._chained) // flatten already chained functions
                        funcs.push.apply(funcs, func._chained);
                        else funcs.push(func);
                    }
                    var chain = function() {
                        // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358
                        var lastResult, args = new Array(arguments.length);
                        for(var i = 0, l = arguments.length; i < l; i++)args[i] = arguments[i];
                        for(i = 0; i < funcs.length; i += 1){
                            var result = funcs[i].apply(lastResult, args);
                            if (typeof result !== 'undefined') lastResult = result;
                        }
                        return lastResult;
                    };
                    chain._chained = funcs;
                    return chain;
                };
                /**
     * Chains a function to excute before the original function on the given `path` relative to `base`.
     * See also docs for `Common.chain`.
     * @method chainPathBefore
     * @param {} base The base object
     * @param {string} path The path relative to `base`
     * @param {function} func The function to chain before the original
     * @return {function} The chained function that replaced the original
     */ Common.chainPathBefore = function(base, path, func) {
                    return Common.set(base, path, Common.chain(func, Common.get(base, path)));
                };
                /**
     * Chains a function to excute after the original function on the given `path` relative to `base`.
     * See also docs for `Common.chain`.
     * @method chainPathAfter
     * @param {} base The base object
     * @param {string} path The path relative to `base`
     * @param {function} func The function to chain after the original
     * @return {function} The chained function that replaced the original
     */ Common.chainPathAfter = function(base, path, func) {
                    return Common.set(base, path, Common.chain(Common.get(base, path), func));
                };
                /**
     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable
     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.
     * @method setDecomp
     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.
     */ Common.setDecomp = function(decomp) {
                    Common._decomp = decomp;
                };
                /**
     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,
     * otherwise returns the global `decomp` if set.
     * @method getDecomp
     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.
     */ Common.getDecomp = function() {
                    // get user provided decomp if set
                    var decomp = Common._decomp;
                    try {
                        // otherwise from window global
                        if (!decomp && typeof window !== 'undefined') decomp = window.decomp;
                        // otherwise from node global
                        if (!decomp && typeof global !== 'undefined') decomp = global.decomp;
                    } catch (e) {
                        // decomp not available
                        decomp = null;
                    }
                    return decomp;
                };
            })();
        /***/ },
        function(module, exports) {
            /**
* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).
*
* @class Bounds
*/ var Bounds = {
            };
            module.exports = Bounds;
            (function() {
                /**
     * Creates a new axis-aligned bounding box (AABB) for the given vertices.
     * @method create
     * @param {vertices} vertices
     * @return {bounds} A new bounds object
     */ Bounds.create = function(vertices) {
                    var bounds = {
                        min: {
                            x: 0,
                            y: 0
                        },
                        max: {
                            x: 0,
                            y: 0
                        }
                    };
                    if (vertices) Bounds.update(bounds, vertices);
                    return bounds;
                };
                /**
     * Updates bounds using the given vertices and extends the bounds given a velocity.
     * @method update
     * @param {bounds} bounds
     * @param {vertices} vertices
     * @param {vector} velocity
     */ Bounds.update = function(bounds, vertices, velocity) {
                    bounds.min.x = Infinity;
                    bounds.max.x = -Infinity;
                    bounds.min.y = Infinity;
                    bounds.max.y = -Infinity;
                    for(var i = 0; i < vertices.length; i++){
                        var vertex = vertices[i];
                        if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;
                        if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;
                        if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;
                        if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;
                    }
                    if (velocity) {
                        if (velocity.x > 0) bounds.max.x += velocity.x;
                        else bounds.min.x += velocity.x;
                        if (velocity.y > 0) bounds.max.y += velocity.y;
                        else bounds.min.y += velocity.y;
                    }
                };
                /**
     * Returns true if the bounds contains the given point.
     * @method contains
     * @param {bounds} bounds
     * @param {vector} point
     * @return {boolean} True if the bounds contain the point, otherwise false
     */ Bounds.contains = function(bounds, point) {
                    return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;
                };
                /**
     * Returns true if the two bounds intersect.
     * @method overlaps
     * @param {bounds} boundsA
     * @param {bounds} boundsB
     * @return {boolean} True if the bounds overlap, otherwise false
     */ Bounds.overlaps = function(boundsA, boundsB) {
                    return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;
                };
                /**
     * Translates the bounds by the given vector.
     * @method translate
     * @param {bounds} bounds
     * @param {vector} vector
     */ Bounds.translate = function(bounds, vector) {
                    bounds.min.x += vector.x;
                    bounds.max.x += vector.x;
                    bounds.min.y += vector.y;
                    bounds.max.y += vector.y;
                };
                /**
     * Shifts the bounds to the given position.
     * @method shift
     * @param {bounds} bounds
     * @param {vector} position
     */ Bounds.shift = function(bounds, position) {
                    var deltaX = bounds.max.x - bounds.min.x, deltaY = bounds.max.y - bounds.min.y;
                    bounds.min.x = position.x;
                    bounds.max.x = position.x + deltaX;
                    bounds.min.y = position.y;
                    bounds.max.y = position.y + deltaY;
                };
            })();
        /***/ },
        function(module, exports) {
            /**
* The `Matter.Vector` module contains methods for creating and manipulating vectors.
* Vectors are the basis of all the geometry related operations in the engine.
* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Vector
*/ // TODO: consider params for reusing vector objects
            var Vector = {
            };
            module.exports = Vector;
            (function() {
                /**
     * Creates a new vector.
     * @method create
     * @param {number} x
     * @param {number} y
     * @return {vector} A new vector
     */ Vector.create = function(x, y) {
                    return {
                        x: x || 0,
                        y: y || 0
                    };
                };
                /**
     * Returns a new vector with `x` and `y` copied from the given `vector`.
     * @method clone
     * @param {vector} vector
     * @return {vector} A new cloned vector
     */ Vector.clone = function(vector) {
                    return {
                        x: vector.x,
                        y: vector.y
                    };
                };
                /**
     * Returns the magnitude (length) of a vector.
     * @method magnitude
     * @param {vector} vector
     * @return {number} The magnitude of the vector
     */ Vector.magnitude = function(vector) {
                    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
                };
                /**
     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).
     * @method magnitudeSquared
     * @param {vector} vector
     * @return {number} The squared magnitude of the vector
     */ Vector.magnitudeSquared = function(vector) {
                    return vector.x * vector.x + vector.y * vector.y;
                };
                /**
     * Rotates the vector about (0, 0) by specified angle.
     * @method rotate
     * @param {vector} vector
     * @param {number} angle
     * @param {vector} [output]
     * @return {vector} The vector rotated about (0, 0)
     */ Vector.rotate = function(vector, angle, output) {
                    var cos = Math.cos(angle), sin = Math.sin(angle);
                    if (!output) output = {
                    };
                    var x = vector.x * cos - vector.y * sin;
                    output.y = vector.x * sin + vector.y * cos;
                    output.x = x;
                    return output;
                };
                /**
     * Rotates the vector about a specified point by specified angle.
     * @method rotateAbout
     * @param {vector} vector
     * @param {number} angle
     * @param {vector} point
     * @param {vector} [output]
     * @return {vector} A new vector rotated about the point
     */ Vector.rotateAbout = function(vector, angle, point, output) {
                    var cos = Math.cos(angle), sin = Math.sin(angle);
                    if (!output) output = {
                    };
                    var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);
                    output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);
                    output.x = x;
                    return output;
                };
                /**
     * Normalises a vector (such that its magnitude is `1`).
     * @method normalise
     * @param {vector} vector
     * @return {vector} A new vector normalised
     */ Vector.normalise = function(vector) {
                    var magnitude = Vector.magnitude(vector);
                    if (magnitude === 0) return {
                        x: 0,
                        y: 0
                    };
                    return {
                        x: vector.x / magnitude,
                        y: vector.y / magnitude
                    };
                };
                /**
     * Returns the dot-product of two vectors.
     * @method dot
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @return {number} The dot product of the two vectors
     */ Vector.dot = function(vectorA, vectorB) {
                    return vectorA.x * vectorB.x + vectorA.y * vectorB.y;
                };
                /**
     * Returns the cross-product of two vectors.
     * @method cross
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @return {number} The cross product of the two vectors
     */ Vector.cross = function(vectorA, vectorB) {
                    return vectorA.x * vectorB.y - vectorA.y * vectorB.x;
                };
                /**
     * Returns the cross-product of three vectors.
     * @method cross3
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @param {vector} vectorC
     * @return {number} The cross product of the three vectors
     */ Vector.cross3 = function(vectorA, vectorB, vectorC) {
                    return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);
                };
                /**
     * Adds the two vectors.
     * @method add
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @param {vector} [output]
     * @return {vector} A new vector of vectorA and vectorB added
     */ Vector.add = function(vectorA, vectorB, output) {
                    if (!output) output = {
                    };
                    output.x = vectorA.x + vectorB.x;
                    output.y = vectorA.y + vectorB.y;
                    return output;
                };
                /**
     * Subtracts the two vectors.
     * @method sub
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @param {vector} [output]
     * @return {vector} A new vector of vectorA and vectorB subtracted
     */ Vector.sub = function(vectorA, vectorB, output) {
                    if (!output) output = {
                    };
                    output.x = vectorA.x - vectorB.x;
                    output.y = vectorA.y - vectorB.y;
                    return output;
                };
                /**
     * Multiplies a vector and a scalar.
     * @method mult
     * @param {vector} vector
     * @param {number} scalar
     * @return {vector} A new vector multiplied by scalar
     */ Vector.mult = function(vector, scalar) {
                    return {
                        x: vector.x * scalar,
                        y: vector.y * scalar
                    };
                };
                /**
     * Divides a vector and a scalar.
     * @method div
     * @param {vector} vector
     * @param {number} scalar
     * @return {vector} A new vector divided by scalar
     */ Vector.div = function(vector, scalar) {
                    return {
                        x: vector.x / scalar,
                        y: vector.y / scalar
                    };
                };
                /**
     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.
     * @method perp
     * @param {vector} vector
     * @param {bool} [negate=false]
     * @return {vector} The perpendicular vector
     */ Vector.perp = function(vector, negate) {
                    negate = negate === true ? -1 : 1;
                    return {
                        x: negate * -vector.y,
                        y: negate * vector.x
                    };
                };
                /**
     * Negates both components of a vector such that it points in the opposite direction.
     * @method neg
     * @param {vector} vector
     * @return {vector} The negated vector
     */ Vector.neg = function(vector) {
                    return {
                        x: -vector.x,
                        y: -vector.y
                    };
                };
                /**
     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.
     * @method angle
     * @param {vector} vectorA
     * @param {vector} vectorB
     * @return {number} The angle in radians
     */ Vector.angle = function(vectorA, vectorB) {
                    return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);
                };
                /**
     * Temporary vector pool (not thread-safe).
     * @property _temp
     * @type {vector[]}
     * @private
     */ Vector._temp = [
                    Vector.create(),
                    Vector.create(),
                    Vector.create(),
                    Vector.create(),
                    Vector.create(),
                    Vector.create()
                ];
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.
* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.
* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Vertices
*/ var Vertices = {
            };
            module.exports = Vertices;
            var Vector = __webpack_require__(2);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Creates a new set of `Matter.Body` compatible vertices.
     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:
     *
     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]
     *
     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,
     * but with some additional references required for efficient collision detection routines.
     *
     * Vertices must be specified in clockwise order.
     *
     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.
     *
     * @method create
     * @param {vector[]} points
     * @param {body} body
     */ Vertices.create = function(points, body) {
                    var vertices = [];
                    for(var i = 0; i < points.length; i++){
                        var point = points[i], vertex = {
                            x: point.x,
                            y: point.y,
                            index: i,
                            body: body,
                            isInternal: false
                        };
                        vertices.push(vertex);
                    }
                    return vertices;
                };
                /**
     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), 
     * into a `Matter.Vertices` object for the given `Matter.Body`.
     * For parsing SVG paths, see `Svg.pathToVertices`.
     * @method fromPath
     * @param {string} path
     * @param {body} body
     * @return {vertices} vertices
     */ Vertices.fromPath = function(path, body) {
                    var pathPattern = /L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/ig, points = [];
                    path.replace(pathPattern, function(match, x, y) {
                        points.push({
                            x: parseFloat(x),
                            y: parseFloat(y)
                        });
                    });
                    return Vertices.create(points, body);
                };
                /**
     * Returns the centre (centroid) of the set of vertices.
     * @method centre
     * @param {vertices} vertices
     * @return {vector} The centre point
     */ Vertices.centre = function(vertices) {
                    var area = Vertices.area(vertices, true), centre = {
                        x: 0,
                        y: 0
                    }, cross, temp, j;
                    for(var i = 0; i < vertices.length; i++){
                        j = (i + 1) % vertices.length;
                        cross = Vector.cross(vertices[i], vertices[j]);
                        temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);
                        centre = Vector.add(centre, temp);
                    }
                    return Vector.div(centre, 6 * area);
                };
                /**
     * Returns the average (mean) of the set of vertices.
     * @method mean
     * @param {vertices} vertices
     * @return {vector} The average point
     */ Vertices.mean = function(vertices) {
                    var average = {
                        x: 0,
                        y: 0
                    };
                    for(var i = 0; i < vertices.length; i++){
                        average.x += vertices[i].x;
                        average.y += vertices[i].y;
                    }
                    return Vector.div(average, vertices.length);
                };
                /**
     * Returns the area of the set of vertices.
     * @method area
     * @param {vertices} vertices
     * @param {bool} signed
     * @return {number} The area
     */ Vertices.area = function(vertices, signed) {
                    var area = 0, j = vertices.length - 1;
                    for(var i = 0; i < vertices.length; i++){
                        area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);
                        j = i;
                    }
                    if (signed) return area / 2;
                    return Math.abs(area) / 2;
                };
                /**
     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.
     * @method inertia
     * @param {vertices} vertices
     * @param {number} mass
     * @return {number} The polygon's moment of inertia
     */ Vertices.inertia = function(vertices, mass) {
                    var numerator = 0, denominator = 0, v = vertices, cross, j;
                    // find the polygon's moment of inertia, using second moment of area
                    // from equations at http://www.physicsforums.com/showthread.php?t=25293
                    for(var n = 0; n < v.length; n++){
                        j = (n + 1) % v.length;
                        cross = Math.abs(Vector.cross(v[j], v[n]));
                        numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));
                        denominator += cross;
                    }
                    return mass / 6 * (numerator / denominator);
                };
                /**
     * Translates the set of vertices in-place.
     * @method translate
     * @param {vertices} vertices
     * @param {vector} vector
     * @param {number} scalar
     */ Vertices.translate = function(vertices, vector, scalar) {
                    scalar = typeof scalar !== 'undefined' ? scalar : 1;
                    var verticesLength = vertices.length, translateX = vector.x * scalar, translateY = vector.y * scalar, i;
                    for(i = 0; i < verticesLength; i++){
                        vertices[i].x += translateX;
                        vertices[i].y += translateY;
                    }
                    return vertices;
                };
                /**
     * Rotates the set of vertices in-place.
     * @method rotate
     * @param {vertices} vertices
     * @param {number} angle
     * @param {vector} point
     */ Vertices.rotate = function(vertices, angle, point) {
                    if (angle === 0) return;
                    var cos = Math.cos(angle), sin = Math.sin(angle), pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex, dx, dy, i;
                    for(i = 0; i < verticesLength; i++){
                        vertex = vertices[i];
                        dx = vertex.x - pointX;
                        dy = vertex.y - pointY;
                        vertex.x = pointX + (dx * cos - dy * sin);
                        vertex.y = pointY + (dx * sin + dy * cos);
                    }
                    return vertices;
                };
                /**
     * Returns `true` if the `point` is inside the set of `vertices`.
     * @method contains
     * @param {vertices} vertices
     * @param {vector} point
     * @return {boolean} True if the vertices contains point, otherwise false
     */ Vertices.contains = function(vertices, point) {
                    var pointX = point.x, pointY = point.y, verticesLength = vertices.length, vertex = vertices[verticesLength - 1], nextVertex;
                    for(var i = 0; i < verticesLength; i++){
                        nextVertex = vertices[i];
                        if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) return false;
                        vertex = nextVertex;
                    }
                    return true;
                };
                /**
     * Scales the vertices from a point (default is centre) in-place.
     * @method scale
     * @param {vertices} vertices
     * @param {number} scaleX
     * @param {number} scaleY
     * @param {vector} point
     */ Vertices.scale = function(vertices, scaleX, scaleY, point) {
                    if (scaleX === 1 && scaleY === 1) return vertices;
                    point = point || Vertices.centre(vertices);
                    var vertex, delta;
                    for(var i = 0; i < vertices.length; i++){
                        vertex = vertices[i];
                        delta = Vector.sub(vertex, point);
                        vertices[i].x = point.x + delta.x * scaleX;
                        vertices[i].y = point.y + delta.y * scaleY;
                    }
                    return vertices;
                };
                /**
     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.
     * The radius parameter is a single number or an array to specify the radius for each vertex.
     * @method chamfer
     * @param {vertices} vertices
     * @param {number[]} radius
     * @param {number} quality
     * @param {number} qualityMin
     * @param {number} qualityMax
     */ Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {
                    if (typeof radius === 'number') radius = [
                        radius
                    ];
                    else radius = radius || [
                        8
                    ];
                    // quality defaults to -1, which is auto
                    quality = typeof quality !== 'undefined' ? quality : -1;
                    qualityMin = qualityMin || 2;
                    qualityMax = qualityMax || 14;
                    var newVertices = [];
                    for(var i = 0; i < vertices.length; i++){
                        var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1], vertex = vertices[i], nextVertex = vertices[(i + 1) % vertices.length], currentRadius = radius[i < radius.length ? i : radius.length - 1];
                        if (currentRadius === 0) {
                            newVertices.push(vertex);
                            continue;
                        }
                        var prevNormal = Vector.normalise({
                            x: vertex.y - prevVertex.y,
                            y: prevVertex.x - vertex.x
                        });
                        var nextNormal = Vector.normalise({
                            x: nextVertex.y - vertex.y,
                            y: vertex.x - nextVertex.x
                        });
                        var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)), radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius), midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)), scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));
                        var precision = quality;
                        if (quality === -1) // automatically decide precision
                        precision = Math.pow(currentRadius, 0.32) * 1.75;
                        precision = Common.clamp(precision, qualityMin, qualityMax);
                        // use an even value for precision, more likely to reduce axes by using symmetry
                        if (precision % 2 === 1) precision += 1;
                        var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)), theta = alpha / precision;
                        for(var j = 0; j < precision; j++)newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));
                    }
                    return newVertices;
                };
                /**
     * Sorts the input vertices into clockwise order in place.
     * @method clockwiseSort
     * @param {vertices} vertices
     * @return {vertices} vertices
     */ Vertices.clockwiseSort = function(vertices) {
                    var centre = Vertices.mean(vertices);
                    vertices.sort(function(vertexA, vertexB) {
                        return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);
                    });
                    return vertices;
                };
                /**
     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).
     * @method isConvex
     * @param {vertices} vertices
     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).
     */ Vertices.isConvex = function(vertices) {
                    // http://paulbourke.net/geometry/polygonmesh/
                    // Copyright (c) Paul Bourke (use permitted)
                    var flag = 0, n = vertices.length, i, j, k, z;
                    if (n < 3) return null;
                    for(i = 0; i < n; i++){
                        j = (i + 1) % n;
                        k = (i + 2) % n;
                        z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);
                        z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);
                        if (z < 0) flag |= 1;
                        else if (z > 0) flag |= 2;
                        if (flag === 3) return false;
                    }
                    if (flag !== 0) return true;
                    else return null;
                };
                /**
     * Returns the convex hull of the input vertices as a new array of points.
     * @method hull
     * @param {vertices} vertices
     * @return [vertex] vertices
     */ Vertices.hull = function(vertices) {
                    // http://geomalgorithms.com/a10-_hull-1.html
                    var upper = [], lower = [], vertex, i;
                    // sort vertices on x-axis (y-axis for ties)
                    vertices = vertices.slice(0);
                    vertices.sort(function(vertexA, vertexB) {
                        var dx = vertexA.x - vertexB.x;
                        return dx !== 0 ? dx : vertexA.y - vertexB.y;
                    });
                    // build lower hull
                    for(i = 0; i < vertices.length; i += 1){
                        vertex = vertices[i];
                        while(lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0)lower.pop();
                        lower.push(vertex);
                    }
                    // build upper hull
                    for(i = vertices.length - 1; i >= 0; i -= 1){
                        vertex = vertices[i];
                        while(upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0)upper.pop();
                        upper.push(vertex);
                    }
                    // concatenation of the lower and upper hulls gives the convex hull
                    // omit last points because they are repeated at the beginning of the other list
                    upper.pop();
                    lower.pop();
                    return upper.concat(lower);
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Events` module contains methods to fire and listen to events on other objects.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Events
*/ var Events = {
            };
            module.exports = Events;
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Subscribes a callback function to the given object's `eventName`.
     * @method on
     * @param {} object
     * @param {string} eventNames
     * @param {function} callback
     */ Events.on = function(object, eventNames, callback) {
                    var names = eventNames.split(' '), name;
                    for(var i = 0; i < names.length; i++){
                        name = names[i];
                        object.events = object.events || {
                        };
                        object.events[name] = object.events[name] || [];
                        object.events[name].push(callback);
                    }
                    return callback;
                };
                /**
     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.
     * @method off
     * @param {} object
     * @param {string} eventNames
     * @param {function} callback
     */ Events.off = function(object, eventNames, callback) {
                    if (!eventNames) {
                        object.events = {
                        };
                        return;
                    }
                    // handle Events.off(object, callback)
                    if (typeof eventNames === 'function') {
                        callback = eventNames;
                        eventNames = Common.keys(object.events).join(' ');
                    }
                    var names = eventNames.split(' ');
                    for(var i = 0; i < names.length; i++){
                        var callbacks = object.events[names[i]], newCallbacks = [];
                        if (callback && callbacks) {
                            for(var j = 0; j < callbacks.length; j++)if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);
                        }
                        object.events[names[i]] = newCallbacks;
                    }
                };
                /**
     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.
     * @method trigger
     * @param {} object
     * @param {string} eventNames
     * @param {} event
     */ Events.trigger = function(object, eventNames, event) {
                    var names, name, callbacks, eventClone;
                    var events = object.events;
                    if (events && Common.keys(events).length > 0) {
                        if (!event) event = {
                        };
                        names = eventNames.split(' ');
                        for(var i = 0; i < names.length; i++){
                            name = names[i];
                            callbacks = events[name];
                            if (callbacks) {
                                eventClone = Common.clone(event, false);
                                eventClone.name = name;
                                eventClone.source = object;
                                for(var j = 0; j < callbacks.length; j++)callbacks[j].apply(object, [
                                    eventClone
                                ]);
                            }
                        }
                    }
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.
*
* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.
* A composite could contain anything from a single body all the way up to a whole world.
* 
* When making any changes to composites, use the included functions rather than changing their properties directly.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Composite
*/ var Composite = {
            };
            module.exports = Composite;
            var Events = __webpack_require__(4);
            var Common = __webpack_require__(0);
            var Bounds = __webpack_require__(1);
            var Body = __webpack_require__(6);
            (function() {
                /**
     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.
     * See the properites section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {} [options]
     * @return {composite} A new composite
     */ Composite.create = function(options) {
                    return Common.extend({
                        id: Common.nextId(),
                        type: 'composite',
                        parent: null,
                        isModified: false,
                        bodies: [],
                        constraints: [],
                        composites: [],
                        label: 'Composite',
                        plugin: {
                        },
                        cache: {
                            allBodies: null,
                            allConstraints: null,
                            allComposites: null
                        }
                    }, options);
                };
                /**
     * Sets the composite's `isModified` flag. 
     * If `updateParents` is true, all parents will be set (default: false).
     * If `updateChildren` is true, all children will be set (default: false).
     * @private
     * @method setModified
     * @param {composite} composite
     * @param {boolean} isModified
     * @param {boolean} [updateParents=false]
     * @param {boolean} [updateChildren=false]
     */ Composite.setModified = function(composite, isModified, updateParents, updateChildren) {
                    composite.isModified = isModified;
                    if (isModified && composite.cache) {
                        composite.cache.allBodies = null;
                        composite.cache.allConstraints = null;
                        composite.cache.allComposites = null;
                    }
                    if (updateParents && composite.parent) Composite.setModified(composite.parent, isModified, updateParents, updateChildren);
                    if (updateChildren) for(var i = 0; i < composite.composites.length; i++){
                        var childComposite = composite.composites[i];
                        Composite.setModified(childComposite, isModified, updateParents, updateChildren);
                    }
                };
                /**
     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.
     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.
     * @method add
     * @param {composite} composite
     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)
     * @return {composite} The original composite with the objects added
     */ Composite.add = function(composite, object) {
                    var objects = [].concat(object);
                    Events.trigger(composite, 'beforeAdd', {
                        object: object
                    });
                    for(var i = 0; i < objects.length; i++){
                        var obj = objects[i];
                        switch(obj.type){
                            case 'body':
                                // skip adding compound parts
                                if (obj.parent !== obj) {
                                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');
                                    break;
                                }
                                Composite.addBody(composite, obj);
                                break;
                            case 'constraint':
                                Composite.addConstraint(composite, obj);
                                break;
                            case 'composite':
                                Composite.addComposite(composite, obj);
                                break;
                            case 'mouseConstraint':
                                Composite.addConstraint(composite, obj.constraint);
                                break;
                        }
                    }
                    Events.trigger(composite, 'afterAdd', {
                        object: object
                    });
                    return composite;
                };
                /**
     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.
     * Optionally searching its children recursively.
     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.
     * @method remove
     * @param {composite} composite
     * @param {object|array} object
     * @param {boolean} [deep=false]
     * @return {composite} The original composite with the objects removed
     */ Composite.remove = function(composite, object, deep) {
                    var objects = [].concat(object);
                    Events.trigger(composite, 'beforeRemove', {
                        object: object
                    });
                    for(var i = 0; i < objects.length; i++){
                        var obj = objects[i];
                        switch(obj.type){
                            case 'body':
                                Composite.removeBody(composite, obj, deep);
                                break;
                            case 'constraint':
                                Composite.removeConstraint(composite, obj, deep);
                                break;
                            case 'composite':
                                Composite.removeComposite(composite, obj, deep);
                                break;
                            case 'mouseConstraint':
                                Composite.removeConstraint(composite, obj.constraint);
                                break;
                        }
                    }
                    Events.trigger(composite, 'afterRemove', {
                        object: object
                    });
                    return composite;
                };
                /**
     * Adds a composite to the given composite.
     * @private
     * @method addComposite
     * @param {composite} compositeA
     * @param {composite} compositeB
     * @return {composite} The original compositeA with the objects from compositeB added
     */ Composite.addComposite = function(compositeA, compositeB) {
                    compositeA.composites.push(compositeB);
                    compositeB.parent = compositeA;
                    Composite.setModified(compositeA, true, true, false);
                    return compositeA;
                };
                /**
     * Removes a composite from the given composite, and optionally searching its children recursively.
     * @private
     * @method removeComposite
     * @param {composite} compositeA
     * @param {composite} compositeB
     * @param {boolean} [deep=false]
     * @return {composite} The original compositeA with the composite removed
     */ Composite.removeComposite = function(compositeA, compositeB, deep) {
                    var position = Common.indexOf(compositeA.composites, compositeB);
                    if (position !== -1) Composite.removeCompositeAt(compositeA, position);
                    if (deep) for(var i = 0; i < compositeA.composites.length; i++)Composite.removeComposite(compositeA.composites[i], compositeB, true);
                    return compositeA;
                };
                /**
     * Removes a composite from the given composite.
     * @private
     * @method removeCompositeAt
     * @param {composite} composite
     * @param {number} position
     * @return {composite} The original composite with the composite removed
     */ Composite.removeCompositeAt = function(composite, position) {
                    composite.composites.splice(position, 1);
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Adds a body to the given composite.
     * @private
     * @method addBody
     * @param {composite} composite
     * @param {body} body
     * @return {composite} The original composite with the body added
     */ Composite.addBody = function(composite, body) {
                    composite.bodies.push(body);
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Removes a body from the given composite, and optionally searching its children recursively.
     * @private
     * @method removeBody
     * @param {composite} composite
     * @param {body} body
     * @param {boolean} [deep=false]
     * @return {composite} The original composite with the body removed
     */ Composite.removeBody = function(composite, body, deep) {
                    var position = Common.indexOf(composite.bodies, body);
                    if (position !== -1) Composite.removeBodyAt(composite, position);
                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.removeBody(composite.composites[i], body, true);
                    return composite;
                };
                /**
     * Removes a body from the given composite.
     * @private
     * @method removeBodyAt
     * @param {composite} composite
     * @param {number} position
     * @return {composite} The original composite with the body removed
     */ Composite.removeBodyAt = function(composite, position) {
                    composite.bodies.splice(position, 1);
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Adds a constraint to the given composite.
     * @private
     * @method addConstraint
     * @param {composite} composite
     * @param {constraint} constraint
     * @return {composite} The original composite with the constraint added
     */ Composite.addConstraint = function(composite, constraint) {
                    composite.constraints.push(constraint);
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Removes a constraint from the given composite, and optionally searching its children recursively.
     * @private
     * @method removeConstraint
     * @param {composite} composite
     * @param {constraint} constraint
     * @param {boolean} [deep=false]
     * @return {composite} The original composite with the constraint removed
     */ Composite.removeConstraint = function(composite, constraint, deep) {
                    var position = Common.indexOf(composite.constraints, constraint);
                    if (position !== -1) Composite.removeConstraintAt(composite, position);
                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.removeConstraint(composite.composites[i], constraint, true);
                    return composite;
                };
                /**
     * Removes a body from the given composite.
     * @private
     * @method removeConstraintAt
     * @param {composite} composite
     * @param {number} position
     * @return {composite} The original composite with the constraint removed
     */ Composite.removeConstraintAt = function(composite, position) {
                    composite.constraints.splice(position, 1);
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Removes all bodies, constraints and composites from the given composite.
     * Optionally clearing its children recursively.
     * @method clear
     * @param {composite} composite
     * @param {boolean} keepStatic
     * @param {boolean} [deep=false]
     */ Composite.clear = function(composite, keepStatic, deep) {
                    if (deep) for(var i = 0; i < composite.composites.length; i++)Composite.clear(composite.composites[i], keepStatic, true);
                    if (keepStatic) composite.bodies = composite.bodies.filter(function(body) {
                        return body.isStatic;
                    });
                    else composite.bodies.length = 0;
                    composite.constraints.length = 0;
                    composite.composites.length = 0;
                    Composite.setModified(composite, true, true, false);
                    return composite;
                };
                /**
     * Returns all bodies in the given composite, including all bodies in its children, recursively.
     * @method allBodies
     * @param {composite} composite
     * @return {body[]} All the bodies
     */ Composite.allBodies = function(composite) {
                    if (composite.cache && composite.cache.allBodies) return composite.cache.allBodies;
                    var bodies = [].concat(composite.bodies);
                    for(var i = 0; i < composite.composites.length; i++)bodies = bodies.concat(Composite.allBodies(composite.composites[i]));
                    if (composite.cache) composite.cache.allBodies = bodies;
                    return bodies;
                };
                /**
     * Returns all constraints in the given composite, including all constraints in its children, recursively.
     * @method allConstraints
     * @param {composite} composite
     * @return {constraint[]} All the constraints
     */ Composite.allConstraints = function(composite) {
                    if (composite.cache && composite.cache.allConstraints) return composite.cache.allConstraints;
                    var constraints = [].concat(composite.constraints);
                    for(var i = 0; i < composite.composites.length; i++)constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));
                    if (composite.cache) composite.cache.allConstraints = constraints;
                    return constraints;
                };
                /**
     * Returns all composites in the given composite, including all composites in its children, recursively.
     * @method allComposites
     * @param {composite} composite
     * @return {composite[]} All the composites
     */ Composite.allComposites = function(composite) {
                    if (composite.cache && composite.cache.allComposites) return composite.cache.allComposites;
                    var composites = [].concat(composite.composites);
                    for(var i = 0; i < composite.composites.length; i++)composites = composites.concat(Composite.allComposites(composite.composites[i]));
                    if (composite.cache) composite.cache.allComposites = composites;
                    return composites;
                };
                /**
     * Searches the composite recursively for an object matching the type and id supplied, null if not found.
     * @method get
     * @param {composite} composite
     * @param {number} id
     * @param {string} type
     * @return {object} The requested object, if found
     */ Composite.get = function(composite, id, type) {
                    var objects, object1;
                    switch(type){
                        case 'body':
                            objects = Composite.allBodies(composite);
                            break;
                        case 'constraint':
                            objects = Composite.allConstraints(composite);
                            break;
                        case 'composite':
                            objects = Composite.allComposites(composite).concat(composite);
                            break;
                    }
                    if (!objects) return null;
                    object1 = objects.filter(function(object) {
                        return object.id.toString() === id.toString();
                    });
                    return object1.length === 0 ? null : object1[0];
                };
                /**
     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).
     * @method move
     * @param {compositeA} compositeA
     * @param {object[]} objects
     * @param {compositeB} compositeB
     * @return {composite} Returns compositeA
     */ Composite.move = function(compositeA, objects, compositeB) {
                    Composite.remove(compositeA, objects);
                    Composite.add(compositeB, objects);
                    return compositeA;
                };
                /**
     * Assigns new ids for all objects in the composite, recursively.
     * @method rebase
     * @param {composite} composite
     * @return {composite} Returns composite
     */ Composite.rebase = function(composite) {
                    var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));
                    for(var i = 0; i < objects.length; i++)objects[i].id = Common.nextId();
                    return composite;
                };
                /**
     * Translates all children in the composite by a given vector relative to their current positions, 
     * without imparting any velocity.
     * @method translate
     * @param {composite} composite
     * @param {vector} translation
     * @param {bool} [recursive=true]
     */ Composite.translate = function(composite, translation, recursive) {
                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                    for(var i = 0; i < bodies.length; i++)Body.translate(bodies[i], translation);
                    return composite;
                };
                /**
     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.
     * @method rotate
     * @param {composite} composite
     * @param {number} rotation
     * @param {vector} point
     * @param {bool} [recursive=true]
     */ Composite.rotate = function(composite, rotation, point, recursive) {
                    var cos = Math.cos(rotation), sin = Math.sin(rotation), bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;
                        Body.setPosition(body, {
                            x: point.x + (dx * cos - dy * sin),
                            y: point.y + (dx * sin + dy * cos)
                        });
                        Body.rotate(body, rotation);
                    }
                    return composite;
                };
                /**
     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.
     * @method scale
     * @param {composite} composite
     * @param {number} scaleX
     * @param {number} scaleY
     * @param {vector} point
     * @param {bool} [recursive=true]
     */ Composite.scale = function(composite, scaleX, scaleY, point, recursive) {
                    var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i], dx = body.position.x - point.x, dy = body.position.y - point.y;
                        Body.setPosition(body, {
                            x: point.x + dx * scaleX,
                            y: point.y + dy * scaleY
                        });
                        Body.scale(body, scaleX, scaleY);
                    }
                    return composite;
                };
                /**
     * Returns the union of the bounds of all of the composite's bodies.
     * @method bounds
     * @param {composite} composite The composite.
     * @returns {bounds} The composite bounds.
     */ Composite.bounds = function(composite) {
                    var bodies = Composite.allBodies(composite), vertices = [];
                    for(var i = 0; i < bodies.length; i += 1){
                        var body = bodies[i];
                        vertices.push(body.bounds.min, body.bounds.max);
                    }
                    return Bounds.create(vertices);
                };
            /*
    *
    *  Events Documentation
    *
    */ /**
    * Fired when a call to `Composite.add` is made, before objects have been added.
    *
    * @event beforeAdd
    * @param {} event An event object
    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when a call to `Composite.add` is made, after objects have been added.
    *
    * @event afterAdd
    * @param {} event An event object
    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when a call to `Composite.remove` is made, before objects have been removed.
    *
    * @event beforeRemove
    * @param {} event An event object
    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when a call to `Composite.remove` is made, after objects have been removed.
    *
    * @event afterRemove
    * @param {} event An event object
    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.
     *
     * @property id
     * @type number
     */ /**
     * A `String` denoting the type of object.
     *
     * @property type
     * @type string
     * @default "composite"
     * @readOnly
     */ /**
     * An arbitrary `String` name to help the user identify and manage composites.
     *
     * @property label
     * @type string
     * @default "Composite"
     */ /**
     * A flag that specifies whether the composite has been modified during the current step.
     * This is automatically managed when bodies, constraints or composites are added or removed.
     *
     * @property isModified
     * @type boolean
     * @default false
     */ /**
     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.
     *
     * @property parent
     * @type composite
     * @default null
     */ /**
     * An array of `Body` that are _direct_ children of this composite.
     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.
     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.
     *
     * @property bodies
     * @type body[]
     * @default []
     */ /**
     * An array of `Constraint` that are _direct_ children of this composite.
     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.
     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.
     *
     * @property constraints
     * @type constraint[]
     * @default []
     */ /**
     * An array of `Composite` that are _direct_ children of this composite.
     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.
     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.
     *
     * @property composites
     * @type composite[]
     * @default []
     */ /**
     * An object reserved for storing plugin-specific properties.
     *
     * @property plugin
     * @type {}
     */ /**
     * An object used for storing cached results for performance reasons.
     * This is used internally only and is automatically managed.
     *
     * @private
     * @property cache
     * @type {}
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Body` module contains methods for creating and manipulating body models.
* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.
* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).

* @class Body
*/ var Body = {
            };
            module.exports = Body;
            var Vertices = __webpack_require__(3);
            var Vector = __webpack_require__(2);
            var Sleeping = __webpack_require__(7);
            var Render = __webpack_require__(16);
            var Common = __webpack_require__(0);
            var Bounds = __webpack_require__(1);
            var Axes = __webpack_require__(11);
            (function() {
                Body._inertiaScale = 4;
                Body._nextCollidingGroupId = 1;
                Body._nextNonCollidingGroupId = -1;
                Body._nextCategory = 1;
                /**
     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.
     * All properties have default values, and many are pre-calculated automatically based on other properties.
     * Vertices must be specified in clockwise order.
     * See the properties section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {} options
     * @return {body} body
     */ Body.create = function(options) {
                    var defaults = {
                        id: Common.nextId(),
                        type: 'body',
                        label: 'Body',
                        parts: [],
                        plugin: {
                        },
                        angle: 0,
                        vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),
                        position: {
                            x: 0,
                            y: 0
                        },
                        force: {
                            x: 0,
                            y: 0
                        },
                        torque: 0,
                        positionImpulse: {
                            x: 0,
                            y: 0
                        },
                        constraintImpulse: {
                            x: 0,
                            y: 0,
                            angle: 0
                        },
                        totalContacts: 0,
                        speed: 0,
                        angularSpeed: 0,
                        velocity: {
                            x: 0,
                            y: 0
                        },
                        angularVelocity: 0,
                        isSensor: false,
                        isStatic: false,
                        isSleeping: false,
                        motion: 0,
                        sleepThreshold: 60,
                        density: 0.001,
                        restitution: 0,
                        friction: 0.1,
                        frictionStatic: 0.5,
                        frictionAir: 0.01,
                        collisionFilter: {
                            category: 1,
                            mask: 4294967295,
                            group: 0
                        },
                        slop: 0.05,
                        timeScale: 1,
                        render: {
                            visible: true,
                            opacity: 1,
                            strokeStyle: null,
                            fillStyle: null,
                            lineWidth: null,
                            sprite: {
                                xScale: 1,
                                yScale: 1,
                                xOffset: 0,
                                yOffset: 0
                            }
                        },
                        events: null,
                        bounds: null,
                        chamfer: null,
                        circleRadius: 0,
                        positionPrev: null,
                        anglePrev: 0,
                        parent: null,
                        axes: null,
                        area: 0,
                        mass: 0,
                        inertia: 0,
                        _original: null
                    };
                    var body = Common.extend(defaults, options);
                    _initProperties(body, options);
                    return body;
                };
                /**
     * Returns the next unique group index for which bodies will collide.
     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.
     * See `body.collisionFilter` for more information.
     * @method nextGroup
     * @param {bool} [isNonColliding=false]
     * @return {Number} Unique group index
     */ Body.nextGroup = function(isNonColliding) {
                    if (isNonColliding) return Body._nextNonCollidingGroupId--;
                    return Body._nextCollidingGroupId++;
                };
                /**
     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).
     * There are 32 available. See `body.collisionFilter` for more information.
     * @method nextCategory
     * @return {Number} Unique category bitfield
     */ Body.nextCategory = function() {
                    Body._nextCategory = Body._nextCategory << 1;
                    return Body._nextCategory;
                };
                /**
     * Initialises body properties.
     * @method _initProperties
     * @private
     * @param {body} body
     * @param {} [options]
     */ var _initProperties = function(body, options) {
                    options = options || {
                    };
                    // init required properties (order is important)
                    Body.set(body, {
                        bounds: body.bounds || Bounds.create(body.vertices),
                        positionPrev: body.positionPrev || Vector.clone(body.position),
                        anglePrev: body.anglePrev || body.angle,
                        vertices: body.vertices,
                        parts: body.parts || [
                            body
                        ],
                        isStatic: body.isStatic,
                        isSleeping: body.isSleeping,
                        parent: body.parent || body
                    });
                    Vertices.rotate(body.vertices, body.angle, body.position);
                    Axes.rotate(body.axes, body.angle);
                    Bounds.update(body.bounds, body.vertices, body.velocity);
                    // allow options to override the automatically calculated properties
                    Body.set(body, {
                        axes: options.axes || body.axes,
                        area: options.area || body.area,
                        mass: options.mass || body.mass,
                        inertia: options.inertia || body.inertia
                    });
                    // render properties
                    var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose([
                        '#f19648',
                        '#f5d259',
                        '#f55a3c',
                        '#063e7b',
                        '#ececd1'
                    ]), defaultStrokeStyle = body.isStatic ? '#555' : '#ccc', defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;
                    body.render.fillStyle = body.render.fillStyle || defaultFillStyle;
                    body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;
                    body.render.lineWidth = body.render.lineWidth || defaultLineWidth;
                    body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);
                    body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);
                };
                /**
     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.
     * Prefer to use the actual setter functions in performance critical situations.
     * @method set
     * @param {body} body
     * @param {} settings A property name (or map of properties and values) to set on the body.
     * @param {} value The value to set if `settings` is a single property name.
     */ Body.set = function(body, settings, value) {
                    var property;
                    if (typeof settings === 'string') {
                        property = settings;
                        settings = {
                        };
                        settings[property] = value;
                    }
                    for(property in settings){
                        if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;
                        value = settings[property];
                        switch(property){
                            case 'isStatic':
                                Body.setStatic(body, value);
                                break;
                            case 'isSleeping':
                                Sleeping.set(body, value);
                                break;
                            case 'mass':
                                Body.setMass(body, value);
                                break;
                            case 'density':
                                Body.setDensity(body, value);
                                break;
                            case 'inertia':
                                Body.setInertia(body, value);
                                break;
                            case 'vertices':
                                Body.setVertices(body, value);
                                break;
                            case 'position':
                                Body.setPosition(body, value);
                                break;
                            case 'angle':
                                Body.setAngle(body, value);
                                break;
                            case 'velocity':
                                Body.setVelocity(body, value);
                                break;
                            case 'angularVelocity':
                                Body.setAngularVelocity(body, value);
                                break;
                            case 'parts':
                                Body.setParts(body, value);
                                break;
                            case 'centre':
                                Body.setCentre(body, value);
                                break;
                            default:
                                body[property] = value;
                        }
                    }
                };
                /**
     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.
     * @method setStatic
     * @param {body} body
     * @param {bool} isStatic
     */ Body.setStatic = function(body, isStatic) {
                    for(var i = 0; i < body.parts.length; i++){
                        var part = body.parts[i];
                        part.isStatic = isStatic;
                        if (isStatic) {
                            part._original = {
                                restitution: part.restitution,
                                friction: part.friction,
                                mass: part.mass,
                                inertia: part.inertia,
                                density: part.density,
                                inverseMass: part.inverseMass,
                                inverseInertia: part.inverseInertia
                            };
                            part.restitution = 0;
                            part.friction = 1;
                            part.mass = part.inertia = part.density = Infinity;
                            part.inverseMass = part.inverseInertia = 0;
                            part.positionPrev.x = part.position.x;
                            part.positionPrev.y = part.position.y;
                            part.anglePrev = part.angle;
                            part.angularVelocity = 0;
                            part.speed = 0;
                            part.angularSpeed = 0;
                            part.motion = 0;
                        } else if (part._original) {
                            part.restitution = part._original.restitution;
                            part.friction = part._original.friction;
                            part.mass = part._original.mass;
                            part.inertia = part._original.inertia;
                            part.density = part._original.density;
                            part.inverseMass = part._original.inverseMass;
                            part.inverseInertia = part._original.inverseInertia;
                            part._original = null;
                        }
                    }
                };
                /**
     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.
     * @method setMass
     * @param {body} body
     * @param {number} mass
     */ Body.setMass = function(body, mass) {
                    var moment = body.inertia / (body.mass / 6);
                    body.inertia = moment * (mass / 6);
                    body.inverseInertia = 1 / body.inertia;
                    body.mass = mass;
                    body.inverseMass = 1 / body.mass;
                    body.density = body.mass / body.area;
                };
                /**
     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.
     * @method setDensity
     * @param {body} body
     * @param {number} density
     */ Body.setDensity = function(body, density) {
                    Body.setMass(body, density * body.area);
                    body.density = density;
                };
                /**
     * Sets the moment of inertia (i.e. second moment of area) of the body. 
     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.
     * @method setInertia
     * @param {body} body
     * @param {number} inertia
     */ Body.setInertia = function(body, inertia) {
                    body.inertia = inertia;
                    body.inverseInertia = 1 / body.inertia;
                };
                /**
     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).
     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.
     * They are then automatically translated to world space based on `body.position`.
     *
     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).
     * Vertices must form a convex hull, concave hulls are not supported.
     *
     * @method setVertices
     * @param {body} body
     * @param {vector[]} vertices
     */ Body.setVertices = function(body, vertices) {
                    // change vertices
                    if (vertices[0].body === body) body.vertices = vertices;
                    else body.vertices = Vertices.create(vertices, body);
                    // update properties
                    body.axes = Axes.fromVertices(body.vertices);
                    body.area = Vertices.area(body.vertices);
                    Body.setMass(body, body.density * body.area);
                    // orient vertices around the centre of mass at origin (0, 0)
                    var centre = Vertices.centre(body.vertices);
                    Vertices.translate(body.vertices, centre, -1);
                    // update inertia while vertices are at origin (0, 0)
                    Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));
                    // update geometry
                    Vertices.translate(body.vertices, body.position);
                    Bounds.update(body.bounds, body.vertices, body.velocity);
                };
                /**
     * Sets the parts of the `body` and updates mass, inertia and centroid.
     * Each part will have its parent set to `body`.
     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`
     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.
     * @method setParts
     * @param {body} body
     * @param [body] parts
     * @param {bool} [autoHull=true]
     */ Body.setParts = function(body, parts, autoHull) {
                    var i;
                    // add all the parts, ensuring that the first part is always the parent body
                    parts = parts.slice(0);
                    body.parts.length = 0;
                    body.parts.push(body);
                    body.parent = body;
                    for(i = 0; i < parts.length; i++){
                        var part = parts[i];
                        if (part !== body) {
                            part.parent = body;
                            body.parts.push(part);
                        }
                    }
                    if (body.parts.length === 1) return;
                    autoHull = typeof autoHull !== 'undefined' ? autoHull : true;
                    // find the convex hull of all parts to set on the parent body
                    if (autoHull) {
                        var vertices = [];
                        for(i = 0; i < parts.length; i++)vertices = vertices.concat(parts[i].vertices);
                        Vertices.clockwiseSort(vertices);
                        var hull = Vertices.hull(vertices), hullCentre = Vertices.centre(hull);
                        Body.setVertices(body, hull);
                        Vertices.translate(body.vertices, hullCentre);
                    }
                    // sum the properties of all compound parts of the parent body
                    var total = Body._totalProperties(body);
                    body.area = total.area;
                    body.parent = body;
                    body.position.x = total.centre.x;
                    body.position.y = total.centre.y;
                    body.positionPrev.x = total.centre.x;
                    body.positionPrev.y = total.centre.y;
                    Body.setMass(body, total.mass);
                    Body.setInertia(body, total.inertia);
                    Body.setPosition(body, total.centre);
                };
                /**
     * Set the centre of mass of the body. 
     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.
     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.
     * This is equal to moving `body.position` but not the `body.vertices`.
     * Invalid if the `centre` falls outside the body's convex hull.
     * @method setCentre
     * @param {body} body
     * @param {vector} centre
     * @param {bool} relative
     */ Body.setCentre = function(body, centre, relative) {
                    if (!relative) {
                        body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);
                        body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);
                        body.position.x = centre.x;
                        body.position.y = centre.y;
                    } else {
                        body.positionPrev.x += centre.x;
                        body.positionPrev.y += centre.y;
                        body.position.x += centre.x;
                        body.position.y += centre.y;
                    }
                };
                /**
     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.
     * @method setPosition
     * @param {body} body
     * @param {vector} position
     */ Body.setPosition = function(body, position) {
                    var delta = Vector.sub(position, body.position);
                    body.positionPrev.x += delta.x;
                    body.positionPrev.y += delta.y;
                    for(var i = 0; i < body.parts.length; i++){
                        var part = body.parts[i];
                        part.position.x += delta.x;
                        part.position.y += delta.y;
                        Vertices.translate(part.vertices, delta);
                        Bounds.update(part.bounds, part.vertices, body.velocity);
                    }
                };
                /**
     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.
     * @method setAngle
     * @param {body} body
     * @param {number} angle
     */ Body.setAngle = function(body, angle) {
                    var delta = angle - body.angle;
                    body.anglePrev += delta;
                    for(var i = 0; i < body.parts.length; i++){
                        var part = body.parts[i];
                        part.angle += delta;
                        Vertices.rotate(part.vertices, delta, body.position);
                        Axes.rotate(part.axes, delta);
                        Bounds.update(part.bounds, part.vertices, body.velocity);
                        if (i > 0) Vector.rotateAbout(part.position, delta, body.position, part.position);
                    }
                };
                /**
     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.
     * @method setVelocity
     * @param {body} body
     * @param {vector} velocity
     */ Body.setVelocity = function(body, velocity) {
                    body.positionPrev.x = body.position.x - velocity.x;
                    body.positionPrev.y = body.position.y - velocity.y;
                    body.velocity.x = velocity.x;
                    body.velocity.y = velocity.y;
                    body.speed = Vector.magnitude(body.velocity);
                };
                /**
     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.
     * @method setAngularVelocity
     * @param {body} body
     * @param {number} velocity
     */ Body.setAngularVelocity = function(body, velocity) {
                    body.anglePrev = body.angle - velocity;
                    body.angularVelocity = velocity;
                    body.angularSpeed = Math.abs(body.angularVelocity);
                };
                /**
     * Moves a body by a given vector relative to its current position, without imparting any velocity.
     * @method translate
     * @param {body} body
     * @param {vector} translation
     */ Body.translate = function(body, translation) {
                    Body.setPosition(body, Vector.add(body.position, translation));
                };
                /**
     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.
     * @method rotate
     * @param {body} body
     * @param {number} rotation
     * @param {vector} [point]
     */ Body.rotate = function(body, rotation, point) {
                    if (!point) Body.setAngle(body, body.angle + rotation);
                    else {
                        var cos = Math.cos(rotation), sin = Math.sin(rotation), dx = body.position.x - point.x, dy = body.position.y - point.y;
                        Body.setPosition(body, {
                            x: point.x + (dx * cos - dy * sin),
                            y: point.y + (dx * sin + dy * cos)
                        });
                        Body.setAngle(body, body.angle + rotation);
                    }
                };
                /**
     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).
     * @method scale
     * @param {body} body
     * @param {number} scaleX
     * @param {number} scaleY
     * @param {vector} [point]
     */ Body.scale = function(body, scaleX, scaleY, point) {
                    var totalArea = 0, totalInertia = 0;
                    point = point || body.position;
                    for(var i = 0; i < body.parts.length; i++){
                        var part = body.parts[i];
                        // scale vertices
                        Vertices.scale(part.vertices, scaleX, scaleY, point);
                        // update properties
                        part.axes = Axes.fromVertices(part.vertices);
                        part.area = Vertices.area(part.vertices);
                        Body.setMass(part, body.density * part.area);
                        // update inertia (requires vertices to be at origin)
                        Vertices.translate(part.vertices, {
                            x: -part.position.x,
                            y: -part.position.y
                        });
                        Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));
                        Vertices.translate(part.vertices, {
                            x: part.position.x,
                            y: part.position.y
                        });
                        if (i > 0) {
                            totalArea += part.area;
                            totalInertia += part.inertia;
                        }
                        // scale position
                        part.position.x = point.x + (part.position.x - point.x) * scaleX;
                        part.position.y = point.y + (part.position.y - point.y) * scaleY;
                        // update bounds
                        Bounds.update(part.bounds, part.vertices, body.velocity);
                    }
                    // handle parent body
                    if (body.parts.length > 1) {
                        body.area = totalArea;
                        if (!body.isStatic) {
                            Body.setMass(body, body.density * totalArea);
                            Body.setInertia(body, totalInertia);
                        }
                    }
                    // handle circles
                    if (body.circleRadius) {
                        if (scaleX === scaleY) body.circleRadius *= scaleX;
                        else // body is no longer a circle
                        body.circleRadius = null;
                    }
                };
                /**
     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.
     * @method update
     * @param {body} body
     * @param {number} deltaTime
     * @param {number} timeScale
     * @param {number} correction
     */ Body.update = function(body, deltaTime, timeScale, correction) {
                    var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);
                    // from the previous step
                    var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale, velocityPrevX = body.position.x - body.positionPrev.x, velocityPrevY = body.position.y - body.positionPrev.y;
                    // update velocity with Verlet integration
                    body.velocity.x = velocityPrevX * frictionAir * correction + body.force.x / body.mass * deltaTimeSquared;
                    body.velocity.y = velocityPrevY * frictionAir * correction + body.force.y / body.mass * deltaTimeSquared;
                    body.positionPrev.x = body.position.x;
                    body.positionPrev.y = body.position.y;
                    body.position.x += body.velocity.x;
                    body.position.y += body.velocity.y;
                    // update angular velocity with Verlet integration
                    body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;
                    body.anglePrev = body.angle;
                    body.angle += body.angularVelocity;
                    // track speed and acceleration
                    body.speed = Vector.magnitude(body.velocity);
                    body.angularSpeed = Math.abs(body.angularVelocity);
                    // transform the body geometry
                    for(var i = 0; i < body.parts.length; i++){
                        var part = body.parts[i];
                        Vertices.translate(part.vertices, body.velocity);
                        if (i > 0) {
                            part.position.x += body.velocity.x;
                            part.position.y += body.velocity.y;
                        }
                        if (body.angularVelocity !== 0) {
                            Vertices.rotate(part.vertices, body.angularVelocity, body.position);
                            Axes.rotate(part.axes, body.angularVelocity);
                            if (i > 0) Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);
                        }
                        Bounds.update(part.bounds, part.vertices, body.velocity);
                    }
                };
                /**
     * Applies a force to a body from a given world-space position, including resulting torque.
     * @method applyForce
     * @param {body} body
     * @param {vector} position
     * @param {vector} force
     */ Body.applyForce = function(body, position, force) {
                    body.force.x += force.x;
                    body.force.y += force.y;
                    var offset = {
                        x: position.x - body.position.x,
                        y: position.y - body.position.y
                    };
                    body.torque += offset.x * force.y - offset.y * force.x;
                };
                /**
     * Returns the sums of the properties of all compound parts of the parent body.
     * @method _totalProperties
     * @private
     * @param {body} body
     * @return {}
     */ Body._totalProperties = function(body) {
                    // from equations at:
                    // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory
                    // http://output.to/sideway/default.asp?qno=121100087
                    var properties = {
                        mass: 0,
                        area: 0,
                        inertia: 0,
                        centre: {
                            x: 0,
                            y: 0
                        }
                    };
                    // sum the properties of all compound parts of the parent body
                    for(var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++){
                        var part = body.parts[i], mass = part.mass !== Infinity ? part.mass : 1;
                        properties.mass += mass;
                        properties.area += part.area;
                        properties.inertia += part.inertia;
                        properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));
                    }
                    properties.centre = Vector.div(properties.centre, properties.mass);
                    return properties;
                };
            /*
    *
    *  Events Documentation
    *
    */ /**
    * Fired when a body starts sleeping (where `this` is the body).
    *
    * @event sleepStart
    * @this {body} The body that has started sleeping
    * @param {} event An event object
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when a body ends sleeping (where `this` is the body).
    *
    * @event sleepEnd
    * @this {body} The body that has ended sleeping
    * @param {} event An event object
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.
     *
     * @property id
     * @type number
     */ /**
     * A `String` denoting the type of object.
     *
     * @property type
     * @type string
     * @default "body"
     * @readOnly
     */ /**
     * An arbitrary `String` name to help the user identify and manage bodies.
     *
     * @property label
     * @type string
     * @default "Body"
     */ /**
     * An array of bodies that make up this body. 
     * The first body in the array must always be a self reference to the current body instance.
     * All bodies in the `parts` array together form a single rigid compound body.
     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.
     * Parts themselves should never be added to a `World`, only the parent body should be.
     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.
     *
     * @property parts
     * @type body[]
     */ /**
     * An object reserved for storing plugin-specific properties.
     *
     * @property plugin
     * @type {}
     */ /**
     * A self reference if the body is _not_ a part of another body.
     * Otherwise this is a reference to the body that this is a part of.
     * See `body.parts`.
     *
     * @property parent
     * @type body
     */ /**
     * A `Number` specifying the angle of the body, in radians.
     *
     * @property angle
     * @type number
     * @default 0
     */ /**
     * An array of `Vector` objects that specify the convex hull of the rigid body.
     * These should be provided about the origin `(0, 0)`. E.g.
     *
     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]
     *
     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).
     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. 
     *
     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).
     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.
     *
     * @property vertices
     * @type vector[]
     */ /**
     * A `Vector` that specifies the current world-space position of the body.
     *
     * @property position
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.
     *
     * @property force
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.
     *
     * @property torque
     * @type number
     * @default 0
     */ /**
     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).
     *
     * @readOnly
     * @property speed
     * @type number
     * @default 0
     */ /**
     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).
     *
     * @readOnly
     * @property angularSpeed
     * @type number
     * @default 0
     */ /**
     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. 
     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).
     *
     * @readOnly
     * @property velocity
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. 
     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).
     *
     * @readOnly
     * @property angularVelocity
     * @type number
     * @default 0
     */ /**
     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.
     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.
     *
     * @property isStatic
     * @type boolean
     * @default false
     */ /**
     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.
     *
     * @property isSensor
     * @type boolean
     * @default false
     */ /**
     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.
     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.
     *
     * @property isSleeping
     * @type boolean
     * @default false
     */ /**
     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.
     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.
     *
     * @readOnly
     * @property motion
     * @type number
     * @default 0
     */ /**
     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).
     *
     * @property sleepThreshold
     * @type number
     * @default 60
     */ /**
     * A `Number` that defines the density of the body, that is its mass per unit area.
     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.
     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).
     *
     * @property density
     * @type number
     * @default 0.001
     */ /**
     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.
     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).
     *
     * @property mass
     * @type number
     */ /**
     * A `Number` that defines the inverse mass of the body (`1 / mass`).
     * If you modify this value, you must also modify the `body.mass` property.
     *
     * @property inverseMass
     * @type number
     */ /**
     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.
     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.
     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).
     *
     * @property inertia
     * @type number
     */ /**
     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).
     * If you modify this value, you must also modify the `body.inertia` property.
     *
     * @property inverseInertia
     * @type number
     */ /**
     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.
     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. 
     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.
     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:
     *
     *     Math.max(bodyA.restitution, bodyB.restitution)
     *
     * @property restitution
     * @type number
     * @default 0
     */ /**
     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.
     * A value of `0` means that the body may slide indefinitely.
     * A value of `1` means the body may come to a stop almost instantly after a force is applied.
     *
     * The effects of the value may be non-linear. 
     * High values may be unstable depending on the body.
     * The engine uses a Coulomb friction model including static and kinetic friction.
     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:
     *
     *     Math.min(bodyA.friction, bodyB.friction)
     *
     * @property friction
     * @type number
     * @default 0.1
     */ /**
     * A `Number` that defines the static friction of the body (in the Coulomb friction model). 
     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.
     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.
     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.
     *
     * @property frictionStatic
     * @type number
     * @default 0.5
     */ /**
     * A `Number` that defines the air friction of the body (air resistance). 
     * A value of `0` means the body will never slow as it moves through space.
     * The higher the value, the faster a body slows when moving through space.
     * The effects of the value are non-linear. 
     *
     * @property frictionAir
     * @type number
     * @default 0.01
     */ /**
     * An `Object` that specifies the collision filtering properties of this body.
     *
     * Collisions between two bodies will obey the following rules:
     * - If the two bodies have the same non-zero value of `collisionFilter.group`,
     *   they will always collide if the value is positive, and they will never collide
     *   if the value is negative.
     * - If the two bodies have different values of `collisionFilter.group` or if one
     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:
     *
     * Each body belongs to a collision category, given by `collisionFilter.category`. This
     * value is used as a bit field and the category should have only one bit set, meaning that
     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32
     * different collision categories available.
     *
     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies
     * the categories it collides with (the value is the bitwise AND value of all these categories).
     *
     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's
     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`
     * are both true.
     *
     * @property collisionFilter
     * @type object
     */ /**
     * An Integer `Number`, that specifies the collision group this body belongs to.
     * See `body.collisionFilter` for more information.
     *
     * @property collisionFilter.group
     * @type object
     * @default 0
     */ /**
     * A bit field that specifies the collision category this body belongs to.
     * The category value should have only one bit set, for example `0x0001`.
     * This means there are up to 32 unique collision categories available.
     * See `body.collisionFilter` for more information.
     *
     * @property collisionFilter.category
     * @type object
     * @default 1
     */ /**
     * A bit mask that specifies the collision categories this body may collide with.
     * See `body.collisionFilter` for more information.
     *
     * @property collisionFilter.mask
     * @type object
     * @default -1
     */ /**
     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.
     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.
     * The default should generally suffice, although very large bodies may require larger values for stable stacking.
     *
     * @property slop
     * @type number
     * @default 0.05
     */ /**
     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.
     *
     * @property timeScale
     * @type number
     * @default 1
     */ /**
     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.
     *
     * @property render
     * @type object
     */ /**
     * A flag that indicates if the body should be rendered.
     *
     * @property render.visible
     * @type boolean
     * @default true
     */ /**
     * Sets the opacity to use when rendering.
     *
     * @property render.opacity
     * @type number
     * @default 1
    */ /**
     * An `Object` that defines the sprite properties to use when rendering, if any.
     *
     * @property render.sprite
     * @type object
     */ /**
     * An `String` that defines the path to the image to use as the sprite texture, if any.
     *
     * @property render.sprite.texture
     * @type string
     */ /**
     * A `Number` that defines the scaling in the x-axis for the sprite, if any.
     *
     * @property render.sprite.xScale
     * @type number
     * @default 1
     */ /**
     * A `Number` that defines the scaling in the y-axis for the sprite, if any.
     *
     * @property render.sprite.yScale
     * @type number
     * @default 1
     */ /**
      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).
      *
      * @property render.sprite.xOffset
      * @type number
      * @default 0
      */ /**
      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).
      *
      * @property render.sprite.yOffset
      * @type number
      * @default 0
      */ /**
     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).
     * A value of `0` means no outline will be rendered.
     *
     * @property render.lineWidth
     * @type number
     * @default 0
     */ /**
     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).
     * It is the same as when using a canvas, so it accepts CSS style property values.
     *
     * @property render.fillStyle
     * @type string
     * @default a random colour
     */ /**
     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).
     * It is the same as when using a canvas, so it accepts CSS style property values.
     *
     * @property render.strokeStyle
     * @type string
     * @default a random colour
     */ /**
     * An array of unique axis vectors (edge normals) used for collision detection.
     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.
     * They are constantly updated by `Body.update` during the simulation.
     *
     * @property axes
     * @type vector[]
     */ /**
     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.
     *
     * @property area
     * @type string
     * @default 
     */ /**
     * A `Bounds` object that defines the AABB region for the body.
     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.
     *
     * @property bounds
     * @type bounds
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.
*
* @class Sleeping
*/ var Sleeping = {
            };
            module.exports = Sleeping;
            var Events = __webpack_require__(4);
            (function() {
                Sleeping._motionWakeThreshold = 0.18;
                Sleeping._motionSleepThreshold = 0.08;
                Sleeping._minBias = 0.9;
                /**
     * Puts bodies to sleep or wakes them up depending on their motion.
     * @method update
     * @param {body[]} bodies
     * @param {number} timeScale
     */ Sleeping.update = function(bodies, timeScale) {
                    var timeFactor = timeScale * timeScale * timeScale;
                    // update bodies sleeping status
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i], motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;
                        // wake up bodies if they have a force applied
                        if (body.force.x !== 0 || body.force.y !== 0) {
                            Sleeping.set(body, false);
                            continue;
                        }
                        var minMotion = Math.min(body.motion, motion), maxMotion = Math.max(body.motion, motion);
                        // biased average motion estimation between frames
                        body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;
                        if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {
                            body.sleepCounter += 1;
                            if (body.sleepCounter >= body.sleepThreshold) Sleeping.set(body, true);
                        } else if (body.sleepCounter > 0) body.sleepCounter -= 1;
                    }
                };
                /**
     * Given a set of colliding pairs, wakes the sleeping bodies involved.
     * @method afterCollisions
     * @param {pair[]} pairs
     * @param {number} timeScale
     */ Sleeping.afterCollisions = function(pairs, timeScale) {
                    var timeFactor = timeScale * timeScale * timeScale;
                    // wake up bodies involved in collisions
                    for(var i = 0; i < pairs.length; i++){
                        var pair = pairs[i];
                        // don't wake inactive pairs
                        if (!pair.isActive) continue;
                        var collision = pair.collision, bodyA = collision.bodyA.parent, bodyB = collision.bodyB.parent;
                        // don't wake if at least one body is static
                        if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;
                        if (bodyA.isSleeping || bodyB.isSleeping) {
                            var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB, movingBody = sleepingBody === bodyA ? bodyB : bodyA;
                            if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) Sleeping.set(sleepingBody, false);
                        }
                    }
                };
                /**
     * Set a body as sleeping or awake.
     * @method set
     * @param {body} body
     * @param {boolean} isSleeping
     */ Sleeping.set = function(body, isSleeping) {
                    var wasSleeping = body.isSleeping;
                    if (isSleeping) {
                        body.isSleeping = true;
                        body.sleepCounter = body.sleepThreshold;
                        body.positionImpulse.x = 0;
                        body.positionImpulse.y = 0;
                        body.positionPrev.x = body.position.x;
                        body.positionPrev.y = body.position.y;
                        body.anglePrev = body.angle;
                        body.speed = 0;
                        body.angularSpeed = 0;
                        body.motion = 0;
                        if (!wasSleeping) Events.trigger(body, 'sleepStart');
                    } else {
                        body.isSleeping = false;
                        body.sleepCounter = 0;
                        if (wasSleeping) Events.trigger(body, 'sleepEnd');
                    }
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.
*
* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.
*
* See `Matter.Engine` for collision events.
*
* @class Collision
*/ var Collision = {
            };
            module.exports = Collision;
            var Vertices = __webpack_require__(3);
            var Pair = __webpack_require__(9);
            (function() {
                var _supports = [];
                var _overlapAB = {
                    overlap: 0,
                    axis: null
                };
                var _overlapBA = {
                    overlap: 0,
                    axis: null
                };
                /**
     * Creates a new collision record.
     * @method create
     * @param {body} bodyA The first body part represented by the collision record
     * @param {body} bodyB The second body part represented by the collision record
     * @return {collision} A new collision record
     */ Collision.create = function(bodyA, bodyB) {
                    return {
                        pair: null,
                        collided: false,
                        bodyA: bodyA,
                        bodyB: bodyB,
                        parentA: bodyA.parent,
                        parentB: bodyB.parent,
                        depth: 0,
                        normal: {
                            x: 0,
                            y: 0
                        },
                        tangent: {
                            x: 0,
                            y: 0
                        },
                        penetration: {
                            x: 0,
                            y: 0
                        },
                        supports: []
                    };
                };
                /**
     * Detect collision between two bodies.
     * @method collides
     * @param {body} bodyA
     * @param {body} bodyB
     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.
     * @return {collision|null} A collision record if detected, otherwise null
     */ Collision.collides = function(bodyA, bodyB, pairs) {
                    Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);
                    if (_overlapAB.overlap <= 0) return null;
                    Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);
                    if (_overlapBA.overlap <= 0) return null;
                    // reuse collision records for gc efficiency
                    var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)], collision;
                    if (!pair) {
                        collision = Collision.create(bodyA, bodyB);
                        collision.collided = true;
                        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;
                        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;
                        collision.parentA = collision.bodyA.parent;
                        collision.parentB = collision.bodyB.parent;
                    } else collision = pair.collision;
                    bodyA = collision.bodyA;
                    bodyB = collision.bodyB;
                    var minOverlap;
                    if (_overlapAB.overlap < _overlapBA.overlap) minOverlap = _overlapAB;
                    else minOverlap = _overlapBA;
                    var normal = collision.normal, supports = collision.supports, minAxis = minOverlap.axis, minAxisX = minAxis.x, minAxisY = minAxis.y;
                    // ensure normal is facing away from bodyA
                    if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {
                        normal.x = minAxisX;
                        normal.y = minAxisY;
                    } else {
                        normal.x = -minAxisX;
                        normal.y = -minAxisY;
                    }
                    collision.tangent.x = -normal.y;
                    collision.tangent.y = normal.x;
                    collision.depth = minOverlap.overlap;
                    collision.penetration.x = normal.x * collision.depth;
                    collision.penetration.y = normal.y * collision.depth;
                    // find support points, there is always either exactly one or two
                    var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1), supportCount = 0;
                    // find the supports from bodyB that are inside bodyA
                    if (Vertices.contains(bodyA.vertices, supportsB[0])) supports[supportCount++] = supportsB[0];
                    if (Vertices.contains(bodyA.vertices, supportsB[1])) supports[supportCount++] = supportsB[1];
                    // find the supports from bodyA that are inside bodyB
                    if (supportCount < 2) {
                        var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);
                        if (Vertices.contains(bodyB.vertices, supportsA[0])) supports[supportCount++] = supportsA[0];
                        if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) supports[supportCount++] = supportsA[1];
                    }
                    // account for the edge case of overlapping but no vertex containment
                    if (supportCount === 0) supports[supportCount++] = supportsB[0];
                    // update supports array size
                    supports.length = supportCount;
                    return collision;
                };
                /**
     * Find the overlap between two sets of vertices.
     * @method _overlapAxes
     * @private
     * @param {object} result
     * @param {vertices} verticesA
     * @param {vertices} verticesB
     * @param {axes} axes
     */ Collision._overlapAxes = function(result, verticesA, verticesB, axes) {
                    var verticesALength = verticesA.length, verticesBLength = verticesB.length, verticesAX = verticesA[0].x, verticesAY = verticesA[0].y, verticesBX = verticesB[0].x, verticesBY = verticesB[0].y, axesLength = axes.length, overlapMin = Number.MAX_VALUE, overlapAxisNumber = 0, overlap, overlapAB, overlapBA, dot, i, j;
                    for(i = 0; i < axesLength; i++){
                        var axis = axes[i], axisX = axis.x, axisY = axis.y, minA = verticesAX * axisX + verticesAY * axisY, minB = verticesBX * axisX + verticesBY * axisY, maxA = minA, maxB = minB;
                        for(j = 1; j < verticesALength; j += 1){
                            dot = verticesA[j].x * axisX + verticesA[j].y * axisY;
                            if (dot > maxA) maxA = dot;
                            else if (dot < minA) minA = dot;
                        }
                        for(j = 1; j < verticesBLength; j += 1){
                            dot = verticesB[j].x * axisX + verticesB[j].y * axisY;
                            if (dot > maxB) maxB = dot;
                            else if (dot < minB) minB = dot;
                        }
                        overlapAB = maxA - minB;
                        overlapBA = maxB - minA;
                        overlap = overlapAB < overlapBA ? overlapAB : overlapBA;
                        if (overlap < overlapMin) {
                            overlapMin = overlap;
                            overlapAxisNumber = i;
                            if (overlap <= 0) break;
                        }
                    }
                    result.axis = axes[overlapAxisNumber];
                    result.overlap = overlapMin;
                };
                /**
     * Projects vertices on an axis and returns an interval.
     * @method _projectToAxis
     * @private
     * @param {} projection
     * @param {} vertices
     * @param {} axis
     */ Collision._projectToAxis = function(projection, vertices, axis) {
                    var min = vertices[0].x * axis.x + vertices[0].y * axis.y, max = min;
                    for(var i = 1; i < vertices.length; i += 1){
                        var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;
                        if (dot > max) max = dot;
                        else if (dot < min) min = dot;
                    }
                    projection.min = min;
                    projection.max = max;
                };
                /**
     * Finds supporting vertices given two bodies along a given direction using hill-climbing.
     * @method _findSupports
     * @private
     * @param {body} bodyA
     * @param {body} bodyB
     * @param {vector} normal
     * @param {number} direction
     * @return [vector]
     */ Collision._findSupports = function(bodyA, bodyB, normal, direction) {
                    var vertices = bodyB.vertices, verticesLength = vertices.length, bodyAPositionX = bodyA.position.x, bodyAPositionY = bodyA.position.y, normalX = normal.x * direction, normalY = normal.y * direction, nearestDistance = Number.MAX_VALUE, vertexA, vertexB, vertexC, distance, j;
                    // find deepest vertex relative to the axis
                    for(j = 0; j < verticesLength; j += 1){
                        vertexB = vertices[j];
                        distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);
                        // convex hill-climbing
                        if (distance < nearestDistance) {
                            nearestDistance = distance;
                            vertexA = vertexB;
                        }
                    }
                    // measure next vertex
                    vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];
                    nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);
                    // compare with previous vertex
                    vertexB = vertices[(vertexA.index + 1) % verticesLength];
                    if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {
                        _supports[0] = vertexA;
                        _supports[1] = vertexB;
                        return _supports;
                    }
                    _supports[0] = vertexA;
                    _supports[1] = vertexC;
                    return _supports;
                };
            /*
    *
    *  Properties Documentation
    *
    */ /**
     * A reference to the pair using this collision record, if there is one.
     *
     * @property pair
     * @type {pair|null}
     * @default null
     */ /**
     * A flag that indicates if the bodies were colliding when the collision was last updated.
     * 
     * @property collided
     * @type boolean
     * @default false
     */ /**
     * The first body part represented by the collision (see also `collision.parentA`).
     * 
     * @property bodyA
     * @type body
     */ /**
     * The second body part represented by the collision (see also `collision.parentB`).
     * 
     * @property bodyB
     * @type body
     */ /**
     * The first body represented by the collision (i.e. `collision.bodyA.parent`).
     * 
     * @property parentA
     * @type body
     */ /**
     * The second body represented by the collision (i.e. `collision.bodyB.parent`).
     * 
     * @property parentB
     * @type body
     */ /**
     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.
     *
     * @readOnly
     * @property depth
     * @type number
     * @default 0
     */ /**
     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.
     *
     * @property normal
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A normalised `Vector` that is the tangent direction to the collision normal.
     *
     * @property tangent
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Vector` that represents the direction and depth of the collision.
     *
     * @property penetration
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * An array of body vertices that represent the support points in the collision.
     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.
     *
     * @property supports
     * @type vector[]
     * @default []
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.
*
* @class Pair
*/ var Pair = {
            };
            module.exports = Pair;
            var Contact = __webpack_require__(17);
            (function() {
                /**
     * Creates a pair.
     * @method create
     * @param {collision} collision
     * @param {number} timestamp
     * @return {pair} A new pair
     */ Pair.create = function(collision, timestamp) {
                    var bodyA = collision.bodyA, bodyB = collision.bodyB;
                    var pair = {
                        id: Pair.id(bodyA, bodyB),
                        bodyA: bodyA,
                        bodyB: bodyB,
                        collision: collision,
                        contacts: [],
                        activeContacts: [],
                        separation: 0,
                        isActive: true,
                        confirmedActive: true,
                        isSensor: bodyA.isSensor || bodyB.isSensor,
                        timeCreated: timestamp,
                        timeUpdated: timestamp,
                        inverseMass: 0,
                        friction: 0,
                        frictionStatic: 0,
                        restitution: 0,
                        slop: 0
                    };
                    Pair.update(pair, collision, timestamp);
                    return pair;
                };
                /**
     * Updates a pair given a collision.
     * @method update
     * @param {pair} pair
     * @param {collision} collision
     * @param {number} timestamp
     */ Pair.update = function(pair, collision, timestamp) {
                    var contacts = pair.contacts, supports = collision.supports, activeContacts = pair.activeContacts, parentA = collision.parentA, parentB = collision.parentB, parentAVerticesLength = parentA.vertices.length;
                    pair.isActive = true;
                    pair.timeUpdated = timestamp;
                    pair.collision = collision;
                    pair.separation = collision.depth;
                    pair.inverseMass = parentA.inverseMass + parentB.inverseMass;
                    pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;
                    pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;
                    pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;
                    pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;
                    collision.pair = pair;
                    activeContacts.length = 0;
                    for(var i = 0; i < supports.length; i++){
                        var support = supports[i], contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index, contact = contacts[contactId];
                        if (contact) activeContacts.push(contact);
                        else activeContacts.push(contacts[contactId] = Contact.create(support));
                    }
                };
                /**
     * Set a pair as active or inactive.
     * @method setActive
     * @param {pair} pair
     * @param {bool} isActive
     * @param {number} timestamp
     */ Pair.setActive = function(pair, isActive, timestamp) {
                    if (isActive) {
                        pair.isActive = true;
                        pair.timeUpdated = timestamp;
                    } else {
                        pair.isActive = false;
                        pair.activeContacts.length = 0;
                    }
                };
                /**
     * Get the id for the given pair.
     * @method id
     * @param {body} bodyA
     * @param {body} bodyB
     * @return {string} Unique pairId
     */ Pair.id = function(bodyA, bodyB) {
                    if (bodyA.id < bodyB.id) return 'A' + bodyA.id + 'B' + bodyB.id;
                    else return 'A' + bodyB.id + 'B' + bodyA.id;
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Constraint` module contains methods for creating and manipulating constraints.
* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).
* The stiffness of constraints can be modified to create springs or elastic.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Constraint
*/ var Constraint = {
            };
            module.exports = Constraint;
            var Vertices = __webpack_require__(3);
            var Vector = __webpack_require__(2);
            var Sleeping = __webpack_require__(7);
            var Bounds = __webpack_require__(1);
            var Axes = __webpack_require__(11);
            var Common = __webpack_require__(0);
            (function() {
                Constraint._warming = 0.4;
                Constraint._torqueDampen = 1;
                Constraint._minLength = 0.000001;
                /**
     * Creates a new constraint.
     * All properties have default values, and many are pre-calculated automatically based on other properties.
     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).
     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.
     * For compound bodies, constraints must be applied to the parent body (not one of its parts).
     * See the properties section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {} options
     * @return {constraint} constraint
     */ Constraint.create = function(options) {
                    var constraint = options;
                    // if bodies defined but no points, use body centre
                    if (constraint.bodyA && !constraint.pointA) constraint.pointA = {
                        x: 0,
                        y: 0
                    };
                    if (constraint.bodyB && !constraint.pointB) constraint.pointB = {
                        x: 0,
                        y: 0
                    };
                    // calculate static length using initial world space points
                    var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA, initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB, length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));
                    constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;
                    // option defaults
                    constraint.id = constraint.id || Common.nextId();
                    constraint.label = constraint.label || 'Constraint';
                    constraint.type = 'constraint';
                    constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);
                    constraint.damping = constraint.damping || 0;
                    constraint.angularStiffness = constraint.angularStiffness || 0;
                    constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;
                    constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;
                    constraint.plugin = {
                    };
                    // render
                    var render = {
                        visible: true,
                        lineWidth: 2,
                        strokeStyle: '#ffffff',
                        type: 'line',
                        anchors: true
                    };
                    if (constraint.length === 0 && constraint.stiffness > 0.1) {
                        render.type = 'pin';
                        render.anchors = false;
                    } else if (constraint.stiffness < 0.9) render.type = 'spring';
                    constraint.render = Common.extend(render, constraint.render);
                    return constraint;
                };
                /**
     * Prepares for solving by constraint warming.
     * @private
     * @method preSolveAll
     * @param {body[]} bodies
     */ Constraint.preSolveAll = function(bodies) {
                    for(var i = 0; i < bodies.length; i += 1){
                        var body = bodies[i], impulse = body.constraintImpulse;
                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) continue;
                        body.position.x += impulse.x;
                        body.position.y += impulse.y;
                        body.angle += impulse.angle;
                    }
                };
                /**
     * Solves all constraints in a list of collisions.
     * @private
     * @method solveAll
     * @param {constraint[]} constraints
     * @param {number} timeScale
     */ Constraint.solveAll = function(constraints, timeScale) {
                    // Solve fixed constraints first.
                    for(var i = 0; i < constraints.length; i += 1){
                        var constraint = constraints[i], fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic, fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;
                        if (fixedA || fixedB) Constraint.solve(constraints[i], timeScale);
                    }
                    // Solve free constraints last.
                    for(i = 0; i < constraints.length; i += 1){
                        constraint = constraints[i];
                        fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;
                        fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;
                        if (!fixedA && !fixedB) Constraint.solve(constraints[i], timeScale);
                    }
                };
                /**
     * Solves a distance constraint with Gauss-Siedel method.
     * @private
     * @method solve
     * @param {constraint} constraint
     * @param {number} timeScale
     */ Constraint.solve = function(constraint, timeScale) {
                    var bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointA = constraint.pointA, pointB = constraint.pointB;
                    if (!bodyA && !bodyB) return;
                    // update reference angle
                    if (bodyA && !bodyA.isStatic) {
                        Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);
                        constraint.angleA = bodyA.angle;
                    }
                    // update reference angle
                    if (bodyB && !bodyB.isStatic) {
                        Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);
                        constraint.angleB = bodyB.angle;
                    }
                    var pointAWorld = pointA, pointBWorld = pointB;
                    if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);
                    if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);
                    if (!pointAWorld || !pointBWorld) return;
                    var delta = Vector.sub(pointAWorld, pointBWorld), currentLength = Vector.magnitude(delta);
                    // prevent singularity
                    if (currentLength < Constraint._minLength) currentLength = Constraint._minLength;
                    // solve distance constraint with Gauss-Siedel method
                    var difference = (currentLength - constraint.length) / currentLength, stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness, force = Vector.mult(delta, difference * stiffness), massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0), inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0), resistanceTotal = massTotal + inertiaTotal, torque, share, normal, normalVelocity, relativeVelocity;
                    if (constraint.damping) {
                        var zero = Vector.create();
                        normal = Vector.div(delta, currentLength);
                        relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);
                        normalVelocity = Vector.dot(normal, relativeVelocity);
                    }
                    if (bodyA && !bodyA.isStatic) {
                        share = bodyA.inverseMass / massTotal;
                        // keep track of applied impulses for post solving
                        bodyA.constraintImpulse.x -= force.x * share;
                        bodyA.constraintImpulse.y -= force.y * share;
                        // apply forces
                        bodyA.position.x -= force.x * share;
                        bodyA.position.y -= force.y * share;
                        // apply damping
                        if (constraint.damping) {
                            bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;
                            bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;
                        }
                        // apply torque
                        torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);
                        bodyA.constraintImpulse.angle -= torque;
                        bodyA.angle -= torque;
                    }
                    if (bodyB && !bodyB.isStatic) {
                        share = bodyB.inverseMass / massTotal;
                        // keep track of applied impulses for post solving
                        bodyB.constraintImpulse.x += force.x * share;
                        bodyB.constraintImpulse.y += force.y * share;
                        // apply forces
                        bodyB.position.x += force.x * share;
                        bodyB.position.y += force.y * share;
                        // apply damping
                        if (constraint.damping) {
                            bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;
                            bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;
                        }
                        // apply torque
                        torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);
                        bodyB.constraintImpulse.angle += torque;
                        bodyB.angle += torque;
                    }
                };
                /**
     * Performs body updates required after solving constraints.
     * @private
     * @method postSolveAll
     * @param {body[]} bodies
     */ Constraint.postSolveAll = function(bodies) {
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i], impulse = body.constraintImpulse;
                        if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) continue;
                        Sleeping.set(body, false);
                        // update geometry and reset
                        for(var j = 0; j < body.parts.length; j++){
                            var part = body.parts[j];
                            Vertices.translate(part.vertices, impulse);
                            if (j > 0) {
                                part.position.x += impulse.x;
                                part.position.y += impulse.y;
                            }
                            if (impulse.angle !== 0) {
                                Vertices.rotate(part.vertices, impulse.angle, body.position);
                                Axes.rotate(part.axes, impulse.angle);
                                if (j > 0) Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);
                            }
                            Bounds.update(part.bounds, part.vertices, body.velocity);
                        }
                        // dampen the cached impulse for warming next step
                        impulse.angle *= Constraint._warming;
                        impulse.x *= Constraint._warming;
                        impulse.y *= Constraint._warming;
                    }
                };
                /**
     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.
     * @method pointAWorld
     * @param {constraint} constraint
     * @returns {vector} the world-space position
     */ Constraint.pointAWorld = function(constraint) {
                    return {
                        x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,
                        y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y
                    };
                };
                /**
     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.
     * @method pointBWorld
     * @param {constraint} constraint
     * @returns {vector} the world-space position
     */ Constraint.pointBWorld = function(constraint) {
                    return {
                        x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,
                        y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y
                    };
                };
            /*
    *
    *  Properties Documentation
    *
    */ /**
     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.
     *
     * @property id
     * @type number
     */ /**
     * A `String` denoting the type of object.
     *
     * @property type
     * @type string
     * @default "constraint"
     * @readOnly
     */ /**
     * An arbitrary `String` name to help the user identify and manage bodies.
     *
     * @property label
     * @type string
     * @default "Constraint"
     */ /**
     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.
     *
     * @property render
     * @type object
     */ /**
     * A flag that indicates if the constraint should be rendered.
     *
     * @property render.visible
     * @type boolean
     * @default true
     */ /**
     * A `Number` that defines the line width to use when rendering the constraint outline.
     * A value of `0` means no outline will be rendered.
     *
     * @property render.lineWidth
     * @type number
     * @default 2
     */ /**
     * A `String` that defines the stroke style to use when rendering the constraint outline.
     * It is the same as when using a canvas, so it accepts CSS style property values.
     *
     * @property render.strokeStyle
     * @type string
     * @default a random colour
     */ /**
     * A `String` that defines the constraint rendering type. 
     * The possible values are 'line', 'pin', 'spring'.
     * An appropriate render type will be automatically chosen unless one is given in options.
     *
     * @property render.type
     * @type string
     * @default 'line'
     */ /**
     * A `Boolean` that defines if the constraint's anchor points should be rendered.
     *
     * @property render.anchors
     * @type boolean
     * @default true
     */ /**
     * The first possible `Body` that this constraint is attached to.
     *
     * @property bodyA
     * @type body
     * @default null
     */ /**
     * The second possible `Body` that this constraint is attached to.
     *
     * @property bodyB
     * @type body
     * @default null
     */ /**
     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.
     *
     * @property pointA
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.
     *
     * @property pointB
     * @type vector
     * @default { x: 0, y: 0 }
     */ /**
     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.
     * A value of `1` means the constraint should be very stiff.
     * A value of `0.2` means the constraint acts like a soft spring.
     *
     * @property stiffness
     * @type number
     * @default 1
     */ /**
     * A `Number` that specifies the damping of the constraint, 
     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.
     * Damping will only be apparent when the constraint also has a very low `stiffness`.
     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.
     * A value of `0` means the constraint will apply no damping.
     *
     * @property damping
     * @type number
     * @default 0
     */ /**
     * A `Number` that specifies the target resting length of the constraint. 
     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.
     *
     * @property length
     * @type number
     */ /**
     * An object reserved for storing plugin-specific properties.
     *
     * @property plugin
     * @type {}
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.
*
* @class Axes
*/ var Axes = {
            };
            module.exports = Axes;
            var Vector = __webpack_require__(2);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Creates a new set of axes from the given vertices.
     * @method fromVertices
     * @param {vertices} vertices
     * @return {axes} A new axes from the given vertices
     */ Axes.fromVertices = function(vertices) {
                    var axes = {
                    };
                    // find the unique axes, using edge normal gradients
                    for(var i = 0; i < vertices.length; i++){
                        var j = (i + 1) % vertices.length, normal = Vector.normalise({
                            x: vertices[j].y - vertices[i].y,
                            y: vertices[i].x - vertices[j].x
                        }), gradient = normal.y === 0 ? Infinity : normal.x / normal.y;
                        // limit precision
                        gradient = gradient.toFixed(3).toString();
                        axes[gradient] = normal;
                    }
                    return Common.values(axes);
                };
                /**
     * Rotates a set of axes by the given angle.
     * @method rotate
     * @param {axes} axes
     * @param {number} angle
     */ Axes.rotate = function(axes, angle) {
                    if (angle === 0) return;
                    var cos = Math.cos(angle), sin = Math.sin(angle);
                    for(var i = 0; i < axes.length; i++){
                        var axis = axes[i], xx;
                        xx = axis.x * cos - axis.y * sin;
                        axis.y = axis.x * sin + axis.y * cos;
                        axis.x = xx;
                    }
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Bodies` module contains factory methods for creating rigid body models 
* with commonly used body configurations (such as rectangles, circles and other polygons).
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Bodies
*/ // TODO: true circle bodies
            var Bodies = {
            };
            module.exports = Bodies;
            var Vertices = __webpack_require__(3);
            var Common = __webpack_require__(0);
            var Body = __webpack_require__(6);
            var Bounds = __webpack_require__(1);
            var Vector = __webpack_require__(2);
            (function() {
                /**
     * Creates a new rigid body model with a rectangle hull. 
     * The options parameter is an object that specifies any properties you wish to override the defaults.
     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
     * @method rectangle
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {object} [options]
     * @return {body} A new rectangle body
     */ Bodies.rectangle = function(x, y, width, height, options) {
                    options = options || {
                    };
                    var rectangle = {
                        label: 'Rectangle Body',
                        position: {
                            x: x,
                            y: y
                        },
                        vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)
                    };
                    if (options.chamfer) {
                        var chamfer = options.chamfer;
                        rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);
                        delete options.chamfer;
                    }
                    return Body.create(Common.extend({
                    }, rectangle, options));
                };
                /**
     * Creates a new rigid body model with a trapezoid hull. 
     * The options parameter is an object that specifies any properties you wish to override the defaults.
     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
     * @method trapezoid
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {number} slope
     * @param {object} [options]
     * @return {body} A new trapezoid body
     */ Bodies.trapezoid = function(x, y, width, height, slope, options) {
                    options = options || {
                    };
                    slope *= 0.5;
                    var roof = (1 - slope * 2) * width;
                    var x1 = width * slope, x2 = x1 + roof, x3 = x2 + x1, verticesPath;
                    if (slope < 0.5) verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';
                    else verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';
                    var trapezoid = {
                        label: 'Trapezoid Body',
                        position: {
                            x: x,
                            y: y
                        },
                        vertices: Vertices.fromPath(verticesPath)
                    };
                    if (options.chamfer) {
                        var chamfer = options.chamfer;
                        trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);
                        delete options.chamfer;
                    }
                    return Body.create(Common.extend({
                    }, trapezoid, options));
                };
                /**
     * Creates a new rigid body model with a circle hull. 
     * The options parameter is an object that specifies any properties you wish to override the defaults.
     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
     * @method circle
     * @param {number} x
     * @param {number} y
     * @param {number} radius
     * @param {object} [options]
     * @param {number} [maxSides]
     * @return {body} A new circle body
     */ Bodies.circle = function(x, y, radius, options, maxSides) {
                    options = options || {
                    };
                    var circle = {
                        label: 'Circle Body',
                        circleRadius: radius
                    };
                    // approximate circles with polygons until true circles implemented in SAT
                    maxSides = maxSides || 25;
                    var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));
                    // optimisation: always use even number of sides (half the number of unique axes)
                    if (sides % 2 === 1) sides += 1;
                    return Bodies.polygon(x, y, sides, radius, Common.extend({
                    }, circle, options));
                };
                /**
     * Creates a new rigid body model with a regular polygon hull with the given number of sides. 
     * The options parameter is an object that specifies any properties you wish to override the defaults.
     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
     * @method polygon
     * @param {number} x
     * @param {number} y
     * @param {number} sides
     * @param {number} radius
     * @param {object} [options]
     * @return {body} A new regular polygon body
     */ Bodies.polygon = function(x, y, sides, radius, options) {
                    options = options || {
                    };
                    if (sides < 3) return Bodies.circle(x, y, radius, options);
                    var theta = 2 * Math.PI / sides, path = '', offset = theta * 0.5;
                    for(var i = 0; i < sides; i += 1){
                        var angle = offset + i * theta, xx = Math.cos(angle) * radius, yy = Math.sin(angle) * radius;
                        path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';
                    }
                    var polygon = {
                        label: 'Polygon Body',
                        position: {
                            x: x,
                            y: y
                        },
                        vertices: Vertices.fromPath(path)
                    };
                    if (options.chamfer) {
                        var chamfer = options.chamfer;
                        polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);
                        delete options.chamfer;
                    }
                    return Body.create(Common.extend({
                    }, polygon, options));
                };
                /**
     * Utility to create a compound body based on set(s) of vertices.
     * 
     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) 
     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.
     * 
     * The resulting vertices are reorientated about their centre of mass,
     * and offset such that `body.position` corresponds to this point.
     * 
     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.
     * To later move the centre of mass see `Body.setCentre`.
     * 
     * Note that automatic conconcave decomposition results are not always optimal. 
     * For best results, simplify the input vertices as much as possible first.
     * By default this function applies some addtional simplification to help.
     * 
     * Some outputs may also require further manual processing afterwards to be robust.
     * In particular some parts may need to be overlapped to avoid collision gaps.
     * Thin parts and sharp points should be avoided or removed where possible.
     *
     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.
     * 
     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.
     * @method fromVertices
     * @param {number} x
     * @param {number} y
     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.
     * @param {object} [options] The body options.
     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.
     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.
     * @param {number} [minimumArea=10] Threshold when removing small parts.
     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.
     * @return {body}
     */ Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {
                    var decomp = Common.getDecomp(), canDecomp, body, parts, isConvex, isConcave, vertices1, i, j, k, v, z;
                    // check decomp is as expected
                    canDecomp = Boolean(decomp && decomp.quickDecomp);
                    options = options || {
                    };
                    parts = [];
                    flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;
                    removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;
                    minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;
                    removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;
                    // ensure vertexSets is an array of arrays
                    if (!Common.isArray(vertexSets[0])) vertexSets = [
                        vertexSets
                    ];
                    for(v = 0; v < vertexSets.length; v += 1){
                        vertices1 = vertexSets[v];
                        isConvex = Vertices.isConvex(vertices1);
                        isConcave = !isConvex;
                        if (isConcave && !canDecomp) Common.warnOnce('Bodies.fromVertices: Install the \'poly-decomp\' library and use Common.setDecomp or provide \'decomp\' as a global to decompose concave vertices.');
                        if (isConvex || !canDecomp) {
                            if (isConvex) vertices1 = Vertices.clockwiseSort(vertices1);
                            else // fallback to convex hull when decomposition is not possible
                            vertices1 = Vertices.hull(vertices1);
                            parts.push({
                                position: {
                                    x: x,
                                    y: y
                                },
                                vertices: vertices1
                            });
                        } else {
                            // initialise a decomposition
                            var concave = vertices1.map(function(vertex) {
                                return [
                                    vertex.x,
                                    vertex.y
                                ];
                            });
                            // vertices are concave and simple, we can decompose into parts
                            decomp.makeCCW(concave);
                            if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);
                            if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints);
                            // use the quick decomposition algorithm (Bayazit)
                            var decomposed = decomp.quickDecomp(concave);
                            // for each decomposed chunk
                            for(i = 0; i < decomposed.length; i++){
                                var chunk = decomposed[i];
                                // convert vertices into the correct structure
                                var chunkVertices = chunk.map(function(vertices) {
                                    return {
                                        x: vertices[0],
                                        y: vertices[1]
                                    };
                                });
                                // skip small chunks
                                if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;
                                // create a compound part
                                parts.push({
                                    position: Vertices.centre(chunkVertices),
                                    vertices: chunkVertices
                                });
                            }
                        }
                    }
                    // create body parts
                    for(i = 0; i < parts.length; i++)parts[i] = Body.create(Common.extend(parts[i], options));
                    // flag internal edges (coincident part edges)
                    if (flagInternal) {
                        var coincident_max_dist = 5;
                        for(i = 0; i < parts.length; i++){
                            var partA = parts[i];
                            for(j = i + 1; j < parts.length; j++){
                                var partB = parts[j];
                                if (Bounds.overlaps(partA.bounds, partB.bounds)) {
                                    var pav = partA.vertices, pbv = partB.vertices;
                                    // iterate vertices of both parts
                                    for(k = 0; k < partA.vertices.length; k++)for(z = 0; z < partB.vertices.length; z++){
                                        // find distances between the vertices
                                        var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])), db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));
                                        // if both vertices are very close, consider the edge concident (internal)
                                        if (da < coincident_max_dist && db < coincident_max_dist) {
                                            pav[k].isInternal = true;
                                            pbv[z].isInternal = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (parts.length > 1) {
                        // create the parent body to be returned, that contains generated compound parts
                        body = Body.create(Common.extend({
                            parts: parts.slice(0)
                        }, options));
                        // offset such that body.position is at the centre off mass
                        Body.setPosition(body, {
                            x: x,
                            y: y
                        });
                        return body;
                    } else return parts[0];
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.
*
* @class Mouse
*/ var Mouse = {
            };
            module.exports = Mouse;
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Creates a mouse input.
     * @method create
     * @param {HTMLElement} element
     * @return {mouse} A new mouse
     */ Mouse.create = function(element) {
                    var mouse = {
                    };
                    if (!element) Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');
                    mouse.element = element || document.body;
                    mouse.absolute = {
                        x: 0,
                        y: 0
                    };
                    mouse.position = {
                        x: 0,
                        y: 0
                    };
                    mouse.mousedownPosition = {
                        x: 0,
                        y: 0
                    };
                    mouse.mouseupPosition = {
                        x: 0,
                        y: 0
                    };
                    mouse.offset = {
                        x: 0,
                        y: 0
                    };
                    mouse.scale = {
                        x: 1,
                        y: 1
                    };
                    mouse.wheelDelta = 0;
                    mouse.button = -1;
                    mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;
                    mouse.sourceEvents = {
                        mousemove: null,
                        mousedown: null,
                        mouseup: null,
                        mousewheel: null
                    };
                    mouse.mousemove = function(event) {
                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                        if (touches) {
                            mouse.button = 0;
                            event.preventDefault();
                        }
                        mouse.absolute.x = position.x;
                        mouse.absolute.y = position.y;
                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                        mouse.sourceEvents.mousemove = event;
                    };
                    mouse.mousedown = function(event) {
                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                        if (touches) {
                            mouse.button = 0;
                            event.preventDefault();
                        } else mouse.button = event.button;
                        mouse.absolute.x = position.x;
                        mouse.absolute.y = position.y;
                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                        mouse.mousedownPosition.x = mouse.position.x;
                        mouse.mousedownPosition.y = mouse.position.y;
                        mouse.sourceEvents.mousedown = event;
                    };
                    mouse.mouseup = function(event) {
                        var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio), touches = event.changedTouches;
                        if (touches) event.preventDefault();
                        mouse.button = -1;
                        mouse.absolute.x = position.x;
                        mouse.absolute.y = position.y;
                        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                        mouse.mouseupPosition.x = mouse.position.x;
                        mouse.mouseupPosition.y = mouse.position.y;
                        mouse.sourceEvents.mouseup = event;
                    };
                    mouse.mousewheel = function(event) {
                        mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));
                        event.preventDefault();
                    };
                    Mouse.setElement(mouse, mouse.element);
                    return mouse;
                };
                /**
     * Sets the element the mouse is bound to (and relative to).
     * @method setElement
     * @param {mouse} mouse
     * @param {HTMLElement} element
     */ Mouse.setElement = function(mouse, element) {
                    mouse.element = element;
                    element.addEventListener('mousemove', mouse.mousemove);
                    element.addEventListener('mousedown', mouse.mousedown);
                    element.addEventListener('mouseup', mouse.mouseup);
                    element.addEventListener('mousewheel', mouse.mousewheel);
                    element.addEventListener('DOMMouseScroll', mouse.mousewheel);
                    element.addEventListener('touchmove', mouse.mousemove);
                    element.addEventListener('touchstart', mouse.mousedown);
                    element.addEventListener('touchend', mouse.mouseup);
                };
                /**
     * Clears all captured source events.
     * @method clearSourceEvents
     * @param {mouse} mouse
     */ Mouse.clearSourceEvents = function(mouse) {
                    mouse.sourceEvents.mousemove = null;
                    mouse.sourceEvents.mousedown = null;
                    mouse.sourceEvents.mouseup = null;
                    mouse.sourceEvents.mousewheel = null;
                    mouse.wheelDelta = 0;
                };
                /**
     * Sets the mouse position offset.
     * @method setOffset
     * @param {mouse} mouse
     * @param {vector} offset
     */ Mouse.setOffset = function(mouse, offset) {
                    mouse.offset.x = offset.x;
                    mouse.offset.y = offset.y;
                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                };
                /**
     * Sets the mouse position scale.
     * @method setScale
     * @param {mouse} mouse
     * @param {vector} scale
     */ Mouse.setScale = function(mouse, scale) {
                    mouse.scale.x = scale.x;
                    mouse.scale.y = scale.y;
                    mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;
                    mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;
                };
                /**
     * Gets the mouse position relative to an element given a screen pixel ratio.
     * @method _getRelativeMousePosition
     * @private
     * @param {} event
     * @param {} element
     * @param {number} pixelRatio
     * @return {}
     */ Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {
                    var elementBounds = element.getBoundingClientRect(), rootNode = document.documentElement || document.body.parentNode || document.body, scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft, scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop, touches = event.changedTouches, x, y;
                    if (touches) {
                        x = touches[0].pageX - elementBounds.left - scrollX;
                        y = touches[0].pageY - elementBounds.top - scrollY;
                    } else {
                        x = event.pageX - elementBounds.left - scrollX;
                        y = event.pageY - elementBounds.top - scrollY;
                    }
                    return {
                        x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),
                        y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)
                    };
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.
*
* @class Detector
*/ var Detector = {
            };
            module.exports = Detector;
            var Common = __webpack_require__(0);
            var Collision = __webpack_require__(8);
            (function() {
                /**
     * Creates a new collision detector.
     * @method create
     * @param {} options
     * @return {detector} A new collision detector
     */ Detector.create = function(options) {
                    var defaults = {
                        bodies: [],
                        pairs: null
                    };
                    return Common.extend(defaults, options);
                };
                /**
     * Sets the list of bodies in the detector.
     * @method setBodies
     * @param {detector} detector
     * @param {body[]} bodies
     */ Detector.setBodies = function(detector, bodies) {
                    detector.bodies = bodies.slice(0);
                };
                /**
     * Clears the detector including its list of bodies.
     * @method clear
     * @param {detector} detector
     */ Detector.clear = function(detector) {
                    detector.bodies = [];
                };
                /**
     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.
     * 
     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.
     * If a specific ordering is required then apply a sort to the resulting array.
     * @method collisions
     * @param {detector} detector
     * @return {collision[]} collisions
     */ Detector.collisions = function(detector) {
                    var collisions = [], pairs = detector.pairs, bodies = detector.bodies, bodiesLength = bodies.length, canCollide = Detector.canCollide, collides = Collision.collides, i, j;
                    bodies.sort(Detector._compareBoundsX);
                    for(i = 0; i < bodiesLength; i++){
                        var bodyA = bodies[i], boundsA = bodyA.bounds, boundXMax = bodyA.bounds.max.x, boundYMax = bodyA.bounds.max.y, boundYMin = bodyA.bounds.min.y, bodyAStatic = bodyA.isStatic || bodyA.isSleeping, partsALength = bodyA.parts.length, partsASingle = partsALength === 1;
                        for(j = i + 1; j < bodiesLength; j++){
                            var bodyB = bodies[j], boundsB = bodyB.bounds;
                            if (boundsB.min.x > boundXMax) break;
                            if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) continue;
                            if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) continue;
                            if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) continue;
                            var partsBLength = bodyB.parts.length;
                            if (partsASingle && partsBLength === 1) {
                                var collision = collides(bodyA, bodyB, pairs);
                                if (collision) collisions.push(collision);
                            } else {
                                var partsAStart = partsALength > 1 ? 1 : 0, partsBStart = partsBLength > 1 ? 1 : 0;
                                for(var k = partsAStart; k < partsALength; k++){
                                    var partA = bodyA.parts[k], boundsA = partA.bounds;
                                    for(var z = partsBStart; z < partsBLength; z++){
                                        var partB = bodyB.parts[z], boundsB = partB.bounds;
                                        if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) continue;
                                        var collision = collides(partA, partB, pairs);
                                        if (collision) collisions.push(collision);
                                    }
                                }
                            }
                        }
                    }
                    return collisions;
                };
                /**
     * Returns `true` if both supplied collision filters will allow a collision to occur.
     * See `body.collisionFilter` for more information.
     * @method canCollide
     * @param {} filterA
     * @param {} filterB
     * @return {bool} `true` if collision can occur
     */ Detector.canCollide = function(filterA, filterB) {
                    if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;
                    return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;
                };
                /**
     * The comparison function used in the broadphase algorithm.
     * Returns the signed delta of the bodies bounds on the x-axis.
     * @private
     * @method _sortCompare
     * @param {body} bodyA
     * @param {body} bodyB
     * @return {number} The signed delta used for sorting
     */ Detector._compareBoundsX = function(bodyA, bodyB) {
                    return bodyA.bounds.min.x - bodyB.bounds.min.x;
                };
            /*
    *
    *  Properties Documentation
    *
    */ /**
     * The array of `Matter.Body` between which the detector finds collisions.
     * 
     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.
     * @property bodies
     * @type body[]
     * @default []
     */ /**
     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.
     * @property pairs
     * @type {pairs|null}
     * @default null
     */ })();
        /***/ },
        function(module1, exports, __webpack_require__) {
            /**
* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.
*
* @class Plugin
*/ var Plugin = {
            };
            module1.exports = Plugin;
            var Common = __webpack_require__(0);
            (function() {
                Plugin._registry = {
                };
                /**
     * Registers a plugin object so it can be resolved later by name.
     * @method register
     * @param plugin {} The plugin to register.
     * @return {object} The plugin.
     */ Plugin.register = function(plugin) {
                    if (!Plugin.isPlugin(plugin)) Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');
                    if (plugin.name in Plugin._registry) {
                        var registered = Plugin._registry[plugin.name], pluginVersion = Plugin.versionParse(plugin.version).number, registeredVersion = Plugin.versionParse(registered.version).number;
                        if (pluginVersion > registeredVersion) {
                            Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));
                            Plugin._registry[plugin.name] = plugin;
                        } else if (pluginVersion < registeredVersion) Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));
                        else if (plugin !== registered) Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');
                    } else Plugin._registry[plugin.name] = plugin;
                    return plugin;
                };
                /**
     * Resolves a dependency to a plugin object from the registry if it exists. 
     * The `dependency` may contain a version, but only the name matters when resolving.
     * @method resolve
     * @param dependency {string} The dependency.
     * @return {object} The plugin if resolved, otherwise `undefined`.
     */ Plugin.resolve = function(dependency) {
                    return Plugin._registry[Plugin.dependencyParse(dependency).name];
                };
                /**
     * Returns a pretty printed plugin name and version.
     * @method toString
     * @param plugin {} The plugin.
     * @return {string} Pretty printed plugin name and version.
     */ Plugin.toString = function(plugin) {
                    return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');
                };
                /**
     * Returns `true` if the object meets the minimum standard to be considered a plugin.
     * This means it must define the following properties:
     * - `name`
     * - `version`
     * - `install`
     * @method isPlugin
     * @param obj {} The obj to test.
     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.
     */ Plugin.isPlugin = function(obj) {
                    return obj && obj.name && obj.version && obj.install;
                };
                /**
     * Returns `true` if a plugin with the given `name` been installed on `module`.
     * @method isUsed
     * @param module {} The module.
     * @param name {string} The plugin name.
     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.
     */ Plugin.isUsed = function(module, name) {
                    return module.used.indexOf(name) > -1;
                };
                /**
     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.
     * If `plugin.for` is not specified then it is assumed to be applicable.
     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.
     * @method isFor
     * @param plugin {} The plugin.
     * @param module {} The module.
     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.
     */ Plugin.isFor = function(plugin, module) {
                    var parsed = plugin.for && Plugin.dependencyParse(plugin.for);
                    return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);
                };
                /**
     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.
     * For installing plugins on `Matter` see the convenience function `Matter.use`.
     * Plugins may be specified either by their name or a reference to the plugin object.
     * Plugins themselves may specify further dependencies, but each plugin is installed only once.
     * Order is important, a topological sort is performed to find the best resulting order of installation.
     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.
     * This function logs the resulting status of each dependency in the console, along with any warnings.
     * - A green tick ✅ indicates a dependency was resolved and installed.
     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.
     * - A red cross ❌ indicates a dependency could not be resolved.
     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.
     * @method use
     * @param module {} The module install plugins on.
     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).
     */ Plugin.use = function(module, plugins) {
                    module.uses = (module.uses || []).concat(plugins || []);
                    if (module.uses.length === 0) {
                        Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');
                        return;
                    }
                    var dependencies = Plugin.dependencies(module), sortedDependencies = Common.topologicalSort(dependencies), status = [];
                    for(var i = 0; i < sortedDependencies.length; i += 1){
                        if (sortedDependencies[i] === module.name) continue;
                        var plugin = Plugin.resolve(sortedDependencies[i]);
                        if (!plugin) {
                            status.push('❌ ' + sortedDependencies[i]);
                            continue;
                        }
                        if (Plugin.isUsed(module, plugin.name)) continue;
                        if (!Plugin.isFor(plugin, module)) {
                            Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');
                            plugin._warned = true;
                        }
                        if (plugin.install) plugin.install(module);
                        else {
                            Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');
                            plugin._warned = true;
                        }
                        if (plugin._warned) {
                            status.push('🔶 ' + Plugin.toString(plugin));
                            delete plugin._warned;
                        } else status.push('✅ ' + Plugin.toString(plugin));
                        module.used.push(plugin.name);
                    }
                    if (status.length > 0) Common.info(status.join('  '));
                };
                /**
     * Recursively finds all of a module's dependencies and returns a flat dependency graph.
     * @method dependencies
     * @param module {} The module.
     * @return {object} A dependency graph.
     */ Plugin.dependencies = function(module, tracked) {
                    var parsedBase = Plugin.dependencyParse(module), name = parsedBase.name;
                    tracked = tracked || {
                    };
                    if (name in tracked) return;
                    module = Plugin.resolve(module) || module;
                    tracked[name] = Common.map(module.uses || [], function(dependency) {
                        if (Plugin.isPlugin(dependency)) Plugin.register(dependency);
                        var parsed = Plugin.dependencyParse(dependency), resolved = Plugin.resolve(dependency);
                        if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {
                            Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');
                            resolved._warned = true;
                            module._warned = true;
                        } else if (!resolved) {
                            Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');
                            module._warned = true;
                        }
                        return parsed.name;
                    });
                    for(var i = 0; i < tracked[name].length; i += 1)Plugin.dependencies(tracked[name][i], tracked);
                    return tracked;
                };
                /**
     * Parses a dependency string into its components.
     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.
     * See documentation for `Plugin.versionParse` for a description of the format.
     * This function can also handle dependencies that are already resolved (e.g. a module object).
     * @method dependencyParse
     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.
     * @return {object} The dependency parsed into its components.
     */ Plugin.dependencyParse = function(dependency) {
                    if (Common.isString(dependency)) {
                        var pattern = /^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/;
                        if (!pattern.test(dependency)) Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');
                        return {
                            name: dependency.split('@')[0],
                            range: dependency.split('@')[1] || '*'
                        };
                    }
                    return {
                        name: dependency.name,
                        range: dependency.range || dependency.version
                    };
                };
                /**
     * Parses a version string into its components.  
     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).
     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.
     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).
     * Only the following range types are supported:
     * - Tilde ranges e.g. `~1.2.3`
     * - Caret ranges e.g. `^1.2.3`
     * - Greater than ranges e.g. `>1.2.3`
     * - Greater than or equal ranges e.g. `>=1.2.3`
     * - Exact version e.g. `1.2.3`
     * - Any version `*`
     * @method versionParse
     * @param range {string} The version string.
     * @return {object} The version range parsed into its components.
     */ Plugin.versionParse = function(range) {
                    var pattern = /^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;
                    if (!pattern.test(range)) Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');
                    var parts = pattern.exec(range);
                    var major = Number(parts[4]);
                    var minor = Number(parts[5]);
                    var patch = Number(parts[6]);
                    return {
                        isRange: Boolean(parts[1] || parts[2]),
                        version: parts[3],
                        range: range,
                        operator: parts[1] || parts[2] || '',
                        major: major,
                        minor: minor,
                        patch: patch,
                        parts: [
                            major,
                            minor,
                            patch
                        ],
                        prerelease: parts[7],
                        number: major * 100000000 + minor * 10000 + patch
                    };
                };
                /**
     * Returns `true` if `version` satisfies the given `range`.
     * See documentation for `Plugin.versionParse` for a description of the format.
     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.
     * @method versionSatisfies
     * @param version {string} The version string.
     * @param range {string} The range string.
     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.
     */ Plugin.versionSatisfies = function(version, range) {
                    range = range || '*';
                    var r = Plugin.versionParse(range), v = Plugin.versionParse(version);
                    if (r.isRange) {
                        if (r.operator === '*' || version === '*') return true;
                        if (r.operator === '>') return v.number > r.number;
                        if (r.operator === '>=') return v.number >= r.number;
                        if (r.operator === '~') return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;
                        if (r.operator === '^') {
                            if (r.major > 0) return v.major === r.major && v.number >= r.number;
                            if (r.minor > 0) return v.minor === r.minor && v.patch >= r.patch;
                            return v.patch === r.patch;
                        }
                    }
                    return version === range || version === '*';
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.
* It is intended for development and debugging purposes, but may also be suitable for simple games.
* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.
*
* @class Render
*/ var Render = {
            };
            module.exports = Render;
            var Common = __webpack_require__(0);
            var Composite = __webpack_require__(5);
            var Bounds = __webpack_require__(1);
            var Events = __webpack_require__(4);
            var Vector = __webpack_require__(2);
            var Mouse = __webpack_require__(13);
            (function() {
                var _requestAnimationFrame, _cancelAnimationFrame;
                if (typeof window !== 'undefined') {
                    _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
                        window.setTimeout(function() {
                            callback(Common.now());
                        }, 1000 / 60);
                    };
                    _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
                }
                Render._goodFps = 30;
                Render._goodDelta = 1000 / 60;
                /**
     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.
     * All properties have default values, and many are pre-calculated automatically based on other properties.
     * See the properties section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {object} [options]
     * @return {render} A new renderer
     */ Render.create = function(options) {
                    var defaults = {
                        controller: Render,
                        engine: null,
                        element: null,
                        canvas: null,
                        mouse: null,
                        frameRequestId: null,
                        timing: {
                            historySize: 60,
                            delta: 0,
                            deltaHistory: [],
                            lastTime: 0,
                            lastTimestamp: 0,
                            lastElapsed: 0,
                            timestampElapsed: 0,
                            timestampElapsedHistory: [],
                            engineDeltaHistory: [],
                            engineElapsedHistory: [],
                            elapsedHistory: []
                        },
                        options: {
                            width: 800,
                            height: 600,
                            pixelRatio: 1,
                            background: '#14151f',
                            wireframeBackground: '#14151f',
                            hasBounds: !!options.bounds,
                            enabled: true,
                            wireframes: true,
                            showSleeping: true,
                            showDebug: false,
                            showStats: false,
                            showPerformance: false,
                            showBounds: false,
                            showVelocity: false,
                            showCollisions: false,
                            showSeparations: false,
                            showAxes: false,
                            showPositions: false,
                            showAngleIndicator: false,
                            showIds: false,
                            showVertexNumbers: false,
                            showConvexHulls: false,
                            showInternalEdges: false,
                            showMousePosition: false
                        }
                    };
                    var render = Common.extend(defaults, options);
                    if (render.canvas) {
                        render.canvas.width = render.options.width || render.canvas.width;
                        render.canvas.height = render.options.height || render.canvas.height;
                    }
                    render.mouse = options.mouse;
                    render.engine = options.engine;
                    render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);
                    render.context = render.canvas.getContext('2d');
                    render.textures = {
                    };
                    render.bounds = render.bounds || {
                        min: {
                            x: 0,
                            y: 0
                        },
                        max: {
                            x: render.canvas.width,
                            y: render.canvas.height
                        }
                    };
                    // for temporary back compatibility only
                    render.options.showBroadphase = false;
                    if (render.options.pixelRatio !== 1) Render.setPixelRatio(render, render.options.pixelRatio);
                    if (Common.isElement(render.element)) render.element.appendChild(render.canvas);
                    else if (!render.canvas.parentNode) Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');
                    return render;
                };
                /**
     * Continuously updates the render canvas on the `requestAnimationFrame` event.
     * @method run
     * @param {render} render
     */ Render.run = function(render) {
                    (function loop(time) {
                        render.frameRequestId = _requestAnimationFrame(loop);
                        _updateTiming(render, time);
                        Render.world(render, time);
                        if (render.options.showStats || render.options.showDebug) Render.stats(render, render.context, time);
                        if (render.options.showPerformance || render.options.showDebug) Render.performance(render, render.context, time);
                    })();
                };
                /**
     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.
     * @method stop
     * @param {render} render
     */ Render.stop = function(render) {
                    _cancelAnimationFrame(render.frameRequestId);
                };
                /**
     * Sets the pixel ratio of the renderer and updates the canvas.
     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.
     * @method setPixelRatio
     * @param {render} render
     * @param {number} pixelRatio
     */ Render.setPixelRatio = function(render, pixelRatio) {
                    var options = render.options, canvas = render.canvas;
                    if (pixelRatio === 'auto') pixelRatio = _getPixelRatio(canvas);
                    options.pixelRatio = pixelRatio;
                    canvas.setAttribute('data-pixel-ratio', pixelRatio);
                    canvas.width = options.width * pixelRatio;
                    canvas.height = options.height * pixelRatio;
                    canvas.style.width = options.width + 'px';
                    canvas.style.height = options.height + 'px';
                };
                /**
     * Positions and sizes the viewport around the given object bounds.
     * Objects must have at least one of the following properties:
     * - `object.bounds`
     * - `object.position`
     * - `object.min` and `object.max`
     * - `object.x` and `object.y`
     * @method lookAt
     * @param {render} render
     * @param {object[]} objects
     * @param {vector} [padding]
     * @param {bool} [center=true]
     */ Render.lookAt = function(render, objects, padding, center) {
                    center = typeof center !== 'undefined' ? center : true;
                    objects = Common.isArray(objects) ? objects : [
                        objects
                    ];
                    padding = padding || {
                        x: 0,
                        y: 0
                    };
                    // find bounds of all objects
                    var bounds = {
                        min: {
                            x: Infinity,
                            y: Infinity
                        },
                        max: {
                            x: -Infinity,
                            y: -Infinity
                        }
                    };
                    for(var i = 0; i < objects.length; i += 1){
                        var object = objects[i], min = object.bounds ? object.bounds.min : object.min || object.position || object, max = object.bounds ? object.bounds.max : object.max || object.position || object;
                        if (min && max) {
                            if (min.x < bounds.min.x) bounds.min.x = min.x;
                            if (max.x > bounds.max.x) bounds.max.x = max.x;
                            if (min.y < bounds.min.y) bounds.min.y = min.y;
                            if (max.y > bounds.max.y) bounds.max.y = max.y;
                        }
                    }
                    // find ratios
                    var width = bounds.max.x - bounds.min.x + 2 * padding.x, height = bounds.max.y - bounds.min.y + 2 * padding.y, viewHeight = render.canvas.height, viewWidth = render.canvas.width, outerRatio = viewWidth / viewHeight, innerRatio = width / height, scaleX = 1, scaleY = 1;
                    // find scale factor
                    if (innerRatio > outerRatio) scaleY = innerRatio / outerRatio;
                    else scaleX = outerRatio / innerRatio;
                    // enable bounds
                    render.options.hasBounds = true;
                    // position and size
                    render.bounds.min.x = bounds.min.x;
                    render.bounds.max.x = bounds.min.x + width * scaleX;
                    render.bounds.min.y = bounds.min.y;
                    render.bounds.max.y = bounds.min.y + height * scaleY;
                    // center
                    if (center) {
                        render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;
                        render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;
                        render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;
                        render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;
                    }
                    // padding
                    render.bounds.min.x -= padding.x;
                    render.bounds.max.x -= padding.x;
                    render.bounds.min.y -= padding.y;
                    render.bounds.max.y -= padding.y;
                    // update mouse
                    if (render.mouse) {
                        Mouse.setScale(render.mouse, {
                            x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,
                            y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height
                        });
                        Mouse.setOffset(render.mouse, render.bounds.min);
                    }
                };
                /**
     * Applies viewport transforms based on `render.bounds` to a render context.
     * @method startViewTransform
     * @param {render} render
     */ Render.startViewTransform = function(render) {
                    var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;
                    render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);
                    render.context.translate(-render.bounds.min.x, -render.bounds.min.y);
                };
                /**
     * Resets all transforms on the render context.
     * @method endViewTransform
     * @param {render} render
     */ Render.endViewTransform = function(render) {
                    render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);
                };
                /**
     * Renders the given `engine`'s `Matter.World` object.
     * This is the entry point for all rendering and should be called every time the scene changes.
     * @method world
     * @param {render} render
     */ Render.world = function(render, time) {
                    var startTime = Common.now(), engine = render.engine, world = engine.world, canvas = render.canvas, context = render.context, options = render.options, timing = render.timing;
                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world), background = options.wireframes ? options.wireframeBackground : options.background, bodies = [], constraints = [], i;
                    var event = {
                        timestamp: engine.timing.timestamp
                    };
                    Events.trigger(render, 'beforeRender', event);
                    // apply background if it has changed
                    if (render.currentBackground !== background) _applyBackground(render, background);
                    // clear the canvas with a transparent fill, to allow the canvas background to show
                    context.globalCompositeOperation = 'source-in';
                    context.fillStyle = "transparent";
                    context.fillRect(0, 0, canvas.width, canvas.height);
                    context.globalCompositeOperation = 'source-over';
                    // handle bounds
                    if (options.hasBounds) {
                        // filter out bodies that are not in view
                        for(i = 0; i < allBodies.length; i++){
                            var body = allBodies[i];
                            if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);
                        }
                        // filter out constraints that are not in view
                        for(i = 0; i < allConstraints.length; i++){
                            var constraint = allConstraints[i], bodyA = constraint.bodyA, bodyB = constraint.bodyB, pointAWorld = constraint.pointA, pointBWorld = constraint.pointB;
                            if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);
                            if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);
                            if (!pointAWorld || !pointBWorld) continue;
                            if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);
                        }
                        // transform the view
                        Render.startViewTransform(render);
                        // update mouse
                        if (render.mouse) {
                            Mouse.setScale(render.mouse, {
                                x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,
                                y: (render.bounds.max.y - render.bounds.min.y) / render.options.height
                            });
                            Mouse.setOffset(render.mouse, render.bounds.min);
                        }
                    } else {
                        constraints = allConstraints;
                        bodies = allBodies;
                        if (render.options.pixelRatio !== 1) render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);
                    }
                    if (!options.wireframes || engine.enableSleeping && options.showSleeping) // fully featured rendering of bodies
                    Render.bodies(render, bodies, context);
                    else {
                        if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);
                        // optimised method for wireframes only
                        Render.bodyWireframes(render, bodies, context);
                    }
                    if (options.showBounds) Render.bodyBounds(render, bodies, context);
                    if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);
                    if (options.showPositions) Render.bodyPositions(render, bodies, context);
                    if (options.showVelocity) Render.bodyVelocity(render, bodies, context);
                    if (options.showIds) Render.bodyIds(render, bodies, context);
                    if (options.showSeparations) Render.separations(render, engine.pairs.list, context);
                    if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);
                    if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);
                    if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);
                    Render.constraints(constraints, context);
                    if (options.hasBounds) // revert view transforms
                    Render.endViewTransform(render);
                    Events.trigger(render, 'afterRender', event);
                    // log the time elapsed computing this update
                    timing.lastElapsed = Common.now() - startTime;
                };
                /**
     * Renders statistics about the engine and world useful for debugging.
     * @private
     * @method stats
     * @param {render} render
     * @param {RenderingContext} context
     * @param {Number} time
     */ Render.stats = function(render, context, time) {
                    var engine = render.engine, world = engine.world, bodies = Composite.allBodies(world), parts = 0, width = 55, height = 44, x = 0, y = 0;
                    // count parts
                    for(var i = 0; i < bodies.length; i += 1)parts += bodies[i].parts.length;
                    // sections
                    var sections = {
                        'Part': parts,
                        'Body': bodies.length,
                        'Cons': Composite.allConstraints(world).length,
                        'Comp': Composite.allComposites(world).length,
                        'Pair': engine.pairs.list.length
                    };
                    // background
                    context.fillStyle = '#0e0f19';
                    context.fillRect(x, y, width * 5.5, height);
                    context.font = '12px Arial';
                    context.textBaseline = 'top';
                    context.textAlign = 'right';
                    // sections
                    for(var key in sections){
                        var section = sections[key];
                        // label
                        context.fillStyle = '#aaa';
                        context.fillText(key, x + width, y + 8);
                        // value
                        context.fillStyle = '#eee';
                        context.fillText(section, x + width, y + 26);
                        x += width;
                    }
                };
                /**
     * Renders engine and render performance information.
     * @private
     * @method performance
     * @param {render} render
     * @param {RenderingContext} context
     */ Render.performance = function(render, context) {
                    var engine = render.engine, timing = render.timing, deltaHistory = timing.deltaHistory, elapsedHistory = timing.elapsedHistory, timestampElapsedHistory = timing.timestampElapsedHistory, engineDeltaHistory = timing.engineDeltaHistory, engineElapsedHistory = timing.engineElapsedHistory, lastEngineDelta = engine.timing.lastDelta;
                    var deltaMean = _mean(deltaHistory), elapsedMean = _mean(elapsedHistory), engineDeltaMean = _mean(engineDeltaHistory), engineElapsedMean = _mean(engineElapsedHistory), timestampElapsedMean = _mean(timestampElapsedHistory), rateMean = timestampElapsedMean / deltaMean || 0, fps = 1000 / deltaMean || 0;
                    var graphHeight = 4, gap = 12, width = 60, height = 34, x = 10, y = 69;
                    // background
                    context.fillStyle = '#0e0f19';
                    context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);
                    // show FPS
                    Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + ' fps', fps / Render._goodFps, function(i) {
                        return deltaHistory[i] / deltaMean - 1;
                    });
                    // show engine delta
                    Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + ' dt', Render._goodDelta / lastEngineDelta, function(i) {
                        return engineDeltaHistory[i] / engineDeltaMean - 1;
                    });
                    // show engine update time
                    Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + ' ut', 1 - engineElapsedMean / Render._goodFps, function(i) {
                        return engineElapsedHistory[i] / engineElapsedMean - 1;
                    });
                    // show render time
                    Render.status(context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + ' rt', 1 - elapsedMean / Render._goodFps, function(i) {
                        return elapsedHistory[i] / elapsedMean - 1;
                    });
                    // show effective speed
                    Render.status(context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + ' x', rateMean * rateMean * rateMean, function(i) {
                        return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;
                    });
                };
                /**
     * Renders a label, indicator and a chart.
     * @private
     * @method status
     * @param {RenderingContext} context
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {number} count
     * @param {string} label
     * @param {string} indicator
     * @param {function} plotY
     */ Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {
                    // background
                    context.strokeStyle = '#888';
                    context.fillStyle = '#444';
                    context.lineWidth = 1;
                    context.fillRect(x, y + 7, width, 1);
                    // chart
                    context.beginPath();
                    context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));
                    for(var i = 0; i < width; i += 1)context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));
                    context.stroke();
                    // indicator
                    context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';
                    context.fillRect(x, y - 7, 4, 4);
                    // label
                    context.font = '12px Arial';
                    context.textBaseline = 'middle';
                    context.textAlign = 'right';
                    context.fillStyle = '#eee';
                    context.fillText(label, x + width, y - 5);
                };
                /**
     * Description
     * @private
     * @method constraints
     * @param {constraint[]} constraints
     * @param {RenderingContext} context
     */ Render.constraints = function(constraints, context) {
                    var c = context;
                    for(var i = 0; i < constraints.length; i++){
                        var constraint = constraints[i];
                        if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;
                        var bodyA = constraint.bodyA, bodyB = constraint.bodyB, start, end;
                        if (bodyA) start = Vector.add(bodyA.position, constraint.pointA);
                        else start = constraint.pointA;
                        if (constraint.render.type === 'pin') {
                            c.beginPath();
                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);
                            c.closePath();
                        } else {
                            if (bodyB) end = Vector.add(bodyB.position, constraint.pointB);
                            else end = constraint.pointB;
                            c.beginPath();
                            c.moveTo(start.x, start.y);
                            if (constraint.render.type === 'spring') {
                                var delta = Vector.sub(end, start), normal = Vector.perp(Vector.normalise(delta)), coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)), offset;
                                for(var j = 1; j < coils; j += 1){
                                    offset = j % 2 === 0 ? 1 : -1;
                                    c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);
                                }
                            }
                            c.lineTo(end.x, end.y);
                        }
                        if (constraint.render.lineWidth) {
                            c.lineWidth = constraint.render.lineWidth;
                            c.strokeStyle = constraint.render.strokeStyle;
                            c.stroke();
                        }
                        if (constraint.render.anchors) {
                            c.fillStyle = constraint.render.strokeStyle;
                            c.beginPath();
                            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);
                            c.arc(end.x, end.y, 3, 0, 2 * Math.PI);
                            c.closePath();
                            c.fill();
                        }
                    }
                };
                /**
     * Description
     * @private
     * @method bodies
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodies = function(render, bodies, context) {
                    var c = context, engine = render.engine, options = render.options, showInternalEdges = options.showInternalEdges || !options.wireframes, body, part, i, k;
                    for(i = 0; i < bodies.length; i++){
                        body = bodies[i];
                        if (!body.render.visible) continue;
                        // handle compound parts
                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){
                            part = body.parts[k];
                            if (!part.render.visible) continue;
                            if (options.showSleeping && body.isSleeping) c.globalAlpha = 0.5 * part.render.opacity;
                            else if (part.render.opacity !== 1) c.globalAlpha = part.render.opacity;
                            if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {
                                // part sprite
                                var sprite = part.render.sprite, texture = _getTexture(render, sprite.texture);
                                c.translate(part.position.x, part.position.y);
                                c.rotate(part.angle);
                                c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);
                                // revert translation, hopefully faster than save / restore
                                c.rotate(-part.angle);
                                c.translate(-part.position.x, -part.position.y);
                            } else {
                                // part polygon
                                if (part.circleRadius) {
                                    c.beginPath();
                                    c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);
                                } else {
                                    c.beginPath();
                                    c.moveTo(part.vertices[0].x, part.vertices[0].y);
                                    for(var j = 1; j < part.vertices.length; j++){
                                        if (!part.vertices[j - 1].isInternal || showInternalEdges) c.lineTo(part.vertices[j].x, part.vertices[j].y);
                                        else c.moveTo(part.vertices[j].x, part.vertices[j].y);
                                        if (part.vertices[j].isInternal && !showInternalEdges) c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);
                                    }
                                    c.lineTo(part.vertices[0].x, part.vertices[0].y);
                                    c.closePath();
                                }
                                if (!options.wireframes) {
                                    c.fillStyle = part.render.fillStyle;
                                    if (part.render.lineWidth) {
                                        c.lineWidth = part.render.lineWidth;
                                        c.strokeStyle = part.render.strokeStyle;
                                        c.stroke();
                                    }
                                    c.fill();
                                } else {
                                    c.lineWidth = 1;
                                    c.strokeStyle = '#bbb';
                                    c.stroke();
                                }
                            }
                            c.globalAlpha = 1;
                        }
                    }
                };
                /**
     * Optimised method for drawing body wireframes in one pass
     * @private
     * @method bodyWireframes
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyWireframes = function(render, bodies, context) {
                    var c = context, showInternalEdges = render.options.showInternalEdges, body, part, i, j, k;
                    c.beginPath();
                    // render all bodies
                    for(i = 0; i < bodies.length; i++){
                        body = bodies[i];
                        if (!body.render.visible) continue;
                        // handle compound parts
                        for(k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++){
                            part = body.parts[k];
                            c.moveTo(part.vertices[0].x, part.vertices[0].y);
                            for(j = 1; j < part.vertices.length; j++){
                                if (!part.vertices[j - 1].isInternal || showInternalEdges) c.lineTo(part.vertices[j].x, part.vertices[j].y);
                                else c.moveTo(part.vertices[j].x, part.vertices[j].y);
                                if (part.vertices[j].isInternal && !showInternalEdges) c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);
                            }
                            c.lineTo(part.vertices[0].x, part.vertices[0].y);
                        }
                    }
                    c.lineWidth = 1;
                    c.strokeStyle = '#bbb';
                    c.stroke();
                };
                /**
     * Optimised method for drawing body convex hull wireframes in one pass
     * @private
     * @method bodyConvexHulls
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyConvexHulls = function(render, bodies, context) {
                    var c = context, body, part, i, j, k;
                    c.beginPath();
                    // render convex hulls
                    for(i = 0; i < bodies.length; i++){
                        body = bodies[i];
                        if (!body.render.visible || body.parts.length === 1) continue;
                        c.moveTo(body.vertices[0].x, body.vertices[0].y);
                        for(j = 1; j < body.vertices.length; j++)c.lineTo(body.vertices[j].x, body.vertices[j].y);
                        c.lineTo(body.vertices[0].x, body.vertices[0].y);
                    }
                    c.lineWidth = 1;
                    c.strokeStyle = 'rgba(255,255,255,0.2)';
                    c.stroke();
                };
                /**
     * Renders body vertex numbers.
     * @private
     * @method vertexNumbers
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.vertexNumbers = function(render, bodies, context) {
                    var c = context, i, j, k;
                    for(i = 0; i < bodies.length; i++){
                        var parts = bodies[i].parts;
                        for(k = parts.length > 1 ? 1 : 0; k < parts.length; k++){
                            var part = parts[k];
                            for(j = 0; j < part.vertices.length; j++){
                                c.fillStyle = 'rgba(255,255,255,0.2)';
                                c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);
                            }
                        }
                    }
                };
                /**
     * Renders mouse position.
     * @private
     * @method mousePosition
     * @param {render} render
     * @param {mouse} mouse
     * @param {RenderingContext} context
     */ Render.mousePosition = function(render, mouse, context) {
                    var c = context;
                    c.fillStyle = 'rgba(255,255,255,0.8)';
                    c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);
                };
                /**
     * Draws body bounds
     * @private
     * @method bodyBounds
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyBounds = function(render, bodies, context) {
                    var c = context, engine = render.engine, options = render.options;
                    c.beginPath();
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (body.render.visible) {
                            var parts = bodies[i].parts;
                            for(var j = parts.length > 1 ? 1 : 0; j < parts.length; j++){
                                var part = parts[j];
                                c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);
                            }
                        }
                    }
                    if (options.wireframes) c.strokeStyle = 'rgba(255,255,255,0.08)';
                    else c.strokeStyle = 'rgba(0,0,0,0.1)';
                    c.lineWidth = 1;
                    c.stroke();
                };
                /**
     * Draws body angle indicators and axes
     * @private
     * @method bodyAxes
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyAxes = function(render, bodies, context) {
                    var c = context, engine = render.engine, options = render.options, part, i, j, k;
                    c.beginPath();
                    for(i = 0; i < bodies.length; i++){
                        var body = bodies[i], parts = body.parts;
                        if (!body.render.visible) continue;
                        if (options.showAxes) // render all axes
                        for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){
                            part = parts[j];
                            for(k = 0; k < part.axes.length; k++){
                                var axis = part.axes[k];
                                c.moveTo(part.position.x, part.position.y);
                                c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);
                            }
                        }
                        else for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){
                            part = parts[j];
                            for(k = 0; k < part.axes.length; k++){
                                // render a single axis indicator
                                c.moveTo(part.position.x, part.position.y);
                                c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);
                            }
                        }
                    }
                    if (options.wireframes) {
                        c.strokeStyle = 'indianred';
                        c.lineWidth = 1;
                    } else {
                        c.strokeStyle = 'rgba(255, 255, 255, 0.4)';
                        c.globalCompositeOperation = 'overlay';
                        c.lineWidth = 2;
                    }
                    c.stroke();
                    c.globalCompositeOperation = 'source-over';
                };
                /**
     * Draws body positions
     * @private
     * @method bodyPositions
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyPositions = function(render, bodies, context) {
                    var c = context, engine = render.engine, options = render.options, body, part, i, k;
                    c.beginPath();
                    // render current positions
                    for(i = 0; i < bodies.length; i++){
                        body = bodies[i];
                        if (!body.render.visible) continue;
                        // handle compound parts
                        for(k = 0; k < body.parts.length; k++){
                            part = body.parts[k];
                            c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);
                            c.closePath();
                        }
                    }
                    if (options.wireframes) c.fillStyle = 'indianred';
                    else c.fillStyle = 'rgba(0,0,0,0.5)';
                    c.fill();
                    c.beginPath();
                    // render previous positions
                    for(i = 0; i < bodies.length; i++){
                        body = bodies[i];
                        if (body.render.visible) {
                            c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);
                            c.closePath();
                        }
                    }
                    c.fillStyle = 'rgba(255,165,0,0.8)';
                    c.fill();
                };
                /**
     * Draws body velocity
     * @private
     * @method bodyVelocity
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyVelocity = function(render, bodies, context) {
                    var c = context;
                    c.beginPath();
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (!body.render.visible) continue;
                        c.moveTo(body.position.x, body.position.y);
                        c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);
                    }
                    c.lineWidth = 3;
                    c.strokeStyle = 'cornflowerblue';
                    c.stroke();
                };
                /**
     * Draws body ids
     * @private
     * @method bodyIds
     * @param {render} render
     * @param {body[]} bodies
     * @param {RenderingContext} context
     */ Render.bodyIds = function(render, bodies, context) {
                    var c = context, i, j;
                    for(i = 0; i < bodies.length; i++){
                        if (!bodies[i].render.visible) continue;
                        var parts = bodies[i].parts;
                        for(j = parts.length > 1 ? 1 : 0; j < parts.length; j++){
                            var part = parts[j];
                            c.font = "12px Arial";
                            c.fillStyle = 'rgba(255,255,255,0.5)';
                            c.fillText(part.id, part.position.x + 10, part.position.y - 10);
                        }
                    }
                };
                /**
     * Description
     * @private
     * @method collisions
     * @param {render} render
     * @param {pair[]} pairs
     * @param {RenderingContext} context
     */ Render.collisions = function(render, pairs, context) {
                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;
                    c.beginPath();
                    // render collision positions
                    for(i = 0; i < pairs.length; i++){
                        pair = pairs[i];
                        if (!pair.isActive) continue;
                        collision = pair.collision;
                        for(j = 0; j < pair.activeContacts.length; j++){
                            var contact = pair.activeContacts[j], vertex = contact.vertex;
                            c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);
                        }
                    }
                    if (options.wireframes) c.fillStyle = 'rgba(255,255,255,0.7)';
                    else c.fillStyle = 'orange';
                    c.fill();
                    c.beginPath();
                    // render collision normals
                    for(i = 0; i < pairs.length; i++){
                        pair = pairs[i];
                        if (!pair.isActive) continue;
                        collision = pair.collision;
                        if (pair.activeContacts.length > 0) {
                            var normalPosX = pair.activeContacts[0].vertex.x, normalPosY = pair.activeContacts[0].vertex.y;
                            if (pair.activeContacts.length === 2) {
                                normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;
                                normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;
                            }
                            if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);
                            else c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);
                            c.lineTo(normalPosX, normalPosY);
                        }
                    }
                    if (options.wireframes) c.strokeStyle = 'rgba(255,165,0,0.7)';
                    else c.strokeStyle = 'orange';
                    c.lineWidth = 1;
                    c.stroke();
                };
                /**
     * Description
     * @private
     * @method separations
     * @param {render} render
     * @param {pair[]} pairs
     * @param {RenderingContext} context
     */ Render.separations = function(render, pairs, context) {
                    var c = context, options = render.options, pair, collision, corrected, bodyA, bodyB, i, j;
                    c.beginPath();
                    // render separations
                    for(i = 0; i < pairs.length; i++){
                        pair = pairs[i];
                        if (!pair.isActive) continue;
                        collision = pair.collision;
                        bodyA = collision.bodyA;
                        bodyB = collision.bodyB;
                        var k = 1;
                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;
                        if (bodyB.isStatic) k = 0;
                        c.moveTo(bodyB.position.x, bodyB.position.y);
                        c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);
                        k = 1;
                        if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;
                        if (bodyA.isStatic) k = 0;
                        c.moveTo(bodyA.position.x, bodyA.position.y);
                        c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);
                    }
                    if (options.wireframes) c.strokeStyle = 'rgba(255,165,0,0.5)';
                    else c.strokeStyle = 'orange';
                    c.stroke();
                };
                /**
     * Description
     * @private
     * @method inspector
     * @param {inspector} inspector
     * @param {RenderingContext} context
     */ Render.inspector = function(inspector, context) {
                    var engine = inspector.engine, selected = inspector.selected, render = inspector.render, options = render.options, bounds;
                    if (options.hasBounds) {
                        var boundsWidth = render.bounds.max.x - render.bounds.min.x, boundsHeight = render.bounds.max.y - render.bounds.min.y, boundsScaleX = boundsWidth / render.options.width, boundsScaleY = boundsHeight / render.options.height;
                        context.scale(1 / boundsScaleX, 1 / boundsScaleY);
                        context.translate(-render.bounds.min.x, -render.bounds.min.y);
                    }
                    for(var i = 0; i < selected.length; i++){
                        var item = selected[i].data;
                        context.translate(0.5, 0.5);
                        context.lineWidth = 1;
                        context.strokeStyle = 'rgba(255,165,0,0.9)';
                        context.setLineDash([
                            1,
                            2
                        ]);
                        switch(item.type){
                            case 'body':
                                // render body selections
                                bounds = item.bounds;
                                context.beginPath();
                                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));
                                context.closePath();
                                context.stroke();
                                break;
                            case 'constraint':
                                // render constraint selections
                                var point = item.pointA;
                                if (item.bodyA) point = item.pointB;
                                context.beginPath();
                                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);
                                context.closePath();
                                context.stroke();
                                break;
                        }
                        context.setLineDash([]);
                        context.translate(-0.5, -0.5);
                    }
                    // render selection region
                    if (inspector.selectStart !== null) {
                        context.translate(0.5, 0.5);
                        context.lineWidth = 1;
                        context.strokeStyle = 'rgba(255,165,0,0.6)';
                        context.fillStyle = 'rgba(255,165,0,0.1)';
                        bounds = inspector.selectBounds;
                        context.beginPath();
                        context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));
                        context.closePath();
                        context.stroke();
                        context.fill();
                        context.translate(-0.5, -0.5);
                    }
                    if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);
                };
                /**
     * Updates render timing.
     * @method _updateTiming
     * @private
     * @param {render} render
     * @param {number} time
     */ var _updateTiming = function(render, time) {
                    var engine = render.engine, timing = render.timing, historySize = timing.historySize, timestamp = engine.timing.timestamp;
                    timing.delta = time - timing.lastTime || Render._goodDelta;
                    timing.lastTime = time;
                    timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;
                    timing.lastTimestamp = timestamp;
                    timing.deltaHistory.unshift(timing.delta);
                    timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);
                    timing.engineDeltaHistory.unshift(engine.timing.lastDelta);
                    timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);
                    timing.timestampElapsedHistory.unshift(timing.timestampElapsed);
                    timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);
                    timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);
                    timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);
                    timing.elapsedHistory.unshift(timing.lastElapsed);
                    timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);
                };
                /**
     * Returns the mean value of the given numbers.
     * @method _mean
     * @private
     * @param {Number[]} values
     * @return {Number} the mean of given values
     */ var _mean = function(values) {
                    var result = 0;
                    for(var i = 0; i < values.length; i += 1)result += values[i];
                    return result / values.length || 0;
                };
                /**
     * @method _createCanvas
     * @private
     * @param {} width
     * @param {} height
     * @return canvas
     */ var _createCanvas = function(width, height) {
                    var canvas = document.createElement('canvas');
                    canvas.width = width;
                    canvas.height = height;
                    canvas.oncontextmenu = function() {
                        return false;
                    };
                    canvas.onselectstart = function() {
                        return false;
                    };
                    return canvas;
                };
                /**
     * Gets the pixel ratio of the canvas.
     * @method _getPixelRatio
     * @private
     * @param {HTMLElement} canvas
     * @return {Number} pixel ratio
     */ var _getPixelRatio = function(canvas) {
                    var context = canvas.getContext('2d'), devicePixelRatio = window.devicePixelRatio || 1, backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
                    return devicePixelRatio / backingStorePixelRatio;
                };
                /**
     * Gets the requested texture (an Image) via its path
     * @method _getTexture
     * @private
     * @param {render} render
     * @param {string} imagePath
     * @return {Image} texture
     */ var _getTexture = function(render, imagePath) {
                    var image = render.textures[imagePath];
                    if (image) return image;
                    image = render.textures[imagePath] = new Image();
                    image.src = imagePath;
                    return image;
                };
                /**
     * Applies the background to the canvas using CSS.
     * @method applyBackground
     * @private
     * @param {render} render
     * @param {string} background
     */ var _applyBackground = function(render, background) {
                    var cssBackground = background;
                    if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';
                    render.canvas.style.background = cssBackground;
                    render.canvas.style.backgroundSize = "contain";
                    render.currentBackground = background;
                };
            /*
    *
    *  Events Documentation
    *
    */ /**
    * Fired before rendering
    *
    * @event beforeRender
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired after rendering
    *
    * @event afterRender
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * A back-reference to the `Matter.Render` module.
     *
     * @property controller
     * @type render
     */ /**
     * A reference to the `Matter.Engine` instance to be used.
     *
     * @property engine
     * @type engine
     */ /**
     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)
     *
     * @property element
     * @type HTMLElement
     * @default null
     */ /**
     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.
     *
     * @property canvas
     * @type HTMLCanvasElement
     * @default null
     */ /**
     * A `Bounds` object that specifies the drawing view region.
     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).
     * This allows for creating views that can pan or zoom around the scene.
     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.
     *
     * @property bounds
     * @type bounds
     */ /**
     * The 2d rendering context from the `render.canvas` element.
     *
     * @property context
     * @type CanvasRenderingContext2D
     */ /**
     * The sprite texture cache.
     *
     * @property textures
     * @type {}
     */ /**
     * The mouse to render if `render.options.showMousePosition` is enabled.
     *
     * @property mouse
     * @type mouse
     * @default null
     */ /**
     * The configuration options of the renderer.
     *
     * @property options
     * @type {}
     */ /**
     * The target width in pixels of the `render.canvas` to be created.
     * See also the `options.pixelRatio` property to change render quality.
     *
     * @property options.width
     * @type number
     * @default 800
     */ /**
     * The target height in pixels of the `render.canvas` to be created.
     * See also the `options.pixelRatio` property to change render quality.
     *
     * @property options.height
     * @type number
     * @default 600
     */ /**
     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.
     *
     * @property options.pixelRatio
     * @type number
     * @default 1
     */ /**
     * A CSS background color string to use when `render.options.wireframes` is disabled.
     * This may be also set to `'transparent'` or equivalent.
     *
     * @property options.background
     * @type string
     * @default '#14151f'
     */ /**
     * A CSS background color string to use when `render.options.wireframes` is enabled.
     * This may be also set to `'transparent'` or equivalent.
     *
     * @property options.wireframeBackground
     * @type string
     * @default '#14151f'
     */ /**
     * A flag that specifies if `render.bounds` should be used when rendering.
     *
     * @property options.hasBounds
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable all debug information overlays together.  
     * This includes and has priority over the values of:
     *
     * - `render.options.showStats`
     * - `render.options.showPerformance`
     *
     * @property options.showDebug
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the engine stats info overlay.  
     * From left to right, the values shown are:
     *
     * - body parts total
     * - body total
     * - constraints total
     * - composites total
     * - collision pairs total
     *
     * @property options.showStats
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable performance charts.  
     * From left to right, the values shown are:
     *
     * - average render frequency (e.g. 60 fps)
     * - exact engine delta time used for last update (e.g. 16.66ms)
     * - average engine execution duration (e.g. 5.00ms)
     * - average render execution duration (e.g. 0.40ms)
     * - average effective play speed (e.g. '1.00x' is 'real-time')
     *
     * Each value is recorded over a fixed sample of past frames (60 frames).
     *
     * A chart shown below each value indicates the variance from the average over the sample.
     * The more stable or fixed the value is the flatter the chart will appear.
     *
     * @property options.showPerformance
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable rendering entirely.
     *
     * @property options.enabled
     * @type boolean
     * @default false
     */ /**
     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.
     *
     * @property options.wireframes
     * @type boolean
     * @default true
     */ /**
     * A flag to enable or disable sleeping bodies indicators.
     *
     * @property options.showSleeping
     * @type boolean
     * @default true
     */ /**
     * A flag to enable or disable the debug information overlay.
     *
     * @property options.showDebug
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the collision broadphase debug overlay.
     *
     * @deprecated no longer implemented
     * @property options.showBroadphase
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body bounds debug overlay.
     *
     * @property options.showBounds
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body velocity debug overlay.
     *
     * @property options.showVelocity
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body collisions debug overlay.
     *
     * @property options.showCollisions
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the collision resolver separations debug overlay.
     *
     * @property options.showSeparations
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body axes debug overlay.
     *
     * @property options.showAxes
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body positions debug overlay.
     *
     * @property options.showPositions
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body angle debug overlay.
     *
     * @property options.showAngleIndicator
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body and part ids debug overlay.
     *
     * @property options.showIds
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body vertex numbers debug overlay.
     *
     * @property options.showVertexNumbers
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body convex hulls debug overlay.
     *
     * @property options.showConvexHulls
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the body internal edges debug overlay.
     *
     * @property options.showInternalEdges
     * @type boolean
     * @default false
     */ /**
     * A flag to enable or disable the mouse position debug overlay.
     *
     * @property options.showMousePosition
     * @type boolean
     * @default false
     */ })();
        /***/ },
        function(module, exports) {
            /**
* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.
*
* @class Contact
*/ var Contact = {
            };
            module.exports = Contact;
            (function() {
                /**
     * Creates a new contact.
     * @method create
     * @param {vertex} vertex
     * @return {contact} A new contact
     */ Contact.create = function(vertex) {
                    return {
                        vertex: vertex,
                        normalImpulse: 0,
                        tangentImpulse: 0
                    };
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Engine` module contains methods for creating and manipulating engines.
* An engine is a controller that manages updating the simulation of the world.
* See `Matter.Runner` for an optional game loop utility.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Engine
*/ var Engine = {
            };
            module.exports = Engine;
            var Sleeping = __webpack_require__(7);
            var Resolver = __webpack_require__(19);
            var Detector = __webpack_require__(14);
            var Pairs = __webpack_require__(20);
            var Events = __webpack_require__(4);
            var Composite = __webpack_require__(5);
            var Constraint = __webpack_require__(10);
            var Common = __webpack_require__(0);
            var Body = __webpack_require__(6);
            (function() {
                /**
     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.
     * All properties have default values, and many are pre-calculated automatically based on other properties.
     * See the properties section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {object} [options]
     * @return {engine} engine
     */ Engine.create = function(options) {
                    options = options || {
                    };
                    var defaults = {
                        positionIterations: 6,
                        velocityIterations: 4,
                        constraintIterations: 2,
                        enableSleeping: false,
                        events: [],
                        plugin: {
                        },
                        gravity: {
                            x: 0,
                            y: 1,
                            scale: 0.001
                        },
                        timing: {
                            timestamp: 0,
                            timeScale: 1,
                            lastDelta: 0,
                            lastElapsed: 0
                        }
                    };
                    var engine = Common.extend(defaults, options);
                    engine.world = options.world || Composite.create({
                        label: 'World'
                    });
                    engine.pairs = options.pairs || Pairs.create();
                    engine.detector = options.detector || Detector.create();
                    // for temporary back compatibility only
                    engine.grid = {
                        buckets: []
                    };
                    engine.world.gravity = engine.gravity;
                    engine.broadphase = engine.grid;
                    engine.metrics = {
                    };
                    return engine;
                };
                /**
     * Moves the simulation forward in time by `delta` ms.
     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.
     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.
     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.
     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).
     * See the paper on <a href="http://lonesock.net/article/verlet.html">Time Corrected Verlet</a> for more information.
     *
     * Triggers `beforeUpdate` and `afterUpdate` events.
     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.
     * @method update
     * @param {engine} engine
     * @param {number} [delta=16.666]
     * @param {number} [correction=1]
     */ Engine.update = function(engine, delta, correction) {
                    var startTime = Common.now();
                    delta = delta || 1000 / 60;
                    correction = correction || 1;
                    var world = engine.world, detector = engine.detector, pairs = engine.pairs, timing = engine.timing, timestamp = timing.timestamp, i;
                    // increment timestamp
                    timing.timestamp += delta * timing.timeScale;
                    timing.lastDelta = delta * timing.timeScale;
                    // create an event object
                    var event = {
                        timestamp: timing.timestamp
                    };
                    Events.trigger(engine, 'beforeUpdate', event);
                    // get all bodies and all constraints in the world
                    var allBodies = Composite.allBodies(world), allConstraints = Composite.allConstraints(world);
                    // update the detector bodies if they have changed
                    if (world.isModified) Detector.setBodies(detector, allBodies);
                    // reset all composite modified flags
                    if (world.isModified) Composite.setModified(world, false, false, true);
                    // update sleeping if enabled
                    if (engine.enableSleeping) Sleeping.update(allBodies, timing.timeScale);
                    // apply gravity to all bodies
                    Engine._bodiesApplyGravity(allBodies, engine.gravity);
                    // update all body position and rotation by integration
                    Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);
                    // update all constraints (first pass)
                    Constraint.preSolveAll(allBodies);
                    for(i = 0; i < engine.constraintIterations; i++)Constraint.solveAll(allConstraints, timing.timeScale);
                    Constraint.postSolveAll(allBodies);
                    // find all collisions
                    detector.pairs = engine.pairs;
                    var collisions = Detector.collisions(detector);
                    // update collision pairs
                    Pairs.update(pairs, collisions, timestamp);
                    // wake up bodies involved in collisions
                    if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list, timing.timeScale);
                    // trigger collision events
                    if (pairs.collisionStart.length > 0) Events.trigger(engine, 'collisionStart', {
                        pairs: pairs.collisionStart
                    });
                    // iteratively resolve position between collisions
                    Resolver.preSolvePosition(pairs.list);
                    for(i = 0; i < engine.positionIterations; i++)Resolver.solvePosition(pairs.list, timing.timeScale);
                    Resolver.postSolvePosition(allBodies);
                    // update all constraints (second pass)
                    Constraint.preSolveAll(allBodies);
                    for(i = 0; i < engine.constraintIterations; i++)Constraint.solveAll(allConstraints, timing.timeScale);
                    Constraint.postSolveAll(allBodies);
                    // iteratively resolve velocity between collisions
                    Resolver.preSolveVelocity(pairs.list);
                    for(i = 0; i < engine.velocityIterations; i++)Resolver.solveVelocity(pairs.list, timing.timeScale);
                    // trigger collision events
                    if (pairs.collisionActive.length > 0) Events.trigger(engine, 'collisionActive', {
                        pairs: pairs.collisionActive
                    });
                    if (pairs.collisionEnd.length > 0) Events.trigger(engine, 'collisionEnd', {
                        pairs: pairs.collisionEnd
                    });
                    // clear force buffers
                    Engine._bodiesClearForces(allBodies);
                    Events.trigger(engine, 'afterUpdate', event);
                    // log the time elapsed computing this update
                    engine.timing.lastElapsed = Common.now() - startTime;
                    return engine;
                };
                /**
     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.
     * @method merge
     * @param {engine} engineA
     * @param {engine} engineB
     */ Engine.merge = function(engineA, engineB) {
                    Common.extend(engineA, engineB);
                    if (engineB.world) {
                        engineA.world = engineB.world;
                        Engine.clear(engineA);
                        var bodies = Composite.allBodies(engineA.world);
                        for(var i = 0; i < bodies.length; i++){
                            var body = bodies[i];
                            Sleeping.set(body, false);
                            body.id = Common.nextId();
                        }
                    }
                };
                /**
     * Clears the engine pairs and detector.
     * @method clear
     * @param {engine} engine
     */ Engine.clear = function(engine) {
                    Pairs.clear(engine.pairs);
                    Detector.clear(engine.detector);
                };
                /**
     * Zeroes the `body.force` and `body.torque` force buffers.
     * @method _bodiesClearForces
     * @private
     * @param {body[]} bodies
     */ Engine._bodiesClearForces = function(bodies) {
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        // reset force buffers
                        body.force.x = 0;
                        body.force.y = 0;
                        body.torque = 0;
                    }
                };
                /**
     * Applys a mass dependant force to all given bodies.
     * @method _bodiesApplyGravity
     * @private
     * @param {body[]} bodies
     * @param {vector} gravity
     */ Engine._bodiesApplyGravity = function(bodies, gravity) {
                    var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;
                    if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) return;
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (body.isStatic || body.isSleeping) continue;
                        // apply gravity
                        body.force.y += body.mass * gravity.y * gravityScale;
                        body.force.x += body.mass * gravity.x * gravityScale;
                    }
                };
                /**
     * Applys `Body.update` to all given `bodies`.
     * @method _bodiesUpdate
     * @private
     * @param {body[]} bodies
     * @param {number} deltaTime 
     * The amount of time elapsed between updates
     * @param {number} timeScale
     * @param {number} correction 
     * The Verlet correction factor (deltaTime / lastDeltaTime)
     * @param {bounds} worldBounds
     */ Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (body.isStatic || body.isSleeping) continue;
                        Body.update(body, deltaTime, timeScale, correction);
                    }
                };
            /**
     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.
     * @deprecated use Matter.Runner.run(engine) instead
     * @method run
     * @param {engine} engine
     */ /**
    * Fired just before an update
    *
    * @event beforeUpdate
    * @param {object} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {engine} event.source The source object of the event
    * @param {string} event.name The name of the event
    */ /**
    * Fired after engine update and all collision events
    *
    * @event afterUpdate
    * @param {object} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {engine} event.source The source object of the event
    * @param {string} event.name The name of the event
    */ /**
    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)
    *
    * @event collisionStart
    * @param {object} event An event object
    * @param {pair[]} event.pairs List of affected pairs
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {engine} event.source The source object of the event
    * @param {string} event.name The name of the event
    */ /**
    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)
    *
    * @event collisionActive
    * @param {object} event An event object
    * @param {pair[]} event.pairs List of affected pairs
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {engine} event.source The source object of the event
    * @param {string} event.name The name of the event
    */ /**
    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)
    *
    * @event collisionEnd
    * @param {object} event An event object
    * @param {pair[]} event.pairs List of affected pairs
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {engine} event.source The source object of the event
    * @param {string} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * An integer `Number` that specifies the number of position iterations to perform each update.
     * The higher the value, the higher quality the simulation will be at the expense of performance.
     *
     * @property positionIterations
     * @type number
     * @default 6
     */ /**
     * An integer `Number` that specifies the number of velocity iterations to perform each update.
     * The higher the value, the higher quality the simulation will be at the expense of performance.
     *
     * @property velocityIterations
     * @type number
     * @default 4
     */ /**
     * An integer `Number` that specifies the number of constraint iterations to perform each update.
     * The higher the value, the higher quality the simulation will be at the expense of performance.
     * The default value of `2` is usually very adequate.
     *
     * @property constraintIterations
     * @type number
     * @default 2
     */ /**
     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.
     * Sleeping can improve stability and performance, but often at the expense of accuracy.
     *
     * @property enableSleeping
     * @type boolean
     * @default false
     */ /**
     * An `Object` containing properties regarding the timing systems of the engine. 
     *
     * @property timing
     * @type object
     */ /**
     * A `Number` that specifies the global scaling factor of time for all bodies.
     * A value of `0` freezes the simulation.
     * A value of `0.1` gives a slow-motion effect.
     * A value of `1.2` gives a speed-up effect.
     *
     * @property timing.timeScale
     * @type number
     * @default 1
     */ /**
     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. 
     * It is incremented on every `Engine.update` by the given `delta` argument. 
     *
     * @property timing.timestamp
     * @type number
     * @default 0
     */ /**
     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.
     * It is updated by timing from the start of the last `Engine.update` call until it ends.
     *
     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.
     *
     * @property timing.lastElapsed
     * @type number
     * @default 0
     */ /**
     * A `Number` that represents the `delta` value used in the last engine update.
     *
     * @property timing.lastDelta
     * @type number
     * @default 0
     */ /**
     * A `Matter.Detector` instance.
     *
     * @property detector
     * @type detector
     * @default a Matter.Detector instance
     */ /**
     * A `Matter.Grid` instance.
     *
     * @deprecated replaced by `engine.detector`
     * @property grid
     * @type grid
     * @default a Matter.Grid instance
     */ /**
     * Replaced by and now alias for `engine.grid`.
     *
     * @deprecated replaced by `engine.detector`
     * @property broadphase
     * @type grid
     * @default a Matter.Grid instance
     */ /**
     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.
     *
     * @property world
     * @type composite
     * @default a Matter.Composite instance
     */ /**
     * An object reserved for storing plugin-specific properties.
     *
     * @property plugin
     * @type {}
     */ /**
     * The gravity to apply on all bodies in `engine.world`.
     *
     * @property gravity
     * @type object
     */ /**
     * The gravity x component.
     *
     * @property gravity.x
     * @type object
     * @default 0
     */ /**
     * The gravity y component.
     *
     * @property gravity.y
     * @type object
     * @default 1
     */ /**
     * The gravity scale factor.
     *
     * @property gravity.scale
     * @type object
     * @default 0.001
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Resolver` module contains methods for resolving collision pairs.
*
* @class Resolver
*/ var Resolver = {
            };
            module.exports = Resolver;
            var Vertices = __webpack_require__(3);
            var Bounds = __webpack_require__(1);
            (function() {
                Resolver._restingThresh = 4;
                Resolver._restingThreshTangent = 6;
                Resolver._positionDampen = 0.9;
                Resolver._positionWarming = 0.8;
                Resolver._frictionNormalMultiplier = 5;
                /**
     * Prepare pairs for position solving.
     * @method preSolvePosition
     * @param {pair[]} pairs
     */ Resolver.preSolvePosition = function(pairs) {
                    var i, pair, activeCount, pairsLength = pairs.length;
                    // find total contacts on each body
                    for(i = 0; i < pairsLength; i++){
                        pair = pairs[i];
                        if (!pair.isActive) continue;
                        activeCount = pair.activeContacts.length;
                        pair.collision.parentA.totalContacts += activeCount;
                        pair.collision.parentB.totalContacts += activeCount;
                    }
                };
                /**
     * Find a solution for pair positions.
     * @method solvePosition
     * @param {pair[]} pairs
     * @param {number} timeScale
     */ Resolver.solvePosition = function(pairs, timeScale) {
                    var i, pair, collision, bodyA, bodyB, normal, contactShare, positionImpulse, positionDampen = Resolver._positionDampen, pairsLength = pairs.length;
                    // find impulses required to resolve penetration
                    for(i = 0; i < pairsLength; i++){
                        pair = pairs[i];
                        if (!pair.isActive || pair.isSensor) continue;
                        collision = pair.collision;
                        bodyA = collision.parentA;
                        bodyB = collision.parentB;
                        normal = collision.normal;
                        // get current separation between body edges involved in collision
                        pair.separation = normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);
                    }
                    for(i = 0; i < pairsLength; i++){
                        pair = pairs[i];
                        if (!pair.isActive || pair.isSensor) continue;
                        collision = pair.collision;
                        bodyA = collision.parentA;
                        bodyB = collision.parentB;
                        normal = collision.normal;
                        positionImpulse = (pair.separation - pair.slop) * timeScale;
                        if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;
                        if (!(bodyA.isStatic || bodyA.isSleeping)) {
                            contactShare = positionDampen / bodyA.totalContacts;
                            bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;
                            bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;
                        }
                        if (!(bodyB.isStatic || bodyB.isSleeping)) {
                            contactShare = positionDampen / bodyB.totalContacts;
                            bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;
                            bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;
                        }
                    }
                };
                /**
     * Apply position resolution.
     * @method postSolvePosition
     * @param {body[]} bodies
     */ Resolver.postSolvePosition = function(bodies) {
                    var positionWarming = Resolver._positionWarming, bodiesLength = bodies.length, verticesTranslate = Vertices.translate, boundsUpdate = Bounds.update;
                    for(var i = 0; i < bodiesLength; i++){
                        var body = bodies[i], positionImpulse = body.positionImpulse, positionImpulseX = positionImpulse.x, positionImpulseY = positionImpulse.y, velocity = body.velocity;
                        // reset contact count
                        body.totalContacts = 0;
                        if (positionImpulseX !== 0 || positionImpulseY !== 0) {
                            // update body geometry
                            for(var j = 0; j < body.parts.length; j++){
                                var part = body.parts[j];
                                verticesTranslate(part.vertices, positionImpulse);
                                boundsUpdate(part.bounds, part.vertices, velocity);
                                part.position.x += positionImpulseX;
                                part.position.y += positionImpulseY;
                            }
                            // move the body without changing velocity
                            body.positionPrev.x += positionImpulseX;
                            body.positionPrev.y += positionImpulseY;
                            if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {
                                // reset cached impulse if the body has velocity along it
                                positionImpulse.x = 0;
                                positionImpulse.y = 0;
                            } else {
                                // warm the next iteration
                                positionImpulse.x *= positionWarming;
                                positionImpulse.y *= positionWarming;
                            }
                        }
                    }
                };
                /**
     * Prepare pairs for velocity solving.
     * @method preSolveVelocity
     * @param {pair[]} pairs
     */ Resolver.preSolveVelocity = function(pairs) {
                    var pairsLength = pairs.length, i, j;
                    for(i = 0; i < pairsLength; i++){
                        var pair = pairs[i];
                        if (!pair.isActive || pair.isSensor) continue;
                        var contacts = pair.activeContacts, contactsLength = contacts.length, collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, normal = collision.normal, tangent = collision.tangent;
                        // resolve each contact
                        for(j = 0; j < contactsLength; j++){
                            var contact = contacts[j], contactVertex = contact.vertex, normalImpulse = contact.normalImpulse, tangentImpulse = contact.tangentImpulse;
                            if (normalImpulse !== 0 || tangentImpulse !== 0) {
                                // total impulse from contact
                                var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse, impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;
                                // apply impulse from contact
                                if (!(bodyA.isStatic || bodyA.isSleeping)) {
                                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;
                                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;
                                    bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);
                                }
                                if (!(bodyB.isStatic || bodyB.isSleeping)) {
                                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;
                                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;
                                    bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);
                                }
                            }
                        }
                    }
                };
                /**
     * Find a solution for pair velocities.
     * @method solveVelocity
     * @param {pair[]} pairs
     * @param {number} timeScale
     */ Resolver.solveVelocity = function(pairs, timeScale) {
                    var timeScaleSquared = timeScale * timeScale, restingThresh = Resolver._restingThresh * timeScaleSquared, frictionNormalMultiplier = Resolver._frictionNormalMultiplier, restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared, NumberMaxValue = Number.MAX_VALUE, pairsLength = pairs.length, tangentImpulse, maxFriction, i, j;
                    for(i = 0; i < pairsLength; i++){
                        var pair = pairs[i];
                        if (!pair.isActive || pair.isSensor) continue;
                        var collision = pair.collision, bodyA = collision.parentA, bodyB = collision.parentB, bodyAVelocity = bodyA.velocity, bodyBVelocity = bodyB.velocity, normalX = collision.normal.x, normalY = collision.normal.y, tangentX = collision.tangent.x, tangentY = collision.tangent.y, contacts = pair.activeContacts, contactsLength = contacts.length, contactShare = 1 / contactsLength, inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass, friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;
                        // update body velocities
                        bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;
                        bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;
                        bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;
                        bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;
                        bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;
                        bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;
                        // resolve each contact
                        for(j = 0; j < contactsLength; j++){
                            var contact = contacts[j], contactVertex = contact.vertex;
                            var offsetAX = contactVertex.x - bodyA.position.x, offsetAY = contactVertex.y - bodyA.position.y, offsetBX = contactVertex.x - bodyB.position.x, offsetBY = contactVertex.y - bodyB.position.y;
                            var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity, velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity, velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity, velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;
                            var relativeVelocityX = velocityPointAX - velocityPointBX, relativeVelocityY = velocityPointAY - velocityPointBY;
                            var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY, tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;
                            // coulomb friction
                            var normalOverlap = pair.separation + normalVelocity;
                            var normalForce = Math.min(normalOverlap, 1);
                            normalForce = normalOverlap < 0 ? 0 : normalForce;
                            var frictionLimit = normalForce * friction;
                            if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {
                                maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;
                                tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;
                                if (tangentImpulse < -maxFriction) tangentImpulse = -maxFriction;
                                else if (tangentImpulse > maxFriction) tangentImpulse = maxFriction;
                            } else {
                                tangentImpulse = tangentVelocity;
                                maxFriction = NumberMaxValue;
                            }
                            // account for mass, inertia and contact offset
                            var oAcN = offsetAX * normalY - offsetAY * normalX, oBcN = offsetBX * normalY - offsetBY * normalX, share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);
                            // raw impulses
                            var normalImpulse = (1 + pair.restitution) * normalVelocity * share;
                            tangentImpulse *= share;
                            // handle high velocity and resting collisions separately
                            if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) // high normal velocity so clear cached contact normal impulse
                            contact.normalImpulse = 0;
                            else {
                                // solve resting collision constraints using Erin Catto's method (GDC08)
                                // impulse constraint tends to 0
                                var contactNormalImpulse = contact.normalImpulse;
                                contact.normalImpulse += normalImpulse;
                                contact.normalImpulse = Math.min(contact.normalImpulse, 0);
                                normalImpulse = contact.normalImpulse - contactNormalImpulse;
                            }
                            // handle high velocity and resting collisions separately
                            if (tangentVelocity * tangentVelocity > restingThreshTangent) // high tangent velocity so clear cached contact tangent impulse
                            contact.tangentImpulse = 0;
                            else {
                                // solve resting collision constraints using Erin Catto's method (GDC08)
                                // tangent impulse tends to -tangentSpeed or +tangentSpeed
                                var contactTangentImpulse = contact.tangentImpulse;
                                contact.tangentImpulse += tangentImpulse;
                                if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;
                                if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;
                                tangentImpulse = contact.tangentImpulse - contactTangentImpulse;
                            }
                            // total impulse from contact
                            var impulseX = normalX * normalImpulse + tangentX * tangentImpulse, impulseY = normalY * normalImpulse + tangentY * tangentImpulse;
                            // apply impulse from contact
                            if (!(bodyA.isStatic || bodyA.isSleeping)) {
                                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;
                                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;
                                bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;
                            }
                            if (!(bodyB.isStatic || bodyB.isSleeping)) {
                                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;
                                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;
                                bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;
                            }
                        }
                    }
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.
*
* @class Pairs
*/ var Pairs = {
            };
            module.exports = Pairs;
            var Pair = __webpack_require__(9);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Creates a new pairs structure.
     * @method create
     * @param {object} options
     * @return {pairs} A new pairs structure
     */ Pairs.create = function(options) {
                    return Common.extend({
                        table: {
                        },
                        list: [],
                        collisionStart: [],
                        collisionActive: [],
                        collisionEnd: []
                    }, options);
                };
                /**
     * Updates pairs given a list of collisions.
     * @method update
     * @param {object} pairs
     * @param {collision[]} collisions
     * @param {number} timestamp
     */ Pairs.update = function(pairs, collisions, timestamp) {
                    var pairsList = pairs.list, pairsListLength = pairsList.length, pairsTable = pairs.table, collisionsLength = collisions.length, collisionStart = pairs.collisionStart, collisionEnd = pairs.collisionEnd, collisionActive = pairs.collisionActive, collision, pairIndex, pair, i;
                    // clear collision state arrays, but maintain old reference
                    collisionStart.length = 0;
                    collisionEnd.length = 0;
                    collisionActive.length = 0;
                    for(i = 0; i < pairsListLength; i++)pairsList[i].confirmedActive = false;
                    for(i = 0; i < collisionsLength; i++){
                        collision = collisions[i];
                        pair = collision.pair;
                        if (pair) {
                            // pair already exists (but may or may not be active)
                            if (pair.isActive) // pair exists and is active
                            collisionActive.push(pair);
                            else // pair exists but was inactive, so a collision has just started again
                            collisionStart.push(pair);
                            // update the pair
                            Pair.update(pair, collision, timestamp);
                            pair.confirmedActive = true;
                        } else {
                            // pair did not exist, create a new pair
                            pair = Pair.create(collision, timestamp);
                            pairsTable[pair.id] = pair;
                            // push the new pair
                            collisionStart.push(pair);
                            pairsList.push(pair);
                        }
                    }
                    // find pairs that are no longer active
                    var removePairIndex = [];
                    pairsListLength = pairsList.length;
                    for(i = 0; i < pairsListLength; i++){
                        pair = pairsList[i];
                        if (!pair.confirmedActive) {
                            Pair.setActive(pair, false, timestamp);
                            collisionEnd.push(pair);
                            if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) removePairIndex.push(i);
                        }
                    }
                    // remove inactive pairs
                    for(i = 0; i < removePairIndex.length; i++){
                        pairIndex = removePairIndex[i] - i;
                        pair = pairsList[pairIndex];
                        pairsList.splice(pairIndex, 1);
                        delete pairsTable[pair.id];
                    }
                };
                /**
     * Clears the given pairs structure.
     * @method clear
     * @param {pairs} pairs
     * @return {pairs} pairs
     */ Pairs.clear = function(pairs) {
                    pairs.table = {
                    };
                    pairs.list.length = 0;
                    pairs.collisionStart.length = 0;
                    pairs.collisionActive.length = 0;
                    pairs.collisionEnd.length = 0;
                    return pairs;
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            var Matter = module.exports = __webpack_require__(22);
            Matter.Axes = __webpack_require__(11);
            Matter.Bodies = __webpack_require__(12);
            Matter.Body = __webpack_require__(6);
            Matter.Bounds = __webpack_require__(1);
            Matter.Collision = __webpack_require__(8);
            Matter.Common = __webpack_require__(0);
            Matter.Composite = __webpack_require__(5);
            Matter.Composites = __webpack_require__(23);
            Matter.Constraint = __webpack_require__(10);
            Matter.Contact = __webpack_require__(17);
            Matter.Detector = __webpack_require__(14);
            Matter.Engine = __webpack_require__(18);
            Matter.Events = __webpack_require__(4);
            Matter.Grid = __webpack_require__(24);
            Matter.Mouse = __webpack_require__(13);
            Matter.MouseConstraint = __webpack_require__(25);
            Matter.Pair = __webpack_require__(9);
            Matter.Pairs = __webpack_require__(20);
            Matter.Plugin = __webpack_require__(15);
            Matter.Query = __webpack_require__(26);
            Matter.Render = __webpack_require__(16);
            Matter.Resolver = __webpack_require__(19);
            Matter.Runner = __webpack_require__(27);
            Matter.SAT = __webpack_require__(28);
            Matter.Sleeping = __webpack_require__(7);
            Matter.Svg = __webpack_require__(29);
            Matter.Vector = __webpack_require__(2);
            Matter.Vertices = __webpack_require__(3);
            Matter.World = __webpack_require__(30);
            // temporary back compatibility
            Matter.Engine.run = Matter.Runner.run;
            Matter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.
*
* @class Matter
*/ var Matter = {
            };
            module.exports = Matter;
            var Plugin = __webpack_require__(15);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * The library name.
     * @property name
     * @readOnly
     * @type {String}
     */ Matter.name = 'matter-js';
                /**
     * The library version.
     * @property version
     * @readOnly
     * @type {String}
     */ Matter.version = "0.18.0";
                /**
     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.
     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.
     * @property uses
     * @type {Array}
     */ Matter.uses = [];
                /**
     * The plugins that have been installed through `Matter.Plugin.install`. Read only.
     * @property used
     * @readOnly
     * @type {Array}
     */ Matter.used = [];
                /**
     * Installs the given plugins on the `Matter` namespace.
     * This is a short-hand for `Plugin.use`, see it for more information.
     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.
     * Avoid calling this function multiple times unless you intend to manually control installation order.
     * @method use
     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).
     */ Matter.use = function() {
                    Plugin.use(Matter, Array.prototype.slice.call(arguments));
                };
                /**
     * Chains a function to excute before the original function on the given `path` relative to `Matter`.
     * See also docs for `Common.chain`.
     * @method before
     * @param {string} path The path relative to `Matter`
     * @param {function} func The function to chain before the original
     * @return {function} The chained function that replaced the original
     */ Matter.before = function(path, func) {
                    path = path.replace(/^Matter./, '');
                    return Common.chainPathBefore(Matter, path, func);
                };
                /**
     * Chains a function to excute after the original function on the given `path` relative to `Matter`.
     * See also docs for `Common.chain`.
     * @method after
     * @param {string} path The path relative to `Matter`
     * @param {function} func The function to chain after the original
     * @return {function} The chained function that replaced the original
     */ Matter.after = function(path, func) {
                    path = path.replace(/^Matter./, '');
                    return Common.chainPathAfter(Matter, path, func);
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Composites` module contains factory methods for creating composite bodies
* with commonly used configurations (such as stacks and chains).
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Composites
*/ var Composites = {
            };
            module.exports = Composites;
            var Composite = __webpack_require__(5);
            var Constraint = __webpack_require__(10);
            var Common = __webpack_require__(0);
            var Body = __webpack_require__(6);
            var Bodies = __webpack_require__(12);
            var deprecated = Common.deprecated;
            (function() {
                /**
     * Create a new composite containing bodies created in the callback in a grid arrangement.
     * This function uses the body's bounds to prevent overlaps.
     * @method stack
     * @param {number} xx
     * @param {number} yy
     * @param {number} columns
     * @param {number} rows
     * @param {number} columnGap
     * @param {number} rowGap
     * @param {function} callback
     * @return {composite} A new composite containing objects created in the callback
     */ Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {
                    var stack = Composite.create({
                        label: 'Stack'
                    }), x = xx, y = yy, lastBody, i = 0;
                    for(var row = 0; row < rows; row++){
                        var maxHeight = 0;
                        for(var column = 0; column < columns; column++){
                            var body = callback(x, y, column, row, lastBody, i);
                            if (body) {
                                var bodyHeight = body.bounds.max.y - body.bounds.min.y, bodyWidth = body.bounds.max.x - body.bounds.min.x;
                                if (bodyHeight > maxHeight) maxHeight = bodyHeight;
                                Body.translate(body, {
                                    x: bodyWidth * 0.5,
                                    y: bodyHeight * 0.5
                                });
                                x = body.bounds.max.x + columnGap;
                                Composite.addBody(stack, body);
                                lastBody = body;
                                i += 1;
                            } else x += columnGap;
                        }
                        y += maxHeight + rowGap;
                        x = xx;
                    }
                    return stack;
                };
                /**
     * Chains all bodies in the given composite together using constraints.
     * @method chain
     * @param {composite} composite
     * @param {number} xOffsetA
     * @param {number} yOffsetA
     * @param {number} xOffsetB
     * @param {number} yOffsetB
     * @param {object} options
     * @return {composite} A new composite containing objects chained together with constraints
     */ Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {
                    var bodies = composite.bodies;
                    for(var i = 1; i < bodies.length; i++){
                        var bodyA = bodies[i - 1], bodyB = bodies[i], bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y, bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y, bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;
                        var defaults = {
                            bodyA: bodyA,
                            pointA: {
                                x: bodyAWidth * xOffsetA,
                                y: bodyAHeight * yOffsetA
                            },
                            bodyB: bodyB,
                            pointB: {
                                x: bodyBWidth * xOffsetB,
                                y: bodyBHeight * yOffsetB
                            }
                        };
                        var constraint = Common.extend(defaults, options);
                        Composite.addConstraint(composite, Constraint.create(constraint));
                    }
                    composite.label += ' Chain';
                    return composite;
                };
                /**
     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.
     * @method mesh
     * @param {composite} composite
     * @param {number} columns
     * @param {number} rows
     * @param {boolean} crossBrace
     * @param {object} options
     * @return {composite} The composite containing objects meshed together with constraints
     */ Composites.mesh = function(composite, columns, rows, crossBrace, options) {
                    var bodies = composite.bodies, row, col, bodyA, bodyB, bodyC;
                    for(row = 0; row < rows; row++){
                        for(col = 1; col < columns; col++){
                            bodyA = bodies[col - 1 + row * columns];
                            bodyB = bodies[col + row * columns];
                            Composite.addConstraint(composite, Constraint.create(Common.extend({
                                bodyA: bodyA,
                                bodyB: bodyB
                            }, options)));
                        }
                        if (row > 0) for(col = 0; col < columns; col++){
                            bodyA = bodies[col + (row - 1) * columns];
                            bodyB = bodies[col + row * columns];
                            Composite.addConstraint(composite, Constraint.create(Common.extend({
                                bodyA: bodyA,
                                bodyB: bodyB
                            }, options)));
                            if (crossBrace && col > 0) {
                                bodyC = bodies[col - 1 + (row - 1) * columns];
                                Composite.addConstraint(composite, Constraint.create(Common.extend({
                                    bodyA: bodyC,
                                    bodyB: bodyB
                                }, options)));
                            }
                            if (crossBrace && col < columns - 1) {
                                bodyC = bodies[col + 1 + (row - 1) * columns];
                                Composite.addConstraint(composite, Constraint.create(Common.extend({
                                    bodyA: bodyC,
                                    bodyB: bodyB
                                }, options)));
                            }
                        }
                    }
                    composite.label += ' Mesh';
                    return composite;
                };
                /**
     * Create a new composite containing bodies created in the callback in a pyramid arrangement.
     * This function uses the body's bounds to prevent overlaps.
     * @method pyramid
     * @param {number} xx
     * @param {number} yy
     * @param {number} columns
     * @param {number} rows
     * @param {number} columnGap
     * @param {number} rowGap
     * @param {function} callback
     * @return {composite} A new composite containing objects created in the callback
     */ Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {
                    return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {
                        var actualRows = Math.min(rows, Math.ceil(columns / 2)), lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;
                        if (row > actualRows) return;
                        // reverse row order
                        row = actualRows - row;
                        var start = row, end = columns - 1 - row;
                        if (column < start || column > end) return;
                        // retroactively fix the first body's position, since width was unknown
                        if (i === 1) Body.translate(lastBody, {
                            x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,
                            y: 0
                        });
                        var xOffset = lastBody ? column * lastBodyWidth : 0;
                        return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);
                    });
                };
                /**
     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.
     * @deprecated moved to newtonsCradle example
     * @method newtonsCradle
     * @param {number} xx
     * @param {number} yy
     * @param {number} number
     * @param {number} size
     * @param {number} length
     * @return {composite} A new composite newtonsCradle body
     */ Composites.newtonsCradle = function(xx, yy, number, size, length) {
                    var newtonsCradle = Composite.create({
                        label: 'Newtons Cradle'
                    });
                    for(var i = 0; i < number; i++){
                        var separation = 1.9, circle = Bodies.circle(xx + i * (size * separation), yy + length, size, {
                            inertia: Infinity,
                            restitution: 1,
                            friction: 0,
                            frictionAir: 0.0001,
                            slop: 1
                        }), constraint = Constraint.create({
                            pointA: {
                                x: xx + i * (size * separation),
                                y: yy
                            },
                            bodyB: circle
                        });
                        Composite.addBody(newtonsCradle, circle);
                        Composite.addConstraint(newtonsCradle, constraint);
                    }
                    return newtonsCradle;
                };
                deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');
                /**
     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.
     * @deprecated moved to car example
     * @method car
     * @param {number} xx
     * @param {number} yy
     * @param {number} width
     * @param {number} height
     * @param {number} wheelSize
     * @return {composite} A new composite car body
     */ Composites.car = function(xx, yy, width, height, wheelSize) {
                    var group = Body.nextGroup(true), wheelBase = 20, wheelAOffset = -width * 0.5 + wheelBase, wheelBOffset = width * 0.5 - wheelBase, wheelYOffset = 0;
                    var car = Composite.create({
                        label: 'Car'
                    }), body = Bodies.rectangle(xx, yy, width, height, {
                        collisionFilter: {
                            group: group
                        },
                        chamfer: {
                            radius: height * 0.5
                        },
                        density: 0.0002
                    });
                    var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, {
                        collisionFilter: {
                            group: group
                        },
                        friction: 0.8
                    });
                    var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, {
                        collisionFilter: {
                            group: group
                        },
                        friction: 0.8
                    });
                    var axelA = Constraint.create({
                        bodyB: body,
                        pointB: {
                            x: wheelAOffset,
                            y: wheelYOffset
                        },
                        bodyA: wheelA,
                        stiffness: 1,
                        length: 0
                    });
                    var axelB = Constraint.create({
                        bodyB: body,
                        pointB: {
                            x: wheelBOffset,
                            y: wheelYOffset
                        },
                        bodyA: wheelB,
                        stiffness: 1,
                        length: 0
                    });
                    Composite.addBody(car, body);
                    Composite.addBody(car, wheelA);
                    Composite.addBody(car, wheelB);
                    Composite.addConstraint(car, axelA);
                    Composite.addConstraint(car, axelB);
                    return car;
                };
                deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');
                /**
     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)
     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.
     * @deprecated moved to softBody and cloth examples
     * @method softBody
     * @param {number} xx
     * @param {number} yy
     * @param {number} columns
     * @param {number} rows
     * @param {number} columnGap
     * @param {number} rowGap
     * @param {boolean} crossBrace
     * @param {number} particleRadius
     * @param {} particleOptions
     * @param {} constraintOptions
     * @return {composite} A new composite softBody
     */ Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {
                    particleOptions = Common.extend({
                        inertia: Infinity
                    }, particleOptions);
                    constraintOptions = Common.extend({
                        stiffness: 0.2,
                        render: {
                            type: 'line',
                            anchors: false
                        }
                    }, constraintOptions);
                    var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {
                        return Bodies.circle(x, y, particleRadius, particleOptions);
                    });
                    Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);
                    softBody.label = 'Soft Body';
                    return softBody;
                };
                deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* This module has now been replaced by `Matter.Detector`.
*
* All usage should be migrated to `Matter.Detector` or another alternative.
* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.
*
* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.
*
* @class Grid
* @deprecated
*/ var Grid = {
            };
            module.exports = Grid;
            var Pair = __webpack_require__(9);
            var Common = __webpack_require__(0);
            var deprecated = Common.deprecated;
            (function() {
                /**
     * Creates a new grid.
     * @deprecated replaced by Matter.Detector
     * @method create
     * @param {} options
     * @return {grid} A new grid
     */ Grid.create = function(options) {
                    var defaults = {
                        buckets: {
                        },
                        pairs: {
                        },
                        pairsList: [],
                        bucketWidth: 48,
                        bucketHeight: 48
                    };
                    return Common.extend(defaults, options);
                };
                /**
     * The width of a single grid bucket.
     *
     * @property bucketWidth
     * @type number
     * @default 48
     */ /**
     * The height of a single grid bucket.
     *
     * @property bucketHeight
     * @type number
     * @default 48
     */ /**
     * Updates the grid.
     * @deprecated replaced by Matter.Detector
     * @method update
     * @param {grid} grid
     * @param {body[]} bodies
     * @param {engine} engine
     * @param {boolean} forceUpdate
     */ Grid.update = function(grid, bodies, engine, forceUpdate) {
                    var i, col, row, world = engine.world, buckets = grid.buckets, bucket, bucketId, gridChanged = false;
                    for(i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (body.isSleeping && !forceUpdate) continue;
                        // temporary back compatibility bounds check
                        if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;
                        var newRegion = Grid._getRegion(grid, body);
                        // if the body has changed grid region
                        if (!body.region || newRegion.id !== body.region.id || forceUpdate) {
                            if (!body.region || forceUpdate) body.region = newRegion;
                            var union = Grid._regionUnion(newRegion, body.region);
                            // update grid buckets affected by region change
                            // iterate over the union of both regions
                            for(col = union.startCol; col <= union.endCol; col++)for(row = union.startRow; row <= union.endRow; row++){
                                bucketId = Grid._getBucketId(col, row);
                                bucket = buckets[bucketId];
                                var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;
                                var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;
                                // remove from old region buckets
                                if (!isInsideNewRegion && isInsideOldRegion) {
                                    if (isInsideOldRegion) {
                                        if (bucket) Grid._bucketRemoveBody(grid, bucket, body);
                                    }
                                }
                                // add to new region buckets
                                if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {
                                    if (!bucket) bucket = Grid._createBucket(buckets, bucketId);
                                    Grid._bucketAddBody(grid, bucket, body);
                                }
                            }
                            // set the new region
                            body.region = newRegion;
                            // flag changes so we can update pairs
                            gridChanged = true;
                        }
                    }
                    // update pairs list only if pairs changed (i.e. a body changed region)
                    if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);
                };
                deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');
                /**
     * Clears the grid.
     * @deprecated replaced by Matter.Detector
     * @method clear
     * @param {grid} grid
     */ Grid.clear = function(grid) {
                    grid.buckets = {
                    };
                    grid.pairs = {
                    };
                    grid.pairsList = [];
                };
                deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');
                /**
     * Finds the union of two regions.
     * @method _regionUnion
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} regionA
     * @param {} regionB
     * @return {} region
     */ Grid._regionUnion = function(regionA, regionB) {
                    var startCol = Math.min(regionA.startCol, regionB.startCol), endCol = Math.max(regionA.endCol, regionB.endCol), startRow = Math.min(regionA.startRow, regionB.startRow), endRow = Math.max(regionA.endRow, regionB.endRow);
                    return Grid._createRegion(startCol, endCol, startRow, endRow);
                };
                /**
     * Gets the region a given body falls in for a given grid.
     * @method _getRegion
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} grid
     * @param {} body
     * @return {} region
     */ Grid._getRegion = function(grid, body) {
                    var bounds = body.bounds, startCol = Math.floor(bounds.min.x / grid.bucketWidth), endCol = Math.floor(bounds.max.x / grid.bucketWidth), startRow = Math.floor(bounds.min.y / grid.bucketHeight), endRow = Math.floor(bounds.max.y / grid.bucketHeight);
                    return Grid._createRegion(startCol, endCol, startRow, endRow);
                };
                /**
     * Creates a region.
     * @method _createRegion
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} startCol
     * @param {} endCol
     * @param {} startRow
     * @param {} endRow
     * @return {} region
     */ Grid._createRegion = function(startCol, endCol, startRow, endRow) {
                    return {
                        id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,
                        startCol: startCol,
                        endCol: endCol,
                        startRow: startRow,
                        endRow: endRow
                    };
                };
                /**
     * Gets the bucket id at the given position.
     * @method _getBucketId
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} column
     * @param {} row
     * @return {string} bucket id
     */ Grid._getBucketId = function(column, row) {
                    return 'C' + column + 'R' + row;
                };
                /**
     * Creates a bucket.
     * @method _createBucket
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} buckets
     * @param {} bucketId
     * @return {} bucket
     */ Grid._createBucket = function(buckets, bucketId) {
                    var bucket = buckets[bucketId] = [];
                    return bucket;
                };
                /**
     * Adds a body to a bucket.
     * @method _bucketAddBody
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} grid
     * @param {} bucket
     * @param {} body
     */ Grid._bucketAddBody = function(grid, bucket, body) {
                    var gridPairs = grid.pairs, pairId = Pair.id, bucketLength = bucket.length, i;
                    // add new pairs
                    for(i = 0; i < bucketLength; i++){
                        var bodyB = bucket[i];
                        if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;
                        // keep track of the number of buckets the pair exists in
                        // important for Grid.update to work
                        var id = pairId(body, bodyB), pair = gridPairs[id];
                        if (pair) pair[2] += 1;
                        else gridPairs[id] = [
                            body,
                            bodyB,
                            1
                        ];
                    }
                    // add to bodies (after pairs, otherwise pairs with self)
                    bucket.push(body);
                };
                /**
     * Removes a body from a bucket.
     * @method _bucketRemoveBody
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} grid
     * @param {} bucket
     * @param {} body
     */ Grid._bucketRemoveBody = function(grid, bucket, body) {
                    var gridPairs = grid.pairs, pairId = Pair.id, i;
                    // remove from bucket
                    bucket.splice(Common.indexOf(bucket, body), 1);
                    var bucketLength = bucket.length;
                    // update pair counts
                    for(i = 0; i < bucketLength; i++){
                        // keep track of the number of buckets the pair exists in
                        // important for _createActivePairsList to work
                        var pair = gridPairs[pairId(body, bucket[i])];
                        if (pair) pair[2] -= 1;
                    }
                };
                /**
     * Generates a list of the active pairs in the grid.
     * @method _createActivePairsList
     * @deprecated replaced by Matter.Detector
     * @private
     * @param {} grid
     * @return [] pairs
     */ Grid._createActivePairsList = function(grid) {
                    var pair, gridPairs = grid.pairs, pairKeys = Common.keys(gridPairs), pairKeysLength = pairKeys.length, pairs = [], k;
                    // iterate over grid.pairs
                    for(k = 0; k < pairKeysLength; k++){
                        pair = gridPairs[pairKeys[k]];
                        // if pair exists in at least one bucket
                        // it is a pair that needs further collision testing so push it
                        if (pair[2] > 0) pairs.push(pair);
                        else delete gridPairs[pairKeys[k]];
                    }
                    return pairs;
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.
* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class MouseConstraint
*/ var MouseConstraint = {
            };
            module.exports = MouseConstraint;
            var Vertices = __webpack_require__(3);
            var Sleeping = __webpack_require__(7);
            var Mouse = __webpack_require__(13);
            var Events = __webpack_require__(4);
            var Detector = __webpack_require__(14);
            var Constraint = __webpack_require__(10);
            var Composite = __webpack_require__(5);
            var Common = __webpack_require__(0);
            var Bounds = __webpack_require__(1);
            (function() {
                /**
     * Creates a new mouse constraint.
     * All properties have default values, and many are pre-calculated automatically based on other properties.
     * See the properties section below for detailed information on what you can pass via the `options` object.
     * @method create
     * @param {engine} engine
     * @param {} options
     * @return {MouseConstraint} A new MouseConstraint
     */ MouseConstraint.create = function(engine, options) {
                    var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);
                    if (!mouse) {
                        if (engine && engine.render && engine.render.canvas) mouse = Mouse.create(engine.render.canvas);
                        else if (options && options.element) mouse = Mouse.create(options.element);
                        else {
                            mouse = Mouse.create();
                            Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');
                        }
                    }
                    var constraint = Constraint.create({
                        label: 'Mouse Constraint',
                        pointA: mouse.position,
                        pointB: {
                            x: 0,
                            y: 0
                        },
                        length: 0.01,
                        stiffness: 0.1,
                        angularStiffness: 1,
                        render: {
                            strokeStyle: '#90EE90',
                            lineWidth: 3
                        }
                    });
                    var defaults = {
                        type: 'mouseConstraint',
                        mouse: mouse,
                        element: null,
                        body: null,
                        constraint: constraint,
                        collisionFilter: {
                            category: 1,
                            mask: 4294967295,
                            group: 0
                        }
                    };
                    var mouseConstraint = Common.extend(defaults, options);
                    Events.on(engine, 'beforeUpdate', function() {
                        var allBodies = Composite.allBodies(engine.world);
                        MouseConstraint.update(mouseConstraint, allBodies);
                        MouseConstraint._triggerEvents(mouseConstraint);
                    });
                    return mouseConstraint;
                };
                /**
     * Updates the given mouse constraint.
     * @private
     * @method update
     * @param {MouseConstraint} mouseConstraint
     * @param {body[]} bodies
     */ MouseConstraint.update = function(mouseConstraint, bodies) {
                    var mouse = mouseConstraint.mouse, constraint = mouseConstraint.constraint, body = mouseConstraint.body;
                    if (mouse.button === 0) {
                        if (!constraint.bodyB) for(var i = 0; i < bodies.length; i++){
                            body = bodies[i];
                            if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) for(var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++){
                                var part = body.parts[j];
                                if (Vertices.contains(part.vertices, mouse.position)) {
                                    constraint.pointA = mouse.position;
                                    constraint.bodyB = mouseConstraint.body = body;
                                    constraint.pointB = {
                                        x: mouse.position.x - body.position.x,
                                        y: mouse.position.y - body.position.y
                                    };
                                    constraint.angleB = body.angle;
                                    Sleeping.set(body, false);
                                    Events.trigger(mouseConstraint, 'startdrag', {
                                        mouse: mouse,
                                        body: body
                                    });
                                    break;
                                }
                            }
                        }
                        else {
                            Sleeping.set(constraint.bodyB, false);
                            constraint.pointA = mouse.position;
                        }
                    } else {
                        constraint.bodyB = mouseConstraint.body = null;
                        constraint.pointB = null;
                        if (body) Events.trigger(mouseConstraint, 'enddrag', {
                            mouse: mouse,
                            body: body
                        });
                    }
                };
                /**
     * Triggers mouse constraint events.
     * @method _triggerEvents
     * @private
     * @param {mouse} mouseConstraint
     */ MouseConstraint._triggerEvents = function(mouseConstraint) {
                    var mouse = mouseConstraint.mouse, mouseEvents = mouse.sourceEvents;
                    if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {
                        mouse: mouse
                    });
                    if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {
                        mouse: mouse
                    });
                    if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {
                        mouse: mouse
                    });
                    // reset the mouse state ready for the next step
                    Mouse.clearSourceEvents(mouse);
                };
            /*
    *
    *  Events Documentation
    *
    */ /**
    * Fired when the mouse has moved (or a touch moves) during the last step
    *
    * @event mousemove
    * @param {} event An event object
    * @param {mouse} event.mouse The engine's mouse instance
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when the mouse is down (or a touch has started) during the last step
    *
    * @event mousedown
    * @param {} event An event object
    * @param {mouse} event.mouse The engine's mouse instance
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when the mouse is up (or a touch has ended) during the last step
    *
    * @event mouseup
    * @param {} event An event object
    * @param {mouse} event.mouse The engine's mouse instance
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when the user starts dragging a body
    *
    * @event startdrag
    * @param {} event An event object
    * @param {mouse} event.mouse The engine's mouse instance
    * @param {body} event.body The body being dragged
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired when the user ends dragging a body
    *
    * @event enddrag
    * @param {} event An event object
    * @param {mouse} event.mouse The engine's mouse instance
    * @param {body} event.body The body that has stopped being dragged
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * A `String` denoting the type of object.
     *
     * @property type
     * @type string
     * @default "constraint"
     * @readOnly
     */ /**
     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.
     *
     * @property mouse
     * @type mouse
     * @default mouse
     */ /**
     * The `Body` that is currently being moved by the user, or `null` if no body.
     *
     * @property body
     * @type body
     * @default null
     */ /**
     * The `Constraint` object that is used to move the body during interaction.
     *
     * @property constraint
     * @type constraint
     */ /**
     * An `Object` that specifies the collision filter properties.
     * The collision filter allows the user to define which types of body this mouse constraint can interact with.
     * See `body.collisionFilter` for more information.
     *
     * @property collisionFilter
     * @type object
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Query` module contains methods for performing collision queries.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Query
*/ var Query = {
            };
            module.exports = Query;
            var Vector = __webpack_require__(2);
            var Collision = __webpack_require__(8);
            var Bounds = __webpack_require__(1);
            var Bodies = __webpack_require__(12);
            var Vertices = __webpack_require__(3);
            (function() {
                /**
     * Returns a list of collisions between `body` and `bodies`.
     * @method collides
     * @param {body} body
     * @param {body[]} bodies
     * @return {collision[]} Collisions
     */ Query.collides = function(body, bodies) {
                    var collisions = [], bodiesLength = bodies.length, bounds = body.bounds, collides = Collision.collides, overlaps = Bounds.overlaps;
                    for(var i = 0; i < bodiesLength; i++){
                        var bodyA = bodies[i], partsALength = bodyA.parts.length, partsAStart = partsALength === 1 ? 0 : 1;
                        if (overlaps(bodyA.bounds, bounds)) for(var j = partsAStart; j < partsALength; j++){
                            var part = bodyA.parts[j];
                            if (overlaps(part.bounds, bounds)) {
                                var collision = collides(part, body);
                                if (collision) {
                                    collisions.push(collision);
                                    break;
                                }
                            }
                        }
                    }
                    return collisions;
                };
                /**
     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.
     * @method ray
     * @param {body[]} bodies
     * @param {vector} startPoint
     * @param {vector} endPoint
     * @param {number} [rayWidth]
     * @return {collision[]} Collisions
     */ Query.ray = function(bodies, startPoint, endPoint, rayWidth) {
                    rayWidth = rayWidth || 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001;
                    var rayAngle = Vector.angle(startPoint, endPoint), rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)), rayX = (endPoint.x + startPoint.x) * 0.5, rayY = (endPoint.y + startPoint.y) * 0.5, ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {
                        angle: rayAngle
                    }), collisions = Query.collides(ray, bodies);
                    for(var i = 0; i < collisions.length; i += 1){
                        var collision = collisions[i];
                        collision.body = collision.bodyB = collision.bodyA;
                    }
                    return collisions;
                };
                /**
     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.
     * @method region
     * @param {body[]} bodies
     * @param {bounds} bounds
     * @param {bool} [outside=false]
     * @return {body[]} The bodies matching the query
     */ Query.region = function(bodies, bounds, outside) {
                    var result = [];
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i], overlaps = Bounds.overlaps(body.bounds, bounds);
                        if (overlaps && !outside || !overlaps && outside) result.push(body);
                    }
                    return result;
                };
                /**
     * Returns all bodies whose vertices contain the given point, from the given set of bodies.
     * @method point
     * @param {body[]} bodies
     * @param {vector} point
     * @return {body[]} The bodies matching the query
     */ Query.point = function(bodies, point) {
                    var result = [];
                    for(var i = 0; i < bodies.length; i++){
                        var body = bodies[i];
                        if (Bounds.contains(body.bounds, point)) for(var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++){
                            var part = body.parts[j];
                            if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {
                                result.push(body);
                                break;
                            }
                        }
                    }
                    return result;
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Runner` module is an optional utility which provides a game loop, 
* that handles continuously updating a `Matter.Engine` for you within a browser.
* It is intended for development and debugging purposes, but may also be suitable for simple games.
* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.
* Instead just call `Engine.update(engine, delta)` in your own loop.
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Runner
*/ var Runner = {
            };
            module.exports = Runner;
            var Events = __webpack_require__(4);
            var Engine = __webpack_require__(18);
            var Common = __webpack_require__(0);
            (function() {
                var _requestAnimationFrame, _cancelAnimationFrame;
                if (typeof window !== 'undefined') {
                    _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
                    _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
                }
                if (!_requestAnimationFrame) {
                    var _frameTimeout;
                    _requestAnimationFrame = function(callback) {
                        _frameTimeout = setTimeout(function() {
                            callback(Common.now());
                        }, 1000 / 60);
                    };
                    _cancelAnimationFrame = function() {
                        clearTimeout(_frameTimeout);
                    };
                }
                /**
     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.
     * @method create
     * @param {} options
     */ Runner.create = function(options) {
                    var defaults = {
                        fps: 60,
                        correction: 1,
                        deltaSampleSize: 60,
                        counterTimestamp: 0,
                        frameCounter: 0,
                        deltaHistory: [],
                        timePrev: null,
                        timeScalePrev: 1,
                        frameRequestId: null,
                        isFixed: false,
                        enabled: true
                    };
                    var runner = Common.extend(defaults, options);
                    runner.delta = runner.delta || 1000 / runner.fps;
                    runner.deltaMin = runner.deltaMin || 1000 / runner.fps;
                    runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);
                    runner.fps = 1000 / runner.delta;
                    return runner;
                };
                /**
     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.
     * @method run
     * @param {engine} engine
     */ Runner.run = function(runner, engine) {
                    // create runner if engine is first argument
                    if (typeof runner.positionIterations !== 'undefined') {
                        engine = runner;
                        runner = Runner.create();
                    }
                    (function render(time) {
                        runner.frameRequestId = _requestAnimationFrame(render);
                        if (time && runner.enabled) Runner.tick(runner, engine, time);
                    })();
                    return runner;
                };
                /**
     * A game loop utility that updates the engine and renderer by one step (a 'tick').
     * Features delta smoothing, time correction and fixed or dynamic timing.
     * Consider just `Engine.update(engine, delta)` if you're using your own loop.
     * @method tick
     * @param {runner} runner
     * @param {engine} engine
     * @param {number} time
     */ Runner.tick = function(runner, engine, time) {
                    var timing = engine.timing, correction = 1, delta;
                    // create an event object
                    var event = {
                        timestamp: timing.timestamp
                    };
                    Events.trigger(runner, 'beforeTick', event);
                    if (runner.isFixed) // fixed timestep
                    delta = runner.delta;
                    else {
                        // dynamic timestep based on wall clock between calls
                        delta = time - runner.timePrev || runner.delta;
                        runner.timePrev = time;
                        // optimistically filter delta over a few frames, to improve stability
                        runner.deltaHistory.push(delta);
                        runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);
                        delta = Math.min.apply(null, runner.deltaHistory);
                        // limit delta
                        delta = delta < runner.deltaMin ? runner.deltaMin : delta;
                        delta = delta > runner.deltaMax ? runner.deltaMax : delta;
                        // correction for delta
                        correction = delta / runner.delta;
                        // update engine timing object
                        runner.delta = delta;
                    }
                    // time correction for time scaling
                    if (runner.timeScalePrev !== 0) correction *= timing.timeScale / runner.timeScalePrev;
                    if (timing.timeScale === 0) correction = 0;
                    runner.timeScalePrev = timing.timeScale;
                    runner.correction = correction;
                    // fps counter
                    runner.frameCounter += 1;
                    if (time - runner.counterTimestamp >= 1000) {
                        runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);
                        runner.counterTimestamp = time;
                        runner.frameCounter = 0;
                    }
                    Events.trigger(runner, 'tick', event);
                    // update
                    Events.trigger(runner, 'beforeUpdate', event);
                    Engine.update(engine, delta, correction);
                    Events.trigger(runner, 'afterUpdate', event);
                    Events.trigger(runner, 'afterTick', event);
                };
                /**
     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.
     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.
     * @method stop
     * @param {runner} runner
     */ Runner.stop = function(runner) {
                    _cancelAnimationFrame(runner.frameRequestId);
                };
                /**
     * Alias for `Runner.run`.
     * @method start
     * @param {runner} runner
     * @param {engine} engine
     */ Runner.start = function(runner, engine) {
                    Runner.run(runner, engine);
                };
            /*
    *
    *  Events Documentation
    *
    */ /**
    * Fired at the start of a tick, before any updates to the engine or timing
    *
    * @event beforeTick
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired after engine timing updated, but just before update
    *
    * @event tick
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired at the end of a tick, after engine update and after rendering
    *
    * @event afterTick
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired before update
    *
    * @event beforeUpdate
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /**
    * Fired after update
    *
    * @event afterUpdate
    * @param {} event An event object
    * @param {number} event.timestamp The engine.timing.timestamp of the event
    * @param {} event.source The source object of the event
    * @param {} event.name The name of the event
    */ /*
    *
    *  Properties Documentation
    *
    */ /**
     * A flag that specifies whether the runner is running or not.
     *
     * @property enabled
     * @type boolean
     * @default true
     */ /**
     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).
     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).
     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).
     *
     * @property isFixed
     * @type boolean
     * @default false
     */ /**
     * A `Number` that specifies the time step between updates in milliseconds.
     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.
     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.
     *
     * @property delta
     * @type number
     * @default 1000 / 60
     */ })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* This module has now been replaced by `Matter.Collision`.
*
* All usage should be migrated to `Matter.Collision`.
* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.
*
* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.
*
* @class SAT
* @deprecated
*/ var SAT = {
            };
            module.exports = SAT;
            var Collision = __webpack_require__(8);
            var Common = __webpack_require__(0);
            var deprecated = Common.deprecated;
            (function() {
                /**
     * Detect collision between two bodies using the Separating Axis Theorem.
     * @deprecated replaced by Collision.collides
     * @method collides
     * @param {body} bodyA
     * @param {body} bodyB
     * @return {collision} collision
     */ SAT.collides = function(bodyA, bodyB) {
                    return Collision.collides(bodyA, bodyB);
                };
                deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.
*
* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg
*
* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).
*
* @class Svg
*/ var Svg = {
            };
            module.exports = Svg;
            var Bounds = __webpack_require__(1);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * Converts an SVG path into an array of vector points.
     * If the input path forms a concave shape, you must decompose the result into convex parts before use.
     * See `Bodies.fromVertices` which provides support for this.
     * Note that this function is not guaranteed to support complex paths (such as those with holes).
     * You must load the `pathseg.js` polyfill on newer browsers.
     * @method pathToVertices
     * @param {SVGPathElement} path
     * @param {Number} [sampleLength=15]
     * @return {Vector[]} points
     */ Svg.pathToVertices = function(path, sampleLength) {
                    if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');
                    // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js
                    var i, il, total, point1, segment1, segments, segmentsQueue, lastSegment, lastPoint, segmentIndex, points = [], lx, ly, length = 0, x = 0, y = 0;
                    sampleLength = sampleLength || 15;
                    var addPoint = function(px, py, pathSegType) {
                        // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)
                        var isRelative = pathSegType % 2 === 1 && pathSegType > 1;
                        // when the last point doesn't equal the current point add the current point
                        if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {
                            if (lastPoint && isRelative) {
                                lx = lastPoint.x;
                                ly = lastPoint.y;
                            } else {
                                lx = 0;
                                ly = 0;
                            }
                            var point = {
                                x: lx + px,
                                y: ly + py
                            };
                            // set last point
                            if (isRelative || !lastPoint) lastPoint = point;
                            points.push(point);
                            x = lx + px;
                            y = ly + py;
                        }
                    };
                    var addSegmentPoint = function(segment) {
                        var segType = segment.pathSegTypeAsLetter.toUpperCase();
                        // skip path ends
                        if (segType === 'Z') return;
                        // map segment to x and y
                        switch(segType){
                            case 'M':
                            case 'L':
                            case 'T':
                            case 'C':
                            case 'S':
                            case 'Q':
                                x = segment.x;
                                y = segment.y;
                                break;
                            case 'H':
                                x = segment.x;
                                break;
                            case 'V':
                                y = segment.y;
                                break;
                        }
                        addPoint(x, y, segment.pathSegType);
                    };
                    // ensure path is absolute
                    Svg._svgPathToAbsolute(path);
                    // get total length
                    total = path.getTotalLength();
                    // queue segments
                    segments = [];
                    for(i = 0; i < path.pathSegList.numberOfItems; i += 1)segments.push(path.pathSegList.getItem(i));
                    segmentsQueue = segments.concat();
                    // sample through path
                    while(length < total){
                        // get segment at position
                        segmentIndex = path.getPathSegAtLength(length);
                        segment1 = segments[segmentIndex];
                        // new segment
                        if (segment1 != lastSegment) {
                            while(segmentsQueue.length && segmentsQueue[0] != segment1)addSegmentPoint(segmentsQueue.shift());
                            lastSegment = segment1;
                        }
                        // add points in between when curving
                        // TODO: adaptive sampling
                        switch(segment1.pathSegTypeAsLetter.toUpperCase()){
                            case 'C':
                            case 'T':
                            case 'S':
                            case 'Q':
                            case 'A':
                                point1 = path.getPointAtLength(length);
                                addPoint(point1.x, point1.y, 0);
                                break;
                        }
                        // increment by sample value
                        length += sampleLength;
                    }
                    // add remaining segments not passed by sampling
                    for(i = 0, il = segmentsQueue.length; i < il; ++i)addSegmentPoint(segmentsQueue[i]);
                    return points;
                };
                Svg._svgPathToAbsolute = function(path) {
                    // http://phrogz.net/convert-svg-path-to-all-absolute-commands
                    // Copyright (c) Gavin Kistner
                    // http://phrogz.net/js/_ReuseLicense.txt
                    // Modifications: tidy formatting and naming
                    var x0, y0, x1, y1, x2, y2, segs = path.pathSegList, x = 0, y = 0, len = segs.numberOfItems;
                    for(var i = 0; i < len; ++i){
                        var seg = segs.getItem(i), segType = seg.pathSegTypeAsLetter;
                        if (/[MLHVCSQTA]/.test(segType)) {
                            if ('x' in seg) x = seg.x;
                            if ('y' in seg) y = seg.y;
                        } else {
                            if ('x1' in seg) x1 = x + seg.x1;
                            if ('x2' in seg) x2 = x + seg.x2;
                            if ('y1' in seg) y1 = y + seg.y1;
                            if ('y2' in seg) y2 = y + seg.y2;
                            if ('x' in seg) x += seg.x;
                            if ('y' in seg) y += seg.y;
                            switch(segType){
                                case 'm':
                                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);
                                    break;
                                case 'l':
                                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);
                                    break;
                                case 'h':
                                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);
                                    break;
                                case 'v':
                                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);
                                    break;
                                case 'c':
                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);
                                    break;
                                case 's':
                                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);
                                    break;
                                case 'q':
                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);
                                    break;
                                case 't':
                                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);
                                    break;
                                case 'a':
                                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);
                                    break;
                                case 'z':
                                case 'Z':
                                    x = x0;
                                    y = y0;
                                    break;
                            }
                        }
                        if (segType == 'M' || segType == 'm') {
                            x0 = x;
                            y0 = y;
                        }
                    }
                };
            })();
        /***/ },
        function(module, exports, __webpack_require__) {
            /**
* This module has now been replaced by `Matter.Composite`.
*
* All usage should be migrated to the equivalent functions found on `Matter.Composite`.
* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.
*
* The property `world.gravity` has been moved to `engine.gravity`.
*
* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.
* Eventually this alias module will be marked as deprecated and then later removed in a future release.
*
* @class World
*/ var World = {
            };
            module.exports = World;
            var Composite = __webpack_require__(5);
            var Common = __webpack_require__(0);
            (function() {
                /**
     * See above, aliases for back compatibility only
     */ World.create = Composite.create;
                World.add = Composite.add;
                World.remove = Composite.remove;
                World.clear = Composite.clear;
                World.addComposite = Composite.addComposite;
                World.addBody = Composite.addBody;
                World.addConstraint = Composite.addConstraint;
            })();
        /***/ }
    ]));
});

},{}],"9UQZi":[function(require,module,exports) {
exports.color = require('./color');
exports.geom = require('./geom');
exports.internals = require('./internals');
exports.math = require('./math');
exports.physics2d = require('./physics2d');
exports.processing = require('./processing');
exports.THREE = require('./THREE');
exports.util = require('./util');

},{"./color":"kkJnV","./geom":"cpUdF","./internals":"iIw4Q","./math":"jwzX6","./physics2d":"ldSYI","./processing":"1JuYi","./THREE":"duKsg","./util":"2Oq8Q"}],"kkJnV":[function(require,module,exports) {
exports.accessCriteria = require('./color/accessCriteria');
//keep it uppercase also
exports.AccessCriteria = exports.accessCriteria;
exports.AlphaAccessor = require('./color/AlphaAccessor');
exports.CMYKAccessor = require('./color/CMYKAccessor');
exports.CMYKDDistanceProxy = require('./color/CMYKDistanceProxy');
exports.ColorGradient = require('./color/ColorGradient');
exports.ColorList = require('./color/ColorList');
exports.ColorRange = require('./color/ColorRange');
exports.ColorTheme = require('./color/ColorTheme');
exports.createListUsingStrategy = require('./color/createListUsingStrategy');
exports.HistEntry = require('./color/HistEntry');
exports.Histogram = require('./color/Histogram');
exports.HSVAccessor = require('./color/HSVAccessor');
exports.HSVDistanceProxy = require('./color/HSVDistanceProxy');
exports.Hue = require('./color/Hue');
exports.LuminanceAccessor = require('./color/LuminanceAccessor');
exports.namedColor = require('./color/namedColor');
exports.NamedColor = exports.namedColor;
exports.ProximityComparator = require('./color/ProximityComparator');
exports.RGBAccessor = require('./color/RGBAccessor');
exports.RGBDistanceProxy = require('./color/RGBDistanceProxy');
exports.TColor = require('./color/TColor');
exports.theory = require('./color/theory');
exports.ToneMap = require('./color/ToneMap');

},{"./color/accessCriteria":"awG5S","./color/AlphaAccessor":"4yUXH","./color/CMYKAccessor":"jLsKM","./color/CMYKDistanceProxy":"2v40F","./color/ColorGradient":"5nvB4","./color/ColorList":"1i9Sc","./color/ColorRange":"ki8vV","./color/ColorTheme":"hjqyw","./color/createListUsingStrategy":"9s2Dk","./color/HistEntry":"iCBxp","./color/Histogram":"aou90","./color/HSVAccessor":"5Xmms","./color/HSVDistanceProxy":"7nQXo","./color/Hue":"b7U9c","./color/LuminanceAccessor":"b9yN1","./color/namedColor":"eFB5k","./color/ProximityComparator":"5P7sf","./color/RGBAccessor":"3Q2uM","./color/RGBDistanceProxy":"hYv9p","./color/TColor":"4XKw0","./color/theory":"3H4ZK","./color/ToneMap":"e5u4H"}],"awG5S":[function(require,module,exports) {
var HSVAccessor = require('./HSVAccessor'), RGBAccessor = require('./RGBAccessor'), CMYKAccessor = require('./CMYKAccessor'), AlphaAccessor = require('./AlphaAccessor'), LuminanceAccessor = require('./LuminanceAccessor');
/**
* Defines standard color component access criterias and associated comparators
* used to sort colors based on component values. If a new custom accessor is
* needed (e.g. for sub-classes TColor's), then simply sub-class this class and
* implement the {@link Comparator} interface and the 2 abstract getter & setter
* methods defined by this class.
*/ exports.HUE = new HSVAccessor(0), exports.SATURATION = new HSVAccessor(1), exports.BRIGHTNESS = new HSVAccessor(2), exports.RED = new RGBAccessor(0), exports.GREEN = new RGBAccessor(1), exports.BLUE = new RGBAccessor(2), exports.CYAN = new CMYKAccessor(0), exports.MAGENTA = new CMYKAccessor(1), exports.YELLOW = new CMYKAccessor(2), exports.BLACK = new CMYKAccessor(3), exports.ALPHA = new AlphaAccessor(), exports.LUMINANCE = new LuminanceAccessor();

},{"./HSVAccessor":"5Xmms","./RGBAccessor":"3Q2uM","./CMYKAccessor":"jLsKM","./AlphaAccessor":"4yUXH","./LuminanceAccessor":"b9yN1"}],"5Xmms":[function(require,module,exports) {
module.exports = require('./accessors').HSVAccessor;

},{"./accessors":"6FVEm"}],"6FVEm":[function(require,module,exports) {
var numberComparator = require('../internals').numberComparator, bind = require('../internals').bind;
//this will attach proper exported objects for each accessor
function make(type, setters) {
    var name = type + 'Accessor', arry = type.toLowerCase(); //make HSV hsv etc
    exports[name] = function(comp) {
        this.component = comp;
        //compare() could easily be used in incorrect scope, bind it
        this.compare = bind(this.compare, this);
    };
    exports[name].prototype.compare = function(a, b) {
        var ca = a[arry][this.component], cb = b[arry][this.component];
        return numberComparator(ca, cb);
    };
    exports[name].prototype.getComponentValueFor = function(col) {
        return col[arry][this.component];
    };
    exports[name].prototype.setComponentValueFor = function(col, val) {
        col['set' + setters[this.component]](val);
    };
}
make('RGB', [
    'Red',
    'Green',
    'Blue'
]);
make('HSV', [
    'Hue',
    'Saturation',
    'Brightness'
]);
make('CMYK', [
    'Cyan',
    'Magenta',
    'Yellow',
    'Black'
]);
var LuminanceAccessor = function() {
};
LuminanceAccessor.prototype.compare = function(a, b) {
    return numberComparator(a.luminance(), b.luminance());
};
LuminanceAccessor.prototype.getComponentValueFor = function(col) {
    return col.luminance();
};
LuminanceAccessor.prototype.setComponentValueFor = function() {
};
var AlphaAccessor = function() {
};
AlphaAccessor.prototype.compare = function(a, b) {
    return numberComparator(a.alpha(), b.alpha());
};
AlphaAccessor.prototype.getComponentValueFor = function(col) {
    return col.alpha();
};
AlphaAccessor.prototype.setComponentValueFor = function(col, value) {
    col.setAlpha(value);
};
exports.LuminanceAccessor = LuminanceAccessor;
exports.AlphaAccessor = AlphaAccessor;

},{"../internals":"iIw4Q"}],"iIw4Q":[function(require,module,exports) {
/**
 * @namespace contains helper functions used internally
 * THESE MODULES ARE NOT ALLOWED TO HAVE DEPENDENCIES OUTSIDE
 * THE `internals` PACKAGE
 */ //do type-tests to detect properties on objects
exports.is = require('./internals/is');
//test if objects have properties
exports.has = require('./internals/has');
//extend the prototype of a class
exports.extend = require('./internals/extend');
exports.each = require('./internals/each');
exports.bind = require('./internals/bind');
exports.keys = require('./internals/keys');
exports.values = require('./internals/values');
exports.filter = require('./internals/filter');
//receives an object of properties to set on source object
exports.mixin = require('./internals/mixin');
//imitates java-style Iterator
exports.Iterator = require('./internals/Iterator');
//used for keeping HashMap-like collections
exports.LinkedMap = require('./internals/LinkedMap');
//simport sort comparator for numbers
exports.numberComparator = require('./internals/numberComparator');
exports.removeItemFrom = require('./internals/removeItemFrom');

},{"./internals/is":"4G2iR","./internals/has":"2hvR2","./internals/extend":"2ldIH","./internals/each":"dGZ4W","./internals/bind":"gDZKj","./internals/keys":"56Jef","./internals/values":"aBTqt","./internals/filter":"5vfPm","./internals/mixin":"cwz2l","./internals/Iterator":"ahYYm","./internals/LinkedMap":"6e3mF","./internals/numberComparator":"aE48M","./internals/removeItemFrom":"6BZx0"}],"4G2iR":[function(require,module,exports) {
var has = require('./has');
var apply = function(properties) {
    return function(o) {
        return has.all(o, properties);
    };
};
exports.Array = Array.isArray || function(a) {
    return a.toString() == '[object Array]';
};
exports.Object = function(a) {
    return typeof a === 'object';
};
exports.undef = function(a) {
    return a === void 0;
};
//determines if a value is undefined or null
exports.existy = function(a) {
    return a != null;
};
exports.String = function(a) {
    return typeof a === 'string';
};
exports.Number = function(a) {
    return typeof a === 'number';
};
exports.Function = function(a) {
    return typeof a === 'function';
};
exports.AABB = apply([
    'setExtent',
    'getNormalForPoint'
]);
exports.ColorGradient = apply([
    'gradient',
    'interpolator',
    'maxDither',
    'addColorAt',
    'calcGradient'
]);
exports.ColorList = apply([
    'add',
    'addAll',
    'adjustBrightness',
    'adjustSaturation'
]);
exports.ColorRange = apply([
    'add',
    'addAlphaRange',
    'addBrightnessRange',
    'addHueRange'
]);
exports.Circle = apply([
    'getCircumference',
    'getRadius',
    'intersectsCircle'
]);
exports.FloatRange = apply([
    'min',
    'max',
    'adjustCurrentBy',
    'getMedian'
]);
exports.Hue = apply([
    'getHue',
    'isPrimary'
]);
exports.Line2D = apply([
    'closestPointTo',
    'intersectLine',
    'getLength'
]);
exports.Matrix4x4 = apply([
    'identity',
    'invert',
    'setFrustrum'
]);
exports.Rect = apply([
    'x',
    'y',
    'width',
    'height',
    'getArea',
    'getCentroid',
    'getDimensions'
]);
exports.Sphere = apply([
    'x',
    'y',
    'z',
    'radius',
    'toMesh'
]);
exports.ScaleMap = apply([
    'mapFunction',
    'setInputRange',
    'setOutputRange',
    'getMappedValueFor'
]);
exports.TColor = apply([
    'rgb',
    'cmyk',
    'hsv'
]);
exports.ParticleBehavior = apply([
    'applyBehavior',
    'configure'
]);
exports.VerletParticle2D = apply([
    'x',
    'y',
    'weight'
]);

},{"./has":"2hvR2"}],"2hvR2":[function(require,module,exports) {
var all = function(subject, properties) {
    if (subject === undefined || typeof subject != 'object') return false;
    var i = 0, len = properties.length, prop;
    for(i = 0; i < len; i++){
        prop = properties[i];
        if (!(prop in subject)) return false;
    }
    return true;
};
exports.property = function(obj, key) {
    return hasOwnProperty.call(obj, key);
};
exports.all = all;
exports.typedArrays = function() {
    return typeof Int32Array !== 'undefined' && typeof Float32Array !== 'undefined' && typeof Uint8Array !== 'undefined';
};
exports.XY = function(a) {
    return a && typeof a.x === 'number' && typeof a.y === 'number';
};
exports.XYZ = function(a) {
    return a && typeof a.x === 'number' && typeof a.y === 'number' && typeof a.z === 'number';
};
exports.XYWidthHeight = function(a) {
    return a && typeof a.x === 'number' && typeof a.y === 'number' && typeof a.width === 'number' && typeof a.height === 'number';
};

},{}],"2ldIH":[function(require,module,exports) {
module.exports = function(childClass, superClass) {
    if (typeof childClass !== 'function') throw Error("childClass was not function, possible circular: ", childClass);
    else if (typeof superClass !== 'function') throw Error("superClass was not function, possible circular: ", superClass);
    childClass.prototype = Object.create(superClass.prototype); //new superClass();
    childClass.constructor = childClass;
    childClass.prototype.parent = superClass.prototype;
};

},{}],"dGZ4W":[function(require,module,exports) {
//from Underscore.js
//(c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//basic forEach, use native implementation is available
var breaker = {
};
module.exports = function(obj, iterator, context) {
    if (obj == null) return;
    if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) obj.forEach(iterator, context);
    else if (obj.length === +obj.length) for(var i = 0, l = obj.length; i < l; i++){
        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
    }
    else {
        for(var key in obj)if (hasOwnProperty.call(obj, key)) {
            if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
    }
};

},{}],"gDZKj":[function(require,module,exports) {
//bind a function to a scope
var ctor = {
};
module.exports = function(func, context) {
    var args, bound;
    var FP = Function.prototype;
    var slice = Array.prototype.slice;
    if (func.bind === FP.bind && FP.bind) return FP.bind.apply(func, slice.call(arguments, 1));
    args = slice.call(arguments, 2);
    return bound = function() {
        if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
        ctor.prototype = func.prototype;
        var self = new ctor();
        ctor.prototype = null;
        var result = func.apply(self, args.concat(slice.call(arguments)));
        if (Object(result) === result) return result;
        return self;
    };
};

},{}],"56Jef":[function(require,module,exports) {
module.exports = Object.keys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for(var key in obj)if (exports.has(obj, key)) keys.push(key);
    return keys;
};

},{}],"aBTqt":[function(require,module,exports) {
var has = require('./has');
module.exports = function(obj) {
    var values = [];
    for(var key in obj)if (has.property(obj, key)) values.push(obj[key]);
    return values;
};

},{"./has":"2hvR2"}],"5vfPm":[function(require,module,exports) {
module.exports = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (Array.prototype.filter && obj.filter === Array.prototype.filter) return obj.filter(iterator, context);
    exports.each(obj, function(value, index, list) {
        if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
};

},{}],"cwz2l":[function(require,module,exports) {
var each = require('./each');
//basic mixin function, copy over object properties to provided object
module.exports = function(destination, source) {
    each(source, function(val, key) {
        destination[key] = val;
    });
    return destination;
};

},{"./each":"dGZ4W"}],"ahYYm":[function(require,module,exports) {
var is = require('./is');
//imitate the basic functionality of a Java Iterator
var ArrayIterator = function(collection) {
    this.__it = collection.slice(0);
};
ArrayIterator.prototype = {
    hasNext: function() {
        return this.__it.length > 0;
    },
    next: function() {
        return this.__it.shift();
    }
};
var ObjectIterator = function(object) {
    this.__obj = {
    };
    this.__keys = [];
    for(var prop in object){
        this.__obj[prop] = object[prop];
        this.__keys.push(prop);
    }
    this.__it = new ArrayIterator(this.__keys);
};
ObjectIterator.prototype = {
    hasNext: function() {
        return this.__it.hasNext();
    },
    next: function() {
        var key = this.__it.next();
        return this.__obj[key];
    }
};
var Iterator = function(collection) {
    if (is.array(collection)) return new ArrayIterator(collection);
    return new ObjectIterator(collection);
};
module.exports = Iterator;

},{"./is":"4G2iR"}],"6e3mF":[function(require,module,exports) {
var each = require('./each');
// {Function} keyGeneratorFunction - key to use to return the identifier
var LinkedMap = function(keyGeneratorFunction) {
    this.__list = [];
    this.__map = {
    };
    if (typeof keyGeneratorFunction === 'function') this.generateKey = keyGeneratorFunction;
};
LinkedMap.prototype = {
    each: function(fn) {
        each(this.__map, fn);
    },
    get: function(id_or_val) {
        var result = this.__map[id_or_val];
        if (result === undefined) {
            id_or_val = this.generateKey(id_or_val);
            result = this.__map[id_or_val];
        }
        return result;
    },
    generateKey: function(key) {
        return key.toString();
    },
    getArray: function() {
        return this.__list;
    },
    has: function(id_or_val) {
        var self = this;
        var _has = function(id) {
            return self.__map[id] !== undefined;
        };
        if (_has(id_or_val)) return true;
        if (this.__map[id]) return true;
        return this.__map[this.generateKey(id_or_val)];
    },
    put: function(id, val) {
        id = this.generateKey(id);
        this.__map[id] = val;
        this.__list.push(val);
    },
    remove: function(val) {
        val = this.get(val);
        var id = this.generateKey(val);
        delete this.__map[id];
        return this.__list.splice(this.__list.indexOf(val), 1)[0];
    },
    size: function() {
        return this.__list.length;
    },
    values: function() {
        return this.__list.slice(0);
    }
};
module.exports = LinkedMap;

},{"./each":"dGZ4W"}],"aE48M":[function(require,module,exports) {
module.exports = function(f1, f2) {
    if (f1 == f2) return 0;
    if (f1 < f2) return -1;
    if (f1 > f2) return 1;
};

},{}],"6BZx0":[function(require,module,exports) {
module.exports = function(item, array) {
    var index = array.indexOf(item);
    if (index > -1) return array.splice(index, 1);
    return undefined;
};

},{}],"3Q2uM":[function(require,module,exports) {
module.exports = require('./accessors').RGBAccessor;

},{"./accessors":"6FVEm"}],"jLsKM":[function(require,module,exports) {
module.exports = require('./accessors').CMYKAccessor;

},{"./accessors":"6FVEm"}],"4yUXH":[function(require,module,exports) {
module.exports = require('./accessors').AlphaAccessor;

},{"./accessors":"6FVEm"}],"b9yN1":[function(require,module,exports) {
module.exports = require('./accessors').LuminanceAccessor;

},{"./accessors":"6FVEm"}],"2v40F":[function(require,module,exports) {
module.exports = require('./distanceProxies').CMYKDistanceProxy;

},{"./distanceProxies":"idJ94"}],"idJ94":[function(require,module,exports) {
function makeProxy(type) {
    var name = type + 'DistanceProxy';
    exports[name] = function() {
    };
    exports[name].prototype.distanceBetween = function(a, b) {
        //a.distanceToHSV( b );
        return a['distanceTo' + type](b);
    };
}
makeProxy('HSV');
makeProxy('RGB');
makeProxy('CMYK');

},{}],"5nvB4":[function(require,module,exports) {
var filter = require('../internals').filter, numberComparator = require('../internals').numberComparator, mathUtils = require('../math/mathUtils'), LinearInterpolation = require('../math/LinearInterpolation'), ColorList = require('./ColorList');
//a protected object for every point on the gradient
var _GradPoint = function(p, c) {
    this.pos = p;
    this.color = c;
};
_GradPoint.prototype = {
    compareTo: function(p) {
        if (numberComparator(p.pos, this.pos) === 0) return 0;
        return this.pos < p.pos ? -1 : 1;
    },
    getColor: function() {
        return this.color;
    },
    getPosition: function() {
        return this.pos;
    }
};
var ColorGradient = function() {
    this.gradient = [];
    this.interpolator = new LinearInterpolation();
    this.maxDither = 0;
};
ColorGradient.prototype = {
    /**
	* Adds a new color at specified position.
	* @param {Number} p position in the gradient
	* @param {toxi.color.TColor} c color to add
	*/ addColorAt: function(p, c) {
        this.gradient.push(new _GradPoint(p, c));
    },
    /**
	* Calculates the gradient from specified position.
	* @param {Number} pos position to start at (float)
	* @param {Number} width (integer)
	* @return list of interpolated gradient colors
	*/ calcGradient: function(pos, width) {
        if (arguments.length === 0) {
            pos = this.gradient[0].getPosition();
            var last = this.gradient[this.gradient.length - 1].getPosition();
            width = Math.floor(last - pos);
        }
        var result = new ColorList();
        if (this.gradient.length === 0) return result;
        var frac = 0, currPoint, nextPoint, endPos = pos + width, i = 0, l = this.gradient.length;
        for(i = 0; i < l; i++)if (this.gradient[i].pos < pos) currPoint = this.gradient[i];
        var isPremature = currPoint === undefined, activeGradient;
        if (!isPremature) activeGradient = filter(this.gradient, function(g) {
            return g.pos >= currPoint.pos;
        });
        else {
            //start position is before 1st gradient color, so use whole
            activeGradient = this.gradient;
            currPoint = this.gradient[0];
        }
        var currWidth = 0;
        //start over with i, and use it to iterate
        i = 0;
        l = activeGradient.length;
        if (currPoint !== activeGradient[l - 1]) {
            nextPoint = activeGradient[i];
            if (isPremature) {
                var d = currPoint.pos - pos;
                currWidth = mathUtils.abs(d) > 0 ? 1 / d : 1;
            } else if (nextPoint.pos - currPoint.pos > 0) currWidth = 1 / (nextPoint.pos - currPoint.pos);
        }
        while(pos < endPos){
            if (isPremature) frac = 1 - (currPoint.pos - pos) * currWidth;
            else frac = (pos - currPoint.pos) * currWidth;
            //switch to next color?
            if (frac > 1) {
                currPoint = nextPoint;
                isPremature = false;
                i++;
                if (i < activeGradient.length) {
                    nextPoint = activeGradient[i];
                    if (currPoint !== activeGradient[l - 1]) currWidth = 1 / (nextPoint.pos - currPoint.pos);
                    else currWidth = 0;
                    frac = (pos - currPoint.pos) * currWidth;
                }
            }
            if (currPoint !== activeGradient[l - 1]) {
                var ditheredFrac = mathUtils.clip(frac + mathUtils.normalizedRandom() * this.maxDither, 0, 1);
                ditheredFrac = this.interpolator.interpolate(0, 1, ditheredFrac);
                result.add(currPoint.color.getBlended(nextPoint.color, ditheredFrac));
            } else result.add(currPoint.color.copy());
            pos++;
        }
        return result;
    },
    getGradientPoints: function() {
        return this.gradient;
    },
    /**
	* @return the interpolator
	*/ getInterpolator: function() {
        return this.interpolator;
    },
    /**
	* @return the maximum dither amount.
	*/ getMaxDither: function() {
        return this.maxDither;
    },
    /**
	* @param interpolator the interpolator to set
	*/ setInterpolator: function(interpolator) {
        this.interpolator = interpolator;
    },
    /**
	* Sets the maximum dither amount. Setting this to values >0 will jitter the
	* interpolated colors in the calculated gradient. The value range for this
	* parameter is 0.0 (off) to 1.0 (100%).
	* @param {Number} maxDither
	*/ setMaxDither: function(maxDither) {
        this.maxDither = mathUtils.clip(maxDither, 0, 1);
    }
};
module.exports = ColorGradient;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","../math/LinearInterpolation":"fp5tv","./ColorList":"1i9Sc"}],"bF4PI":[function(require,module,exports) {
/**
    * @class
    * @static
    * @member toxi
    * @description math utilities
    */ var MathUtils = {
};
MathUtils.SQRT2 = Math.sqrt(2);
MathUtils.SQRT3 = Math.sqrt(3);
MathUtils.LOG2 = Math.log(2);
MathUtils.PI = 3.141592653589793;
/**
    * The reciprocal of PI: (1/PI)
    */ MathUtils.INV_PI = 1 / MathUtils.PI;
MathUtils.HALF_PI = MathUtils.PI / 2;
MathUtils.THIRD_PI = MathUtils.PI / 3;
MathUtils.QUARTER_PI = MathUtils.PI / 4;
MathUtils.TWO_PI = MathUtils.PI * 2;
MathUtils.THREE_HALVES_PI = MathUtils.TWO_PI - MathUtils.HALF_PI;
MathUtils.PI_SQUARED = MathUtils.PI * MathUtils.PI;
/**
    * Epsilon value
    */ MathUtils.EPS = 0.00000011920928955078125;
/**
    * Degrees to radians conversion factor
    */ MathUtils.DEG2RAD = MathUtils.PI / 180;
/**
    * Radians to degrees conversion factor
    */ MathUtils.RAD2DEG = 180 / MathUtils.PI;
MathUtils.SHIFT23 = 8388608;
MathUtils.INV_SHIFT23 = 1 / MathUtils.SHIFT23;
MathUtils.SIN_A = -4 / (MathUtils.PI * MathUtils.PI);
MathUtils.SIN_B = 4 / MathUtils.PI;
MathUtils.SIN_P = 0.225;
MathUtils.abs = Math.abs;
/**
    * Rounds up the value to the nearest higher power^2 value.
    *
    * @param x
    * @return power^2 value
    */ MathUtils.ceilPowerOf2 = function(x) {
    var pow2 = 1;
    while(pow2 < x)pow2 <<= 1;
    return pow2;
};
MathUtils.clip = function(a, _min, _max) {
    return a < _min ? _min : a > _max ? _max : a;
};
/**
    * Clips the value to the 0.0 .. 1.0 interval.
    *
    * @param a
    * @return clipped value
    * @since 0012
    */ MathUtils.clipNormalized = function(a) {
    if (a < 0) return 0;
    else if (a > 1) return 1;
    return a;
};
MathUtils.cos = Math.cos;
MathUtils.degrees = function(radians) {
    return radians * MathUtils.RAD2DEG;
};
/**
    * Fast cosine approximation.
    *
    * @param x
    *            angle in -PI/2 .. +PI/2 interval
    * @return cosine
    */ MathUtils.fastCos = function(x) {
    return MathUtils.fastSin(x + (x > MathUtils.HALF_PI ? -MathUtils.THREE_HALVES_PI : MathUtils.HALF_PI));
};
/**
    * Fast sine approximation.
    *
    * @param x
    *            angle in -PI/2 .. +PI/2 interval
    * @return sine
    */ MathUtils.fastSin = function(x) {
    x = MathUtils.SIN_B * x + MathUtils.SIN_A * x * Math.abs(x);
    return MathUtils.SIN_P * (x * Math.abs(x) - x) + x;
};
MathUtils.flipCoin = function(rnd) {
    return Math.random() < 0.5;
};
/**
    * This method is a *lot* faster than using (int)Math.floor(x).
    *
    * @param x
    *            value to be floored
    * @return floored value as integer
    */ MathUtils.floor = function(x) {
    var y = ~~x;
    if (x < 0 && x != y) y--;
    return y;
};
/**
    * Rounds down the value to the nearest lower power^2 value.
    *
    * @param x
    * @return power^2 value
    */ MathUtils.floorPowerOf2 = function(x) {
    return ~~Math.pow(2, parseInt(Math.log(x) / MathUtils.LOG2, 10));
};
MathUtils.max = function(a, b, c) {
    if (c === undefined) return Math.max(a, b);
    return a > b ? a > c ? a : c : b > c ? b : c;
};
MathUtils.min = function(a, b, c) {
    if (c === undefined) return Math.min(a, b);
    return a < b ? a < c ? a : c : b < c ? b : c;
};
/**
    * Returns a random number in the interval -1 .. +1.
    *
    * @return random float
    */ MathUtils.normalizedRandom = function() {
    return Math.random() * 2 - 1;
};
MathUtils.radians = function(degrees) {
    return degrees * MathUtils.DEG2RAD;
};
MathUtils.random = function(rand, min, max) {
    //one param
    if (arguments.length === 1) return Math.random() * arguments[0];
    else if (arguments.length == 2) {
        //min and max
        max = min;
        min = rand;
        rand = Math.random;
    }
    if (!min && !max) return Math.random();
    else if (!max) {
        //if only one is provided, then thats actually the max
        max = min;
        return rand() * max;
    }
    return rand() * (max - min) + min;
};
MathUtils.reduceAngle = function(theta) {
    theta %= MathUtils.TWO_PI;
    if (Math.abs(theta) > MathUtils.PI) theta = theta - MathUtils.TWO_PI;
    if (Math.abs(theta) > MathUtils.HALF_PI) theta = MathUtils.PI - theta;
    return theta;
};
MathUtils.sign = function(x) {
    return x < 0 ? -1 : x > 0 ? 1 : 0;
};
MathUtils.sin = function(theta) {
    theta = MathUtils.reduceAngle(theta);
    if (Math.abs(theta) <= MathUtils.QUARTER_PI) return MathUtils.fastSin(theta);
    return MathUtils.fastCos(MathUtils.HALF_PI - theta);
};
module.exports = MathUtils;

},{}],"fp5tv":[function(require,module,exports) {
/**
    * @class Implementation of the linear interpolation function
    *
    * i = a + ( b - a ) * f
    * @member toxi
    */ var LinearInterpolation = function() {
};
var interpolate = function(a, b, f) {
    return a + (b - a) * f;
};
LinearInterpolation.interpolate = interpolate;
LinearInterpolation.prototype.interpolate = interpolate;
//
module.exports = LinearInterpolation;

},{}],"1i9Sc":[function(require,module,exports) {
var is = require('../internals/is'), each = require('../internals/each'), Iterator = require('../internals/Iterator'), mathUtils = require('../math/mathUtils'), TColor = require('./TColor'), HSVDistanceProxy = require('./HSVDistanceProxy'), RGBDistanceProxy = require('./RGBDistanceProxy'), ProximityComparator = require('./ProximityComparator'), AccessCriteria = require('./accessCriteria');
/**
 * A container class of concrete colors. ColorLists can be built manually and
 * are also created when working with {@link ColorRange}s. The class has various
 * methods to manipulate all colors in the list in parallel, as well as sort
 * them by various criteria.
 * @see ColorRange
 * @see AccessCriteria
 */ /**
 @memberOf toxi.color
 @class Creates a ColorList by wrapping the given ArrayList of colors. No copies
 of the given colors are created (shallow copy only).
 @param {TColor[]} colors
*/ var ColorList = function(colors) {
    if (arguments.length > 1) return ColorList.call(this, arguments);
    this.colors = [];
    var i = 0;
    if (is.Array(colors) && colors.length) {
        if (typeof colors[0] === 'number') //argb integers
        for(i = 0, l = colors.length; i < l; i++)this.colors.push(TColor.newARGB(colors[i]));
        else //an array of tcolors
        this.addAll(colors);
    } else if (is.ColorList(colors)) for(i = 0, l = colors.size(); i < l; i++)this.add(colors.get(i));
    else if (is.TColor(colors)) //tcolor
    this.add(colors);
};
ColorList.prototype = {
    constructor: ColorList,
    /**
	* Adds a copy of the given color to the list
	* @param {TColor} c
	* @return itself
	*/ add: function(c) {
        this.colors.push(c.copy());
        return this;
    },
    /**
	* Adds all entries of the TColor collection to the list (shallow copy only,
	* manipulating the new list will modify the original colors).
	* @param {Array} collection
	* @return itself
	*/ addAll: function(collection) {
        var self = this;
        if (!is.Array(collection)) this.colors.push(collection);
        else each(collection, function(color) {
            self.colors.push(color);
        });
        return this;
    },
    /**
	* Adjusts the brightness component of all list colors by the given amount.
	* @param step adjustment value
	* @return itself
	*/ adjustBrightness: function(step) {
        each(this.colors, function(c) {
            c.lighten(step);
        });
        return this;
    },
    /**
	 * Adjusts the saturation component of all list colors by the given amount.
		 * @param step
	 *            adjustment value
	 * @return itself
	 */ adjustSaturation: function(step) {
        each(this.colors, function(c) {
            c.saturate(step);
        });
        return this;
    },
    /**
	* Sorts the list based on two criteria to create clusters/segments within
	* the list.
	* @param clusterCriteria main sort criteria
	* @param subClusterCriteria secondary sort criteria
	* @param numClusters number of clusters
	* @param isReversed true, if reversed sort
	* @return itself
	*/ clusterSort: function(clusterCriteria, subClusterCriteria, numClusters, isReversed) {
        var sorted = this.colors.slice(0), clusters = [], d = 1, i = 0, num = sorted.length, slice;
        sorted.sort(clusterCriteria.compare).reverse();
        for(var j = 0; j < num; j++){
            var c = sorted[j];
            if (c.getComponentValue(clusterCriteria) < d) {
                slice = sorted.slice(i, j);
                slice.sort(subClusterCriteria.compare);
                clusters.push.apply(clusters, slice);
                d -= 1 / numClusters;
                i = j;
            }
        }
        slice = [];
        Array.prototype.push.apply(slice, sorted.slice(i, sorted.length));
        slice.sort(subClusterCriteria.compare);
        clusters.push.apply(clusters, slice);
        if (isReversed) clusters.reverse();
        this.colors = clusters;
        return this;
    },
    /**
	* Switches all list colors to their complementary color.
	* @return itself
	*/ complement: function() {
        this.each(function(c) {
            c.complement();
        });
        return this;
    },
    /**
	* Checks if the given color is part of the list. Check is done by value,
	* not instance.
	* @param color
	* @return true, if the color is present.
	*/ contains: function(color) {
        for(var i = 0, l = this.colors.length; i < l; i++){
            if (this.colors[i].equals(color)) return true;
        }
        return false;
    },
    each: function(fn) {
        each(this.colors, fn);
        return this;
    },
    /**
	* Returns the color at the given index. This function follows Python
	* convention, in that if the index is negative, it is considered relative
	* to the list end. Therefore the color at index -1 is the last color in the
	* list.
	* @param i
	*            index
	* @return color
	*/ get: function(i) {
        if (i < 0) i += this.colors.length;
        return this.colors[i];
    },
    /**
	* Calculates and returns the average color of the list.
	* @return average color or null, if there're no entries yet.
	*/ getAverage: function() {
        var r = 0, g = 0, b = 0, a = 0;
        this.each(function(c) {
            r += c.rgb[0];
            g += c.rgb[1];
            b += c.rgb[2];
            a += c.alpha();
        });
        var num = this.colors.length;
        if (num > 0) return TColor.newRGBA(r / num, g / num, b / num, a / num);
        return undefined;
    },
    /**
	* Creates a new ColorList by blending all colors in the list with each
	* other (successive indices only)
	* @param amount
	*            blend amount
	* @return new color list
	*/ getBlended: function(amount) {
        var clrs = [], len = this.colors.length;
        for(var i = 0; i < len; i++){
            var index = i > 0 ? i - 1 : clrs.length - 1, c = this.colors[index];
            clrs.push(this.colors[i].getBlended(c, amount));
        }
        return new ColorList(clrs);
    },
    /**
	* Finds and returns the darkest color of the list.
	* @return darkest color or null if there're no entries yet.
	*/ getDarkest: function() {
        var darkest, minBrightness = Number.MAX_VALUE;
        this.each(function(c) {
            var luma = c.luminance();
            if (luma < minBrightness) {
                darkest = c;
                minBrightness = luma;
            }
        });
        return darkest;
    },
    /**
	* Finds and returns the lightest (luminance) color of the list.
	* @return lightest color or null, if there're no entries yet.
	*/ getLightest: function() {
        var lightest, maxBrightness = Number.MIN_VALUE;
        this.each(function(c) {
            var luma = c.luminance();
            if (luma > maxBrightness) {
                lightest = c;
                maxBrightness = luma;
            }
        });
        return lightest;
    },
    getRandom: function() {
        var index = Math.floor(mathUtils.random(this.colors.length));
        return this.colors[index];
    },
    getReverse: function() {
        return new ColorList(this.colors).reverse();
    },
    invert: function() {
        this.each(function(c) {
            c.invert();
        });
        return this;
    },
    iterator: function() {
        return new Iterator(this.colors);
    },
    reverse: function() {
        this.colors.reverse();
        return this;
    },
    rotateRYB: function(theta, isRadians) {
        var angle;
        if (theta !== Math.floor(theta) || isRadians) angle = mathUtils.degrees(theta);
        else angle = theta;
        this.each(function(c) {
            c.rotateRYB(angle);
        });
        return this;
    },
    size: function() {
        return this.colors.length;
    },
    sort: function() {
        return this.sortByCriteria(AccessCriteria.HUE, false);
    },
    /**
	* Sorts the list using the given comparator.
	* @param comp
	*            comparator
	* @param isReversed
	*            true, if reversed sort
	* @return itself
	*/ sortByComparator: function(comp, isReversed) {
        //if a normal ( a, b ) sort function instead of an AccessCriteria,
        //wrap it so it can be invoked the same
        if (typeof comp === 'function' && typeof comp.compare === 'undefined') comp = {
            compare: comp
        };
        this.colors.sort(comp.compare);
        if (isReversed) this.colors.reverse();
        return this;
    },
    /**
	* Sorts the list using the given {@link AccessCriteria}.
	* @param criteria
	*            sort criteria
	* @param isReversed
	*            true, if reversed sort
	* @return itself
	*/ sortByCriteria: function(criteria, isReversed) {
        return this.sortByComparator(criteria, isReversed);
    },
    /**
	* Sorts the list by relative distance to each predecessor, starting with
	* the darkest color in the list.
    * @param {toxi.color.*{DistanceProxy}} proxy
	* @param isReversed
	*            true, if list is to be sorted in reverse.
	* @return itself
	*/ sortByDistance: function(proxy, isReversed) {
        if (arguments.length === 1) {
            isReversed = arguments[0];
            proxy = new HSVDistanceProxy();
        }
        if (this.colors.length === 0) return this;
        // Remove the darkest color from the stack,
        // put it in the sorted list as starting element.
        var root = this.getDarkest(), stack = this.colors.slice(0), sorted = [];
        stack.splice(stack.indexOf(root), 1);
        sorted.push(root);
        // Now find the color in the stack closest to that color.
        // Take this color from the stack and add it to the sorted list.
        // Now find the color closest to that color, etc.
        var sortedCount = 0;
        while(stack.length > 1){
            var closest = stack[0], lastSorted = sorted[sortedCount], distance = proxy.distanceBetween(closest, lastSorted);
            for(var i = stack.length - 1; i >= 0; i--){
                var c = stack[i], d = proxy.distanceBetween(c, lastSorted);
                if (d < distance) {
                    closest = c;
                    distance = d;
                }
            }
            stack.splice(stack.indexOf(closest), 1);
            sorted.push(closest);
            sortedCount++;
        }
        sorted.push(stack[0]);
        if (isReversed) sorted.reverse();
        this.colors = sorted;
        return this;
    },
    /**
	* Sorts the list by proximity to the given target color (using RGB distance
	* metrics).
	* @see #sortByProximityTo(ReadonlyTColor, DistanceProxy, boolean)
	* @param target
	*            color
	* @param isReversed
	*            true, if reverse sorted
	* @return sorted list
	*/ sortByProximityTo: function(target, proxy, isReversed) {
        if (arguments.length == 2) {
            target = arguments[0];
            proxy = new RGBDistanceProxy();
            isReversed = arguments[1];
        }
        return this.sortByComparator(new ProximityComparator(target, proxy), isReversed);
    },
    toARGBArray: function() {
        var array = [];
        this.each(function(c) {
            array.push(c.toARGB());
        });
        return array;
    }
};
/**
 * Factory method. Creates a new ColorList of colors randomly sampled from
 * the given ARGB image array. If the number of samples equals or exceeds
 * the number of pixels in the source image and no unique colors are
 * required, the function will simply return the same as
 * {@link #ColorList(int[])}.
 * @param pixels
 *            int array of ARGB pixels
 * @param num
 *            number of colors samples (clipped automatically to number of
 *            pixels in the image)
 * @param uniqueOnly
 *            flag if only unique samples are to be taken (doesn't guarantee
 *            unique colors though)
 * @param maxIterations (optional)
 *            max number of attempts to find a unique color. If no more
 *            unique colors can be found the search is terminated.
 * @return new color list of samples
 */ ColorList.createFromARGBArray = function(pixels, num, uniqueOnly, maxIterations) {
    maxIterations = maxIterations || 100;
    num = mathUtils.min(num, pixels.length);
    if (!uniqueOnly && num == pixels.length) return new ColorList(pixels);
    var colors = [], temp = TColor.BLACK.copy(), i = 0, isUnique = true, numTries = 0, idx;
    for(i = 0; i < num; i++)if (uniqueOnly) {
        isUnique = true;
        numTries = 0;
        do {
            idx = mathUtils.random(pixels.length);
            temp.setARGB(pixels[idx]);
            isUnique = !(colors.indexOf(temp) >= 0);
        }while (!isUnique && ++numTries < maxIterations)
        if (numTries < maxIterations) colors.push(temp.copy());
        else break;
    } else {
        idx = mathUtils.random(pixels.length);
        colors.push(TColor.newARGB(pixels[idx]));
    }
    return new ColorList(colors);
};
ColorList.createUsingStrategy = function() {
    throw new Error('Not allowed, use toxi/color/createListUsingStrategy instead');
};
module.exports = ColorList;

},{"../internals/is":"4G2iR","../internals/each":"dGZ4W","../internals/Iterator":"ahYYm","../math/mathUtils":"bF4PI","./TColor":"4XKw0","./HSVDistanceProxy":"7nQXo","./RGBDistanceProxy":"hYv9p","./ProximityComparator":"5P7sf","./accessCriteria":"awG5S"}],"4XKw0":[function(require,module,exports) {
var numberComparator = require('../internals/numberComparator'), is = require('../internals/is'), mathUtils = require('../math/mathUtils'), vectors = require('../geom/vectors'), Vec2D = vectors.Vec2D, Vec3D = vectors.Vec3D, Hue = require('./Hue');
//private
var dec2hex = function decimalToHexString(number) {
    if (number < 0) number = 4294967295 + number + 1;
    return number.toString(16);
};
/**
 @class Creates a new TColor instance
 @memberOf toxi.color
 */ var TColor = function(tcolor) {
    this.rgb = [];
    this.hsv = [];
    this.cmyk = [];
    this._alpha = 1;
    if (tcolor !== undefined) {
        var buffer = tcolor.toCMYKAArray();
        this.cmyk = buffer.splice(0, 4);
        this.hsv = tcolor.toHSVAArray().splice(0, 3);
        this.rgb = tcolor.toRGBAArray().splice(0, 3);
        this._alpha = tcolor._alpha;
    }
};
TColor.prototype = {
    add: function(c) {
        return this.copy().addSelf(c);
    },
    addSelf: function(c) {
        this.rgb[0] = mathUtils.min(this.rgb[0] + c.rgb[0], 1);
        this.rgb[1] = mathUtils.min(this.rgb[1] + c.rgb[1], 1);
        this.rgb[2] = mathUtils.min(this.rgb[2] + c.rgb[2], 1);
        return this.setRGB(this.rgb);
    },
    /**
	 * Changes the brightness of the color by the given amount in the direction
	 * towards either the black or white point (depending on if current
	 * brightness >= 50%)
	 *
	 * @param {Number} amount
	 * @return itself
	 */ adjustConstrast: function(amount) {
        return this.hsv[2] < 0.5 ? this.darken(amount) : this.lighten(amount);
    },
    /**
	 * Adds the given HSV values as offsets to the current color. Hue will
	 * automatically wrap.
	 *
	 * @param h
	 * @param s
	 * @param v
	 * @return itself
	 */ adjustHSV: function(h, s, v) {
        return this.setHSV([
            this.hsv[0] + h,
            this.hsv[1] + s,
            this.hsv[2] + v
        ]);
    },
    /**
	 * Adds the given RGB values as offsets to the current color. TColor will
	 * clip at black or white.
	 * @param r
	 * @param g
	 * @param b
	 * @return itself
	 */ adjustRGB: function(r, g, b) {
        return this.setRGB([
            this.rgb[0] + r,
            this.rgb[1] + g,
            this.rgb[2] + b
        ]);
    },
    alpha: function() {
        return this._alpha;
    },
    /**
	 * Rotates this color by a random amount (not exceeding the one specified)
	 * and creates variations in saturation and brightness based on the 2nd
	 * parameter.
	 * @param theta
	 *            max. rotation angle (in radians)
	 * @param delta
	 *            max. sat/bri variance
	 * @return itself
	 */ analog: function(theta, delta) {
        var angle = mathUtils.degrees(theta);
        this.rotateRYB(angle * mathUtils.normalizedRandom());
        this.hsv[1] += delta * mathUtils.normalizedRandom();
        this.hsv[2] += delta * mathUtils.normalizedRandom();
        return this.setHSV(this.hsv);
    },
    //shouldnt this be this.cmyk[3]?
    black: function() {
        return this.cmyk[3];
    },
    /**
	 * Blends the color with the given one by the stated amount
	 * @param c
	 *            target color
	 * @param t
	 *            interpolation factor
	 * @return itself
	 */ blend: function(c, t) {
        if (t === undefined) t = 0.5;
        var crgb = c.toRGBAArray();
        this.rgb[0] += (crgb[0] - this.rgb[0]) * t;
        this.rgb[1] += (crgb[1] - this.rgb[1]) * t;
        this.rgb[2] += (crgb[2] - this.rgb[2]) * t;
        this._alpha += (c._alpha - this._alpha) * t;
        return this.setRGB(this.rgb);
    },
    blue: function() {
        return this.rgb[2];
    },
    brightness: function() {
        return this.hsv[2];
    },
    complement: function() {
        return this.rotateRYB(180);
    },
    copy: function() {
        return new TColor(this);
    },
    cyan: function() {
        return this.cmyk[0];
    },
    darken: function(step) {
        this.hsv[2] = mathUtils.clip(this.hsv[2] - step, 0, 1);
        return this.setHSV(this.hsv);
    },
    /**
	Reduced the color's saturation by the given amount.
	@param step
	@return itself
	*/ desaturate: function(step) {
        this.hsv[1] = mathUtils.clip(this.hsv[1] - step, 0, 1);
        return this.setHSV(this.hsv);
    },
    differenceTo: function(c) {
        return TColor.newRGB(Math.abs(this.rgb[0] - c.rgb[0]), Math.abs(this.rgb[1] - c.rgb[1]), Math.abs(this.rgb[2] - c.rgb[2]));
    },
    distanceToCMYK: function(c) {
        var ccmyk = c.toCMYKAArray();
        var dc = this.cmyk[0] - ccmyk[0];
        var dm = this.cmyk[1] - ccmyk[1];
        var dy = this.cmyk[2] - ccmyk[2];
        var dk = this.cmyk[3] - ccmyk[3];
        return Math.sqrt(dc * dc + dm * dm + dy * dy + dk * dk);
    },
    distanceToHSV: function(c) {
        var hue = this.hsv[0] * mathUtils.TWO_PI;
        var hue2 = c.hue() * mathUtils.TWO_PI;
        var v1 = new Vec3D(mathUtils.cos(hue) * this.hsv[1], mathUtils.sin(hue) * this.hsv[1], this.hsv[2]);
        var v2 = new Vec3D(mathUtils.cos(hue2) * c.saturation(), mathUtils.sin(hue2) * c.saturation(), c.brightness());
        return v1.distanceTo(v2);
    },
    distanceToRGB: function(c) {
        var crgb = c.toRGBAArray();
        var dr = this.rgb[0] - crgb[0];
        var dg = this.rgb[1] - crgb[1];
        var db = this.rgb[2] - crgb[2];
        return Math.sqrt(dr * dr + dg * dg + db * db);
    },
    equals: function(o) {
        if (is.TColor(o)) {
            var c = o;
            var dr = c.rgb[0] - this.rgb[0];
            var dg = c.rgb[1] - this.rgb[1];
            var db = c.rgb[2] - this.rgb[2];
            var da = c.alpha() - this._alpha;
            var d = Math.sqrt(dr * dr + dg * dg + db * db + da * da);
            return d < TColor.EPS;
        }
        return false;
    },
    getAnalog: function(theta, delta) {
        return new TColor(this).analog(theta, delta);
    },
    getBlended: function(c, t) {
        return new TColor(this).blend(c, t);
    },
    getClosestHue: function(primaryOnly) {
        return Hue.getClosest(this.hsv[0], primaryOnly === true);
    },
    getComplement: function() {
        return new TColor(this).complement();
    },
    getComponentValue: function(criteria) {
        return criteria.getComponentValueFor(this);
    },
    getDarkened: function(step) {
        return new TColor(this).darken(step);
    },
    getDesaturated: function(step) {
        return new TColor(this).desaturate(step);
    },
    getDifferenceTo: function(c) {
        return this.copy().differenceTo(c);
    },
    getInverted: function() {
        return new TColor(this).invert();
    },
    getLightened: function(step) {
        return new TColor(this).lighten(step);
    },
    getRotatedRYB: function(theta) {
        return new TColor(this).rotateRYB(theta);
    },
    getSaturated: function(step) {
        return new TColor(this).saturate(step);
    },
    green: function() {
        return this.rgb[1];
    },
    hue: function() {
        return this.hsv[0];
    },
    invert: function() {
        this.rgb[0] = 1 - this.rgb[0];
        this.rgb[1] = 1 - this.rgb[1];
        this.rgb[2] = 1 - this.rgb[2];
        return this.setRGB(this.rgb);
    },
    isBlack: function() {
        return this.rgb[0] <= TColor.BLACK_POINT && this.rgb[0] === this.rgb[1] && this.rgb[0] === this.rgb[2];
    },
    isGrey: function() {
        return this.hsv[1] < TColor.GREY_THRESHOLD;
    },
    /*
	isPrimary:function() {
		return Hue.isPrimary(this.hsv[0]);
	},*/ isWhite: function() {
        return this.rgb[0] >= TColor.WHITE_POINT && this.rgb[0] === this.rgb[1] && this.rgb[0] === this.rgb[2];
    },
    lighten: function(step) {
        this.hsv[2] = mathUtils.clip(this.hsv[2] + step, 0, 1);
        return this.setHSV(this.hsv);
    },
    luminance: function() {
        return this.rgb[0] * 0.299 + this.rgb[1] * 0.587 + this.rgb[2] * 0.114;
    },
    magenta: function() {
        return this.cmyk[1];
    },
    red: function() {
        return this.rgb[0];
    },
    rotateRYB: function(theta) {
        var deg = parseInt(mathUtils.degrees(theta), 10), h = this.hsv[0] * 360, i = 0, p, q;
        theta %= 360;
        var resultHue = 0;
        for(i = 0; i < TColor.RYB_WHEEL.length - 1; i++){
            p = TColor.RYB_WHEEL[i];
            q = TColor.RYB_WHEEL[i + 1];
            if (q.y < p.y) q.y += 360;
            if (p.y <= h && h <= q.y) {
                resultHue = p.x + (q.x - p.x) * (h - p.y) / (q.y - p.y);
                break;
            }
        }
        // And the user-given angle (e.g. complement).
        resultHue = (resultHue + theta) % 360;
        // For the given angle, find out what hue is
        // located there on the artistic color wheel.
        for(i = 0; i < TColor.RYB_WHEEL.length - 1; i++){
            p = TColor.RYB_WHEEL[i];
            q = TColor.RYB_WHEEL[i + 1];
            if (q.y < p.y) q.y += 360;
            if (p.x <= resultHue && resultHue <= q.x) {
                h = p.y + (q.y - p.y) * (resultHue - p.x) / (q.x - p.x);
                break;
            }
        }
        this.hsv[0] = h % 360 / 360;
        return this.setHSV(this.hsv);
    },
    saturate: function(step) {
        this.hsv[1] = mathUtils.clip(this.hsv[1] + step, 0, 1);
        return this.setHSV(this.hsv);
    },
    saturation: function() {
        return this.hsv[1];
    },
    setAlpha: function(alpha) {
        this._alpha = alpha;
        return this;
    },
    setARGB: function(argb) {
        this.setRGB((argb >> 16 & 255) * TColor.INV8BIT, (argb >> 8 & 255) * TColor.INV8BIT, (argb & 255) * TColor.INV8BIT);
        this._alpha = (argb >>> 24) * TColor.INV8BIT;
        return this;
    },
    setBlack: function(val) {
        this.cmyk[3] = val;
        return this.setCMYK(this.cmyk);
    },
    setBlue: function(blue) {
        this.rgb[2] = blue;
        return this.setRGB(this.rgb);
    },
    setBrightness: function(brightness) {
        this.hsv[2] = mathUtils.clip(brightness, 0, 1);
        return this.setHSV(this.hsv);
    },
    setCMYK: function(c, m, y, k) {
        //if it was passed in as an array instead of separate values
        if (is.Array(c)) {
            m = c[1];
            y = c[2];
            k = c[3];
            c = c[0];
        }
        this.cmyk[0] = c;
        this.cmyk[1] = m;
        this.cmyk[2] = y;
        this.cmyk[3] = k;
        this.rgb = TColor.cmykToRGB(this.cmyk[0], this.cmyk[1], this.cmyk[2], this.cmyk[3]);
        this.hsv = TColor.rgbToHSV(this.rgb[0], this.rgb[1], this.rgb[2]);
        return this;
    },
    setComponent: function(criteria, val) {
        criteria.setComponentValueFor(this, val);
        return this;
    },
    setCyan: function(val) {
        this.cmyk[0] = val;
        return this.setCMYK(this.cmyk);
    },
    setGreen: function(green) {
        this.rgb[1] = green;
        return this.setRGB(this.rgb);
    },
    setHSV: function(h, s, v) {
        if (is.Array(h)) {
            s = h[1];
            v = h[2];
            h = h[0];
        }
        var newHSV = [
            h,
            s,
            v
        ];
        this.hsv[0] = newHSV[0] % 1;
        if (this.hsv[0] < 0) this.hsv[0]++;
        this.hsv[1] = mathUtils.clip(newHSV[1], 0, 1);
        this.hsv[2] = mathUtils.clip(newHSV[2], 0, 1);
        this.rgb = TColor.hsvToRGB(this.hsv[0], this.hsv[1], this.hsv[2]);
        this.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);
        return this;
    },
    setHue: function(hue) {
        hue %= 1;
        if (hue < 0) hue++;
        this.hsv[0] = hue;
        return this.setHSV(this.hsv);
    },
    setMagenta: function(val) {
        this.cmyk[1] = val;
        return this.setCMYK(this.cmyk);
    },
    setRed: function(red) {
        this.rgb[0] = red;
        return this.setRGB(this.rgb);
    },
    setRGB: function(r, g, b) {
        if (is.Array(r)) {
            g = r[1];
            b = r[2];
            r = r[0];
        }
        this.rgb[0] = mathUtils.clip(r, 0, 1);
        this.rgb[1] = mathUtils.clip(g, 0, 1);
        this.rgb[2] = mathUtils.clip(b, 0, 1);
        this.cmyk = TColor.rgbToCMYK(this.rgb[0], this.rgb[1], this.rgb[2]);
        this.hsv = TColor.rgbToHSV(this.rgb[0], this.rgb[1], this.rgb[2]);
        return this;
    },
    setSaturation: function(saturation) {
        this.hsv[1] = mathUtils.clip(saturation, 0, 1);
        return this.setHSV(this.hsv);
    },
    setYellow: function(val) {
        this.cmyk[2] = val;
        return this.setCMYK(this.cmyk);
    },
    sub: function(c) {
        return this.copy().subSelf(c);
    },
    subSelf: function(c) {
        this.rgb[0] = mathUtils.max(this.rgb[0] - c.rgb[0], 0);
        this.rgb[1] = mathUtils.max(this.rgb[1] - c.rgb[1], 0);
        this.rgb[2] = mathUtils.max(this.rgb[2] - c.rgb[2], 0);
        return this.setRGB(this.rgb);
    },
    toARGB: function() {
        var r = parseInt(this.rgb[0] * 255, 10), g = parseInt(this.rgb[1] * 255, 10), b = parseInt(this.rgb[2] * 255, 10), a = parseInt(this._alpha * 255, 10);
        return r << 16 | g << 8 | b | a << 24;
    },
    toCMYKAArray: function(cmyka) {
        if (cmyka === undefined) cmyka = [];
        cmyka[0] = this.cmyk[0];
        cmyka[1] = this.cmyk[1];
        cmyka[2] = this.cmyk[2];
        cmyka[3] = this.cmyk[3];
        cmyka[4] = this._alpha;
        return cmyka;
    },
    toHex: function() {
        var hex = dec2hex(this.toARGB());
        if (hex.length > 6) hex = hex.substring(2);
        return hex;
    },
    toHexCSS: function() {
        return "#" + this.toHex();
    },
    toHSVAArray: function(hsva) {
        if (hsva === undefined) hsva = [];
        hsva[0] = this.hsv[0];
        hsva[1] = this.hsv[1];
        hsva[2] = this.hsv[2];
        hsva[3] = this._alpha;
        return hsva;
    },
    /**
	* to CSS's hsl() string
	*/ toHSLCSS: function() {
        var hsv = this.hsv;
        //hue is 0 - 360
        var h = Math.floor(hsv[0] * 360);
        //saturation & value/luminosity is 0-100 (%)
        var s = Math.floor(hsv[1] * 100);
        var v = Math.floor(hsv[2] * 100);
        return "hsl(" + h + "," + s + "%," + v + "%)";
    },
    /**
	 * to CSS's hsla() string
	 */ toHSLACSS: function() {
        var hsv = this.hsv;
        //hue is 0 - 360
        var h = Math.floor(hsv[0] * 360);
        //saturation & value/luminosity is 0-100 (%)
        var s = Math.floor(hsv[1] * 100);
        var v = Math.floor(hsv[2] * 100);
        //alpha stays in range 0 - 1
        return "hsla(" + h + "," + s + "%," + v + "%," + this._alpha + ")";
    },
    /**
	* to integer for color
	*/ toInt: function() {
        return Number('0x' + this.toHex());
    },
    /**
	 * to an Array of RGBA values
	 * @param rgba
	 * @param offset (optional)
	 * @return rgba array
	 */ toRGBAArray: function(rgba, offset) {
        rgba = rgba || [];
        offset = offset || 0;
        rgba[offset++] = this.rgb[0];
        rgba[offset++] = this.rgb[1];
        rgba[offset++] = this.rgb[2];
        rgba[offset] = this._alpha;
        return rgba;
    },
    /**
     * to an Array of RGBA decimal values, i.e. [255,255,255,255] for solid white
     * @param {Array|TypedArray} [rgba] optionally pass in an array or a TypedArray such as Uint8ClampedArray
     * @param {Number} [offset] index offset to put these values in the array
     * @return {Array}
     */ toRGBADecimalArray: function(rgba, offset) {
        rgba = rgba || [];
        offset = offset || 0;
        rgba[offset++] = this.rgb[0] * 255;
        rgba[offset++] = this.rgb[1] * 255;
        rgba[offset++] = this.rgb[2] * 255;
        rgba[offset] = this._alpha * 255;
        return rgba;
    },
    toRGBCSS: function(asPercents) {
        var rgb = this.rgb, mult = asPercents ? 100 : 255, u = asPercents ? '%' : '', f = Math.floor;
        return "rgb(" + f(rgb[0] * mult) + u + "," + f(rgb[1] * mult) + u + "," + f(rgb[2] * mult) + u + ")";
    },
    /**
	 * to an rgba string valid for CSS Color Module's rgba()
	 * @param asPercents if true creates string based on percents rather than 0-255
	 */ toRGBACSS: function(asPercents) {
        var rgb = this.rgb, mult = asPercents ? 100 : 255, u = asPercents ? '%' : '', f = Math.floor;
        return "rgba(" + f(rgb[0] * mult) + u + "," + f(rgb[1] * mult) + u + "," + f(rgb[2] * mult) + u + "," + this._alpha + ")";
    },
    toString: function() {
        return "TColor: rgb: " + this.rgb[0] + ", " + this.rgb[1] + ", " + this.rgb[2] + " hsv: " + this.hsv[0] + "," + this.hsv[1] + "," + this.hsv[2] + " cmyk: " + this.cmyk[0] + ", " + this.cmyk[1] + "," + this.cmyk[2] + "," + this.cmyk[3] + " alpha: " + this._alpha;
    },
    yellow: function() {
        return this.cmyk[2];
    }
};
TColor.INV60DEGREES = 60 / 360;
TColor.INV8BIT = 1 / 255;
TColor.EPS = 0.001;
/**
 * Maximum rgb component value for a color to be classified as black.
 * @see #isBlack()
 */ TColor.BLACK_POINT = 0.08;
/**
 * Minimum rgb component value for a color to be classified as white.
 * @see #isWhite()
 */ TColor.WHITE_POINT = 1;
/**
 * Maximum saturations value for a color to be classified as grey
 * @see #isGrey()
 */ TColor.GREY_THRESHOLD = 0.01;
/**
 * Converts CMYK floats into an RGB array.
 * @param c
 * @param m
 * @param y
 * @param k
 * @param rgb optional rgb array to populate
 * @return rgb array
 */ TColor.cmykToRGB = function(c, m, y, k, rgb) {
    if (rgb === undefined) rgb = [
        0,
        0,
        0
    ];
    rgb[0] = 1 - Math.min(1, c + k);
    rgb[1] = 1 - Math.min(1, m + k);
    rgb[2] = 1 - Math.min(1, y + k);
    return rgb;
};
/**
 * Converts hex string into a RGB array.
 * @param hexRGB
 * @param rgb array optional
 * @return rgb array
 */ TColor.hexToRGB = function(hexRGB, rgb) {
    if (rgb === undefined) rgb = [];
    //var rgbInt = parseInt(hexRGB,16);
    hexRGB = hexRGB.charAt(0) == "#" ? hexRGB.substring(1, 7) : hexRGB;
    rgb[0] = parseInt(hexRGB.substring(0, 2), 16) * TColor.INV8BIT; //((rgbInt >> 16) & 0xff) * TColor.INV8BIT;
    rgb[1] = parseInt(hexRGB.substring(2, 4), 16) * TColor.INV8BIT; //((rgbInt >> 8) & 0xff) * TColor.INV8BIT;
    rgb[2] = parseInt(hexRGB.substring(4, 6), 16) * TColor.INV8BIT; //((rgbInt & 0xff) * TColor.INV8BIT);
    return rgb;
};
/**
 * Converts HSV values into RGB array.
 * @param h
 * @param s
 * @param v
 * @param rgb array optional
 * @return rgb array
 */ TColor.hsvToRGB = function(h, s, v, rgb) {
    if (rgb === undefined) rgb = [];
    if (s === 0) rgb[0] = rgb[1] = rgb[2] = v;
    else {
        h /= TColor.INV60DEGREES;
        var i = parseInt(h, 10), f = h - i, p = v * (1 - s), q = v * (1 - s * f), t = v * (1 - s * (1 - f));
        if (i === 0) {
            rgb[0] = v;
            rgb[1] = t;
            rgb[2] = p;
        } else if (i == 1) {
            rgb[0] = q;
            rgb[1] = v;
            rgb[2] = p;
        } else if (i == 2) {
            rgb[0] = p;
            rgb[1] = v;
            rgb[2] = t;
        } else if (i == 3) {
            rgb[0] = p;
            rgb[1] = q;
            rgb[2] = v;
        } else if (i == 4) {
            rgb[0] = t;
            rgb[1] = p;
            rgb[2] = v;
        } else {
            rgb[0] = v;
            rgb[1] = p;
            rgb[2] = q;
        }
    }
    return rgb;
};
/**
 * Converts CIE Lab to RGB components.
 * First we have to convert to XYZ color space. Conversion involves using a
 * white point, in this case D65 which represents daylight illumination.
 * Algorithm adopted from: http://www.easyrgb.com/math.php
 * @param l
 * @param a
 * @param b
 * @param rgb
 * @return rgb array
 */ TColor.labToRGB = function(l, a, b, rgb) {
    if (rgb === undefined) rgb = [];
    var y = (l + 16) / 116, x = a / 500 + y, z = y - b / 200, i = 0;
    rgb[0] = x;
    rgb[1] = y;
    rgb[2] = z;
    for(i = 0; i < 3; i++){
        var p = Math.pow(rgb[i], 3);
        if (p > 0.008856) rgb[i] = p;
        else rgb[i] = (rgb[i] - 16 / 116) / 7.787;
    }
    // Observer = 2, Illuminant = D65
    x = rgb[0] * 0.95047;
    y = rgb[1];
    z = rgb[2] * 1.08883;
    rgb[0] = x * 3.2406 + y * -1.5372 + z * -0.4986;
    rgb[1] = x * -0.9689 + y * 1.8758 + z * 0.0415;
    rgb[2] = x * 0.0557 + y * -0.204 + z * 1.057;
    var tpow = 1 / 2.4;
    for(i = 0; i < 3; i++)if (rgb[i] > 0.0031308) rgb[i] = 1.055 * Math.pow(rgb[i], tpow) - 0.055;
    else rgb[i] = 12.92 * rgb[i];
    return rgb;
};
/**
 * Factory method. Creates new color from ARGB int.
 * @param argb
 * @return new color
 */ TColor.newARGB = function(argb) {
    return TColor.newRGBA((argb >> 16 & 255) * TColor.INV8BIT, (argb >> 8 & 255) * TColor.INV8BIT, (argb & 255) * TColor.INV8BIT, (argb >>> 24) * TColor.INV8BIT);
};
/**
Factory method. Creates new color from CMYK values.
@param c
@param m
@param y
@param k
@return new color
*/ TColor.newCMYK = function(c, m, y, k) {
    return TColor.newCMYKA(c, m, y, k, 1);
};
/**
Factory method. Creates new color from CMYK + alpha values.
@param c
@param m
@param y
@param k
@param a
@return new color
*/ TColor.newCMYKA = function(c, m, y, k, a) {
    var col = new TColor();
    col.setCMYK([
        c,
        m,
        y,
        k
    ]);
    col.setAlpha(mathUtils.clip(a, 0, 1));
    return col;
};
/**
Factory method. Creats a new color from any CSS color values
@param {String} css value
@return new color
*/ TColor.newCSS = function(css) {
    //remove all spaces
    while(css.indexOf(' ') > -1)css = css.replace(' ', '');
    css = css.toLowerCase();
    function digits1(colorFnStr) {
        //hack off the trailing )
        var str = css.substr(0, css.length - 1);
        //hack off rgb(, rgba(, hsl(, hsla(
        return str.substr(colorFnStr.length + 1, str.length).split(',');
    }
    function makeNumbers(digits) {
        var i = 0, l = digits.length;
        for(i = 0; i < l; i++)//cast to numbers from Strings
        digits[i] = Number(digits[i]);
        return digits;
    }
    var conversions = {
        '#': function() {
            return TColor.newHex(css.substr(1, css.length));
        },
        'rgba': function() {
            var vals = makeNumbers(digits1('rgba'));
            return TColor.newRGBA(vals[0] / 255, vals[1] / 255, vals[2] / 255, vals[3]);
        },
        'rgb': function() {
            var vals = makeNumbers(digits1('rgb'));
            return TColor.newRGBA(vals[0] / 255, vals[1] / 255, vals[2] / 255, 1);
        },
        'hsla': function(vals) {
            vals = vals || digits1('hsla');
            vals[0] = Number(vals[0]) / 360;
            vals[1] = Number(vals[1].substr(0, vals[1].length - 1)) / 100;
            vals[2] = Number(vals[2].substr(0, vals[2].length - 1)) / 100;
            vals[3] = Number(vals[3]);
            return TColor.newHSVA(vals[0], vals[1], vals[2], vals[3]);
        },
        'hsl': function() {
            var vals = digits1('hsl');
            vals.push(1);
            return conversions.hsla(vals);
        }
    };
    //if it was an x11 name return a copy
    if (TColor.X11[css] !== undefined) return TColor.X11[css].copy();
    //else get it from hex or color function
    for(var method in conversions){
        if (css.indexOf(method) > -1) return conversions[method]();
    }
};
/**
Factory method. Creates a new shade of gray + alpha.
@param gray
@return new color.
*/ TColor.newGray = function(gray) {
    return TColor.newGrayAlpha(gray, 1);
};
TColor.newGrayAlpha = function(gray, alpha) {
    var c = new TColor();
    c.setRGB([
        gray,
        gray,
        gray
    ]);
    c.setAlpha(alpha);
    return c;
};
/**
Factory method. New color from hex string.
@param hexRGB
@return new color
*/ TColor.newHex = function(hexRGB) {
    var c = new TColor();
    c.setRGB(TColor.hexToRGB(hexRGB));
    c.setAlpha(1);
    return c;
};
/**
Factory method. New color from hsv values.
@param h
@param s
@param v
@return new color
*/ TColor.newHSV = function(h, s, v) {
    return TColor.newHSVA(h, s, v, 1);
};
TColor.newHSVA = function(h, s, v, a) {
    var c = new TColor();
    c.setHSV(h, s, v);
    c.setAlpha(mathUtils.clip(a, 0, 1));
    return c;
};
/**
Factory method. Creates new random color. Alpha is always 1.0.
@return random color
*/ TColor.newRandom = function() {
    return TColor.newRGBA(Math.random(), Math.random(), Math.random(), 1);
};
/**
Factory method. Creates new color from RGB values. Alpha is set to 1.0.
@param r
@param g
@param b
@return new color
*/ TColor.newRGB = function(r, g, b) {
    return TColor.newRGBA(r, g, b, 1);
};
TColor.newRGBA = function(r, g, b, a) {
    var c = new TColor();
    c.setRGB(r, g, b);
    c.setAlpha(mathUtils.clip(a, 0, 1));
    return c;
};
/**
Converts the RGB values into a CMYK array.
@param r
@param g
@param b
@param cmyk array optional
@return cmyk array
*/ TColor.rgbToCMYK = function(r, g, b, cmyk) {
    if (cmyk === undefined) cmyk = [];
    cmyk[0] = 1 - r;
    cmyk[1] = 1 - g;
    cmyk[2] = 1 - b;
    cmyk[3] = mathUtils.min(cmyk[0], cmyk[1], cmyk[2]);
    cmyk[0] = mathUtils.clip(cmyk[0] - cmyk[3], 0, 1);
    cmyk[1] = mathUtils.clip(cmyk[1] - cmyk[3], 0, 1);
    cmyk[2] = mathUtils.clip(cmyk[2] - cmyk[3], 0, 1);
    cmyk[3] = mathUtils.clip(cmyk[3], 0, 1);
    return cmyk;
};
/**
Formats the RGB float values into hex integers.
@param r
@param g
@param b
@return hex string
*/ TColor.rgbToHex = function(r, g, b) {
    var hex = dec2hex(mathUtils.clip(r, 0, 1) * 255) + dec2hex(mathUtils.clip(g, 0, 1) * 255) + dec2hex(mathUtils.clip(b, 0, 1) * 255);
    return hex;
};
/**
Converts the RGB values into an HSV array.
@param r
@param g
@param b
@param hsv optional
@return hsv array
*/ TColor.rgbToHSV = function(r, g, b, hsv) {
    if (hsv === undefined) hsv = [];
    var h = 0, s = 0, v = mathUtils.max(r, g, b), d = v - mathUtils.min(r, g, b);
    if (v !== 0) s = d / v;
    if (s !== 0) {
        if (numberComparator(r, v) === 0) h = (g - b) / d;
        else if (numberComparator(g, v) === 0) h = 2 + (b - r) / d;
        else h = 4 + (r - g) / d;
    }
    h *= TColor.INV60DEGREES;
    if (h < 0) h += 1;
    hsv[0] = h;
    hsv[1] = s;
    hsv[2] = v;
    return hsv;
};
TColor.RED = TColor.newRGB(1, 0, 0);
TColor.RYB_WHEEL = [
    new Vec2D(0, 0),
    new Vec2D(15, 8),
    new Vec2D(30, 17),
    new Vec2D(45, 26),
    new Vec2D(60, 34),
    new Vec2D(75, 41),
    new Vec2D(90, 48),
    new Vec2D(105, 54),
    new Vec2D(120, 60),
    new Vec2D(135, 81),
    new Vec2D(150, 103),
    new Vec2D(165, 123),
    new Vec2D(180, 138),
    new Vec2D(195, 155),
    new Vec2D(210, 171),
    new Vec2D(225, 187),
    new Vec2D(240, 204),
    new Vec2D(255, 219),
    new Vec2D(270, 234),
    new Vec2D(285, 251),
    new Vec2D(300, 267),
    new Vec2D(315, 282),
    new Vec2D(330, 298),
    new Vec2D(345, 329),
    new Vec2D(360, 0)
];
TColor.GREEN = TColor.newRGB(0, 1, 0);
TColor.BLUE = TColor.newRGB(0, 0, 1);
TColor.CYAN = TColor.newRGB(0, 1, 1);
TColor.MAGENTA = TColor.newRGB(1, 0, 1);
TColor.YELLOW = TColor.newRGB(1, 1, 0);
TColor.BLACK = TColor.newRGB(0, 0, 0);
TColor.WHITE = TColor.newRGB(1, 1, 1);
//Generate a TColor for every X11 color
TColor.X11 = {
};
(function() {
    //RGB values for every X11 Color Name
    //http://en.wikipedia.org/wiki/Web_colors
    var x11 = {
        indianred: [
            205,
            92,
            92
        ],
        lightcoral: [
            240,
            128,
            128
        ],
        salmon: [
            250,
            128,
            114
        ],
        darksalmon: [
            233,
            150,
            122
        ],
        lightsalmon: [
            255,
            160,
            122
        ],
        red: [
            255,
            0,
            0
        ],
        crimson: [
            220,
            20,
            60
        ],
        fireBrick: [
            178,
            34,
            34
        ],
        darkred: [
            139,
            0,
            0
        ],
        pink: [
            255,
            192,
            203
        ],
        lightpink: [
            255,
            182,
            193
        ],
        hotpink: [
            255,
            105,
            180
        ],
        deeppink: [
            255,
            20,
            147
        ],
        mediumvioletred: [
            199,
            21,
            133
        ],
        palevioletred: [
            219,
            112,
            147
        ],
        coral: [
            255,
            127,
            80
        ],
        tomato: [
            255,
            99,
            71
        ],
        orangered: [
            255,
            69,
            0
        ],
        darkorange: [
            255,
            140,
            0
        ],
        orange: [
            255,
            165,
            0
        ],
        gold: [
            255,
            215,
            0
        ],
        yellow: [
            255,
            255,
            0
        ],
        lightyellow: [
            255,
            255,
            224
        ],
        lemonchiffon: [
            255,
            250,
            205
        ],
        lightgoldenrodyellow: [
            250,
            250,
            210
        ],
        papayawhip: [
            255,
            239,
            213
        ],
        moccasin: [
            255,
            228,
            181
        ],
        peachpuff: [
            255,
            218,
            185
        ],
        palegoldenrod: [
            238,
            232,
            170
        ],
        khaki: [
            240,
            230,
            140
        ],
        darkkhaki: [
            189,
            183,
            107
        ],
        lavender: [
            230,
            230,
            250
        ],
        thistle: [
            216,
            191,
            216
        ],
        plum: [
            221,
            160,
            221
        ],
        violet: [
            238,
            130,
            238
        ],
        orchid: [
            218,
            112,
            214
        ],
        fuchsia: [
            255,
            0,
            255
        ],
        Magenta: [
            255,
            0,
            255
        ],
        mediumorchid: [
            186,
            85,
            211
        ],
        mediumpurple: [
            147,
            112,
            219
        ],
        blueviolet: [
            138,
            43,
            226
        ],
        darkviolet: [
            148,
            0,
            211
        ],
        darkorchid: [
            153,
            50,
            204
        ],
        darkmagenta: [
            139,
            0,
            139
        ],
        purple: [
            128,
            0,
            128
        ],
        indigo: [
            75,
            0,
            130
        ],
        darkslateblue: [
            72,
            61,
            139
        ],
        slateblue: [
            106,
            90,
            205
        ],
        mediumslateblue: [
            123,
            104,
            238
        ],
        greenyellow: [
            173,
            255,
            47
        ],
        chartreuse: [
            127,
            255,
            0
        ],
        lawngreen: [
            124,
            252,
            0
        ],
        lime: [
            0,
            255,
            0
        ],
        limegreen: [
            50,
            205,
            50
        ],
        palegreen: [
            152,
            251,
            152
        ],
        lightgreen: [
            144,
            238,
            144
        ],
        mediumspringgreen: [
            0,
            250,
            154
        ],
        springgreen: [
            0,
            255,
            127
        ],
        mediumseagreen: [
            60,
            179,
            113
        ],
        seagreen: [
            46,
            139,
            87
        ],
        forestgreen: [
            34,
            139,
            34
        ],
        green: [
            0,
            128,
            0
        ],
        darkgreen: [
            0,
            100,
            0
        ],
        yellowgreen: [
            154,
            205,
            50
        ],
        olivedrab: [
            107,
            142,
            35
        ],
        olive: [
            128,
            128,
            0
        ],
        darkolivegreen: [
            85,
            107,
            47
        ],
        mediumaquamarine: [
            102,
            205,
            170
        ],
        darkseagreen: [
            143,
            188,
            143
        ],
        lightseagreen: [
            32,
            178,
            170
        ],
        darkcyan: [
            0,
            139,
            139
        ],
        teal: [
            0,
            128,
            128
        ],
        aqua: [
            0,
            255,
            255
        ],
        cyan: [
            0,
            255,
            255
        ],
        lightcyan: [
            224,
            255,
            255
        ],
        paleturquoise: [
            175,
            238,
            238
        ],
        aquamarine: [
            127,
            255,
            212
        ],
        turquoise: [
            64,
            224,
            208
        ],
        mediumturquoise: [
            72,
            209,
            204
        ],
        darkturquoise: [
            0,
            206,
            209
        ],
        cadetblue: [
            95,
            158,
            160
        ],
        steelblue: [
            70,
            130,
            180
        ],
        lightsteelblue: [
            176,
            196,
            222
        ],
        powderblue: [
            176,
            224,
            230
        ],
        lightblue: [
            173,
            216,
            230
        ],
        skyblue: [
            135,
            206,
            235
        ],
        lightskyblue: [
            135,
            206,
            250
        ],
        deepskyblue: [
            0,
            191,
            255
        ],
        dodgerblue: [
            30,
            144,
            255
        ],
        cornflowerblue: [
            100,
            149,
            237
        ],
        royalblue: [
            65,
            105,
            225
        ],
        blue: [
            0,
            0,
            255
        ],
        mediumblue: [
            0,
            0,
            205
        ],
        darkblue: [
            0,
            0,
            139
        ],
        navy: [
            0,
            0,
            128
        ],
        midnightblue: [
            25,
            25,
            112
        ],
        cornsilk: [
            255,
            248,
            220
        ],
        blanchedalmond: [
            255,
            235,
            205
        ],
        bisque: [
            255,
            228,
            196
        ],
        navajowhite: [
            255,
            222,
            173
        ],
        wheat: [
            245,
            222,
            179
        ],
        burlywood: [
            222,
            184,
            135
        ],
        tan: [
            210,
            180,
            140
        ],
        rosybrown: [
            188,
            143,
            143
        ],
        sandybrown: [
            244,
            164,
            96
        ],
        goldenrod: [
            218,
            165,
            32
        ],
        darkgoldenrod: [
            184,
            134,
            11
        ],
        Peru: [
            205,
            133,
            63
        ],
        chocolate: [
            210,
            105,
            30
        ],
        saddlebrown: [
            139,
            69,
            19
        ],
        sienna: [
            160,
            82,
            45
        ],
        brown: [
            165,
            42,
            42
        ],
        maroon: [
            128,
            0,
            0
        ],
        white: [
            255,
            255,
            255
        ],
        snow: [
            255,
            250,
            250
        ],
        honeydew: [
            240,
            255,
            240
        ],
        mintcream: [
            245,
            255,
            250
        ],
        azure: [
            240,
            255,
            255
        ],
        aliceblue: [
            240,
            248,
            255
        ],
        ghostwhite: [
            248,
            248,
            255
        ],
        whitesmoke: [
            245,
            245,
            245
        ],
        seashell: [
            255,
            245,
            238
        ],
        beige: [
            245,
            245,
            220
        ],
        oldlace: [
            253,
            245,
            230
        ],
        floralwhite: [
            255,
            250,
            240
        ],
        ivory: [
            255,
            255,
            240
        ],
        antiquewhite: [
            250,
            235,
            215
        ],
        linen: [
            250,
            240,
            230
        ],
        lavenderblush: [
            255,
            240,
            245
        ],
        mistyrose: [
            255,
            228,
            225
        ],
        gainsboro: [
            220,
            220,
            220
        ],
        lightgray: [
            211,
            211,
            211
        ],
        silver: [
            192,
            192,
            192
        ],
        darkgray: [
            169,
            169,
            169
        ],
        gray: [
            128,
            128,
            128
        ],
        dimgray: [
            105,
            105,
            105
        ],
        lightslategray: [
            119,
            136,
            153
        ],
        slategray: [
            112,
            128,
            144
        ],
        darkslategray: [
            47,
            79,
            79
        ],
        black: [
            0,
            0,
            0
        ],
        bark: [
            64,
            48,
            33
        ]
    };
    var name, clr;
    for(name in x11)if (x11.hasOwnProperty(name)) {
        clr = x11[name];
        TColor.X11[name] = TColor.newRGB(clr[0] / 255, clr[1] / 255, clr[2] / 255);
        //for all of the grays duplicate with grey
        if (name.indexOf('gray') >= 0) TColor.X11[name.replace('gray', 'grey')] = TColor.X11[name];
    }
    //add `transparent`
    TColor.X11.transparent = TColor.newRGBA(0, 0, 0, 0);
})();
module.exports = TColor;

},{"../internals/numberComparator":"aE48M","../internals/is":"4G2iR","../math/mathUtils":"bF4PI","../geom/vectors":"aHZPH","./Hue":"b7U9c"}],"aHZPH":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils');
var has = require('../internals/has'), is = require('../internals/is');
var hasXY = has.XY;
var isRect = is.Rect;
//modules defined within
var Vec2D, Vec3D;
/**
	@class a two-dimensional vector class
	*/ Vec2D = function(a, b) {
    if (hasXY(a)) {
        b = a.y;
        a = a.x;
    } else {
        a = a || 0;
        b = b || 0;
    }
    this.x = a;
    this.y = b;
};
Vec2D.Axis = {
    X: {
        getVector: function() {
            return Vec2D.X_AXIS;
        },
        toString: function() {
            return "Vec2D.Axis.X";
        }
    },
    Y: {
        getVector: function() {
            return Vec2D.Y_AXIS;
        },
        toString: function() {
            return "Vec2D.Axis.Y";
        }
    }
};
//private,
var _getXY = function() {
    //create a temp object to avoid creating garbage-collectable objects
    var temp = {
        x: 0,
        y: 0
    };
    return function getXY(a, b) {
        if (a && typeof a.x === 'number' && typeof a.y === 'number') return a;
        else {
            if (a !== undefined && b === undefined) b = a;
            else if (a === undefined) a = 0;
            else if (b === undefined) b = 0;
        }
        temp.x = a;
        temp.y = b;
        return temp;
    };
}();
//public
Vec2D.prototype = {
    abs: function() {
        this.x = Math.abs(this.x);
        this.y = Math.abs(this.y);
        return this;
    },
    add: function(a, b) {
        var v = new Vec2D(a, b);
        v.x += this.x;
        v.y += this.y;
        return v;
    },
    /**
		 * Adds vector {a,b,c} and overrides coordinates with result.
		 *
		 * @param a
		 *				X coordinate
		 * @param b
		 *				Y coordinate
		 * @return itself
		 */ addSelf: function(a, b) {
        var v = _getXY(a, b);
        this.x += v.x;
        this.y += v.y;
        return this;
    },
    angleBetween: function(v, faceNormalize) {
        if (faceNormalize === undefined) return Math.acos(this.dot(v));
        var theta = faceNormalize ? this.getNormalized().dot(v.getNormalized()) : this.dot(v);
        return Math.acos(mathUtils.clipNormalized(theta));
    },
    //bisect() is in Vec2D_post.js
    /**
		 * Sets all vector components to 0.
		 *
		 * @return itself
		 */ clear: function() {
        this.x = this.y = 0;
        return this;
    },
    compareTo: function(vec) {
        if (this.x == vec.x && this.y == vec.y) return 0;
        return this.magSquared() - vec.magSquared();
    },
    /**
		 * Forcefully fits the vector in the given rectangle.
		 *
		 * @param a
		 *		either a Rectangle by itself or the Vec2D min
		 * @param b
		 *		Vec2D max
		 * @return itself
		 */ constrain: function(a, b) {
        if (hasXY(a) && hasXY(b)) {
            this.x = mathUtils.clip(this.x, a.x, b.x);
            this.y = mathUtils.clip(this.y, a.y, b.y);
        } else if (isRect(a)) {
            this.x = mathUtils.clip(this.x, a.x, a.x + a.width);
            this.y = mathUtils.clip(this.y, a.y, a.y + a.height);
        }
        return this;
    },
    copy: function() {
        return new Vec2D(this);
    },
    cross: function(v) {
        return this.x * v.y - this.y * v.x;
    },
    distanceTo: function(v) {
        if (v !== undefined) {
            var dx = this.x - v.x;
            var dy = this.y - v.y;
            return Math.sqrt(dx * dx + dy * dy);
        } else return NaN;
    },
    distanceToSquared: function(v) {
        if (v !== undefined) {
            var dx = this.x - v.x;
            var dy = this.y - v.y;
            return dx * dx + dy * dy;
        } else return NaN;
    },
    dot: function(v) {
        return this.x * v.x + this.y * v.y;
    },
    equals: function(obj) {
        if (!hasXY(obj)) return false;
        return this.x == obj.x && this.y == obj.y;
    },
    equalsWithTolerance: function(v, tolerance) {
        if (!hasXY(v)) return false;
        if (mathUtils.abs(this.x - v.x) < tolerance) {
            if (mathUtils.abs(this.y - v.y) < tolerance) return true;
        }
        return false;
    },
    floor: function() {
        this.x = mathUtils.floor(this.x);
        this.y = mathUtils.floor(this.y);
        return this;
    },
    /**
		 * Replaces the vector components with the fractional part of their current
		 * values
		 *
		 * @return itself
		 */ frac: function() {
        this.x -= mathUtils.floor(this.x);
        this.y -= mathUtils.floor(this.y);
        return this;
    },
    getAbs: function() {
        return new Vec2D(this).abs();
    },
    getComponent: function(id) {
        if (typeof id == 'number') id = id === 0 ? Vec2D.Axis.X : Vec2D.Axis.Y;
        if (id == Vec2D.Axis.X) return this.x;
        else if (id == Vec2D.Axis.Y) return this.y;
        return 0;
    },
    getConstrained: function(r) {
        return new Vec2D(this).constrain(r);
    },
    getFloored: function() {
        return new Vec2D(this).floor();
    },
    getFrac: function() {
        return new Vec2D(this).frac();
    },
    getInverted: function() {
        return new Vec2D(-this.x, -this.y);
    },
    getLimited: function(lim) {
        if (this.magSquared() > lim * lim) return this.getNormalizedTo(lim);
        return new Vec2D(this);
    },
    getNormalized: function() {
        return new Vec2D(this).normalize();
    },
    getNormalizedTo: function(len) {
        return new Vec2D(this).normalizeTo(len);
    },
    getPerpendicular: function() {
        return new Vec2D(this).perpendicular();
    },
    getReciprocal: function() {
        return new Vec2D(this).reciprocal();
    },
    getReflected: function(normal) {
        return new Vec2D(this).reflect(normal);
    },
    getRotated: function(theta) {
        return new Vec2D(this).rotate(theta);
    },
    getSignum: function() {
        return new Vec2D(this).signum();
    },
    heading: function() {
        return Math.atan2(this.y, this.x);
    },
    interpolateTo: function(v, f, s) {
        if (s === undefined) return new Vec2D(this.x + (v.x - this.x) * f, this.y + (v.y - this.y) * f);
        else return new Vec2D(s.interpolate(this.x, v.x, f), s.interpolate(this.y, v.y, f));
    },
    /**
		 * Interpolates the vector towards the given target vector, using linear
		 * interpolation
		 *
		 * @param v
		 *				target vector
		 * @param f
		 *				interpolation factor (should be in the range 0..1)
		 * @return itself, result overrides current vector
		 */ interpolateToSelf: function(v, f, s) {
        if (s === undefined) {
            this.x += (v.x - this.x) * f;
            this.y += (v.y - this.y) * f;
        } else {
            this.x = s.interpolate(this.x, v.x, f);
            this.y = s.interpolate(this.y, v.y, f);
        }
        return this;
    },
    invert: function() {
        this.x *= -1;
        this.y *= -1;
        return this;
    },
    isInCircle: function(sO, sR) {
        var d = this.sub(sO).magSquared();
        return d <= sR * sR;
    },
    isInRectangle: function(rect) {
        if (this.x < rect.x || this.x > rect.x + rect.width) return false;
        if (this.y < rect.y || this.y > rect.y + rect.height) return false;
        return true;
    },
    isInTriangle: function(a, b, c) {
        var v1 = this.sub(a).normalize();
        var v2 = this.sub(b).normalize();
        var v3 = this.sub(c).normalize();
        var total_angles = Math.acos(v1.dot(v2));
        total_angles += Math.acos(v2.dot(v3));
        total_angles += Math.acos(v3.dot(v1));
        return Math.abs(total_angles - mathUtils.TWO_PI) <= 0.005;
    },
    isMajorAxis: function(tol) {
        var ax = Math.abs(this.x);
        var ay = Math.abs(this.y);
        var itol = 1 - tol;
        if (ax > itol) return ay < tol;
        else if (ay > itol) return ax < tol;
        return false;
    },
    isZeroVector: function() {
        return Math.abs(this.x) < mathUtils.EPS && Math.abs(this.y) < mathUtils.EPS;
    },
    /**
		 * Adds random jitter to the vector in the range -j ... +j using the default
		 * {@link Random} generator of {@link MathUtils}.
		 *
		 * @param a
		 *				maximum x jitter or  Vec2D
		 * @param b
		 *				maximum y jitter or undefined
		 * @return itself
		 */ jitter: function(a, b) {
        var v = _getXY(a, b);
        this.x += mathUtils.normalizedRandom() * v.x;
        this.y += mathUtils.normalizedRandom() * v.y;
        return this;
    },
    limit: function(lim) {
        if (this.magSquared() > lim * lim) return this.normalize().scaleSelf(lim);
        return this;
    },
    magnitude: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    magSquared: function() {
        return this.x * this.x + this.y * this.y;
    },
    max: function(v) {
        return new Vec2D(mathUtils.max(this.x, v.x), mathUtils.max(this.y, v.y));
    },
    maxSelf: function(v) {
        this.x = mathUtils.max(this.x, v.x);
        this.y = mathUtils.max(this.y, v.y);
        return this;
    },
    min: function(v) {
        return new Vec2D(mathUtils.min(this.x, v.x), mathUtils.min(this.y, v.y));
    },
    minSelf: function(v) {
        this.x = mathUtils.min(this.x, v.x);
        this.y = mathUtils.min(this.y, v.y);
        return this;
    },
    /**
		 * Normalizes the vector so that its magnitude = 1
		 *
		 * @return itself
		 */ normalize: function() {
        var mag = this.x * this.x + this.y * this.y;
        if (mag > 0) {
            mag = 1 / Math.sqrt(mag);
            this.x *= mag;
            this.y *= mag;
        }
        return this;
    },
    /**
		 * Normalizes the vector to the given length.
		 *
		 * @param len
		 *				desired length
		 * @return itself
		 */ normalizeTo: function(len) {
        var mag = Math.sqrt(this.x * this.x + this.y * this.y);
        if (mag > 0) {
            mag = len / mag;
            this.x *= mag;
            this.y *= mag;
        }
        return this;
    },
    perpendicular: function() {
        var t = this.x;
        this.x = -this.y;
        this.y = t;
        return this;
    },
    positiveHeading: function() {
        var dist = Math.sqrt(this.x * this.x + this.y * this.y);
        if (this.y >= 0) return Math.acos(this.x / dist);
        return Math.acos(-this.x / dist) + mathUtils.PI;
    },
    reciprocal: function() {
        this.x = 1 / this.x;
        this.y = 1 / this.y;
        return this;
    },
    reflect: function(normal) {
        return this.set(normal.scale(this.dot(normal) * 2).subSelf(this));
    },
    /**
		 * Rotates the vector by the given angle around the Z axis.
		 *
		 * @param theta
		 * @return itself
		 */ rotate: function(theta) {
        var co = Math.cos(theta);
        var si = Math.sin(theta);
        var xx = co * this.x - si * this.y;
        this.y = si * this.x + co * this.y;
        this.x = xx;
        return this;
    },
    roundToAxis: function() {
        if (Math.abs(this.x) < 0.5) this.x = 0;
        else {
            this.x = this.x < 0 ? -1 : 1;
            this.y = 0;
        }
        if (Math.abs(this.y) < 0.5) this.y = 0;
        else {
            this.y = this.y < 0 ? -1 : 1;
            this.x = 0;
        }
        return this;
    },
    scale: function(a, b) {
        var v = _getXY(a, b);
        return new Vec2D(this.x * v.x, this.y * v.y);
    },
    scaleSelf: function(a, b) {
        var v = _getXY(a, b);
        this.x *= v.x;
        this.y *= v.y;
        return this;
    },
    set: function(a, b) {
        var v = _getXY(a, b);
        this.x = v.x;
        this.y = v.y;
        return this;
    },
    setComponent: function(id, val) {
        if (typeof id == 'number') id = id === 0 ? Vec2D.Axis.X : Vec2D.Axis.Y;
        if (id === Vec2D.Axis.X) this.x = val;
        else if (id === Vec2D.Axis.Y) this.y = val;
        return this;
    },
    /**
		 * Replaces all vector components with the signum of their original values.
		 * In other words if a components value was negative its new value will be
		 * -1, if zero => 0, if positive => +1
		 *
		 * @return itself
		 */ signum: function() {
        this.x = this.x < 0 ? -1 : this.x === 0 ? 0 : 1;
        this.y = this.y < 0 ? -1 : this.y === 0 ? 0 : 1;
        return this;
    },
    sub: function(a, b) {
        var v = _getXY(a, b);
        return new Vec2D(this.x - v.x, this.y - v.y);
    },
    /**
		 * Subtracts vector {a,b,c} and overrides coordinates with result.
		 *
		 * @param a
		 *				X coordinate
		 * @param b
		 *				Y coordinate
		 * @return itself
		 */ subSelf: function(a, b) {
        var v = _getXY(a, b);
        this.x -= v.x;
        this.y -= v.y;
        return this;
    },
    tangentNormalOfEllipse: function(eO, eR) {
        var p = this.sub(eO);
        var xr2 = eR.x * eR.x;
        var yr2 = eR.y * eR.y;
        return new Vec2D(p.x / xr2, p.y / yr2).normalize();
    },
    //to3D** methods are in Vec2D_post.js
    toArray: function() {
        return [
            this.x,
            this.y
        ];
    },
    toCartesian: function() {
        var xx = this.x * Math.cos(this.y);
        this.y = this.x * Math.sin(this.y);
        this.x = xx;
        return this;
    },
    toPolar: function() {
        var r = Math.sqrt(this.x * this.x + this.y * this.y);
        this.y = Math.atan2(this.y, this.x);
        this.x = r;
        return this;
    },
    toString: function() {
        var s = "{x:" + this.x + ", y:" + this.y + "}";
        return s;
    }
};
//these requires are in the functions because of a circular dependency
Vec2D.prototype.bisect = function(b) {
    var diff = this.sub(b);
    var sum = this.add(b);
    var dot = diff.dot(sum);
    return new Vec3D(diff.x, diff.y, -dot / 2);
};
Vec2D.prototype.to3DXY = function() {
    return new Vec3D(this.x, this.y, 0);
};
Vec2D.prototype.to3DXZ = function() {
    return new Vec3D(this.x, 0, this.y);
};
Vec2D.prototype.to3DYZ = function() {
    return new Vec3D(0, this.x, this.y);
};
Vec2D.X_AXIS = new Vec2D(1, 0);
Vec2D.Y_AXIS = new Vec2D(0, 1);
Vec2D.ZERO = new Vec2D();
Vec2D.MIN_VALUE = new Vec2D(Number.MIN_VALUE, Number.MIN_VALUE);
Vec2D.MAX_VALUE = new Vec2D(Number.MAX_VALUE, Number.MAX_VALUE);
Vec2D.fromTheta = function(theta) {
    return new Vec2D(Math.cos(theta), Math.sin(theta));
};
Vec2D.max = function(a, b) {
    return new Vec2D(mathUtils.max(a.x, b.x), mathUtils.max(a.y, b.y));
};
Vec2D.min = function(a, b) {
    return new Vec2D(mathUtils.min(a.x, b.x), mathUtils.min(a.y, b.y));
};
Vec2D.randomVector = function(rnd) {
    var v = new Vec2D(Math.random() * 2 - 1, Math.random() * 2 - 1);
    return v.normalize();
};
/**
	 * @member toxi
	 * @class Creates a new vector with the given coordinates. Coordinates will default to zero
	 * @param {Number} x the x
	 * @param {Number} y the y
	 * @param {Number} z the z
	 */ Vec3D = function(x, y, z) {
    if (has.XYZ(x)) {
        this.x = x.x;
        this.y = x.y;
        this.z = x.z;
    } else if (x === undefined) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
    } else {
        this.x = x;
        this.y = y;
        this.z = z;
    }
};
Vec3D.prototype = {
    abs: function() {
        this.x = Math.abs(this.x);
        this.y = Math.abs(this.y);
        this.z = Math.abs(this.z);
        return this;
    },
    add: function(a, b, c) {
        if (has.XYZ(a)) return new Vec3D(this.x + a.x, this.y + a.y, this.z + a.z);
        return new Vec3D(this.x + a, this.y + b, this.z + c);
    },
    /**
		 * Adds vector {a,b,c} and overrides coordinates with result.
		 *
		 * @param a
		 *				X coordinate
		 * @param b
		 *				Y coordinate
		 * @param c
		 *				Z coordinate
		 * @return itself
		 */ addSelf: function(a, b, c) {
        if (a !== undefined && b !== undefined && c !== undefined) {
            this.x += a;
            this.y += b;
            this.z += c;
        } else {
            this.x += a.x;
            this.y += a.y;
            this.z += a.z;
        }
        return this;
    },
    angleBetween: function(vec, faceNormalizeBool) {
        var theta;
        if (faceNormalizeBool) theta = this.getNormalized().dot(vec.getNormalized());
        else theta = this.dot(vec);
        return Math.acos(theta);
    },
    clear: function() {
        this.x = this.y = this.z = 0;
        return this;
    },
    compareTo: function(vec) {
        if (this.x == vec.x && this.y == vec.y && this.z == vec.z) return 0;
        return this.magSquared() - vec.magSqaured();
    },
    /**
		 * Forcefully fits the vector in the given AABB specified by the 2 given
		 * points.
		 *
		 * @param box_or_min
		 *		either the AABB box by itself, or your min Vec3D with accompanying max
		 * @param max
		 * @return itself
		 */ constrain: function(box_or_min, max) {
        var min;
        if (is.AABB(box_or_min)) {
            max = box_or_min.getMax();
            min = box_or_min.getMin();
        } else min = box_or_min;
        this.x = mathUtils.clip(this.x, min.x, max.x);
        this.y = mathUtils.clip(this.y, min.y, max.y);
        this.z = mathUtils.clip(this.z, min.z, max.z);
        return this;
    },
    copy: function() {
        return new Vec3D(this);
    },
    cross: function(vec) {
        return new Vec3D(this.y * vec.z - vec.y * this.z, this.z * vec.x - vec.z * this.x, this.x * vec.y - vec.x * this.y);
    },
    crossInto: function(vec, result) {
        var vx = vec.x;
        var vy = vec.y;
        var vz = vec.z;
        result.x = this.y * vz - vy * this.z;
        result.y = this.z * vx - vz * this.x;
        result.z = this.x * vy - vx * this.y;
        return result;
    },
    /**
		 * Calculates cross-product with vector v. The resulting vector is
		 * perpendicular to both the current and supplied vector and overrides the
		 * current.
		 *
		 * @param v
		 *				the v
		 *
		 * @return itself
		 */ crossSelf: function(vec) {
        var cx = this.y * vec.z - vec.y * this.z;
        var cy = this.z * vec.x - vec.z * this.x;
        this.z = this.x * vec.y - vec.x * this.y;
        this.y = cy;
        this.x = cx;
        return this;
    },
    distanceTo: function(vec) {
        if (vec !== undefined) {
            var dx = this.x - vec.x;
            var dy = this.y - vec.y;
            var dz = this.z - vec.z;
            return Math.sqrt(dx * dx + dy * dy + dz * dz);
        }
        return NaN;
    },
    distanceToSquared: function(vec) {
        if (vec !== undefined) {
            var dx = this.x - vec.x;
            var dy = this.y - vec.y;
            var dz = this.z - vec.z;
            return dx * dx + dy * dy + dz * dz;
        }
        return NaN;
    },
    dot: function(vec) {
        return this.x * vec.x + this.y * vec.y + this.z * vec.z;
    },
    equals: function(vec) {
        if (has.XYZ(vec)) return this.x == vec.x && this.y == vec.y && this.z == vec.z;
        return false;
    },
    equalsWithTolerance: function(vec, tolerance) {
        if (Math.abs(this.x - vec.x) < tolerance) {
            if (Math.abs(this.y - vec.y) < tolerance) {
                if (Math.abs(this.z - vec.z) < tolerance) return true;
            }
        }
        return false;
    },
    floor: function() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    },
    /**
		 * Replaces the vector components with the fractional part of their current
		 * values.
		 *
		 * @return itself
		 */ frac: function() {
        this.x -= Math.floor(this.x);
        this.y -= Math.floor(this.y);
        this.z -= Math.floor(this.z);
        return this;
    },
    getAbs: function() {
        return new Vec3D(this).abs();
    },
    getComponent: function(id) {
        if (typeof id == 'number') {
            if (id === Vec3D.Axis.X) id = 0;
            else if (id === Vec3D.Axis.Y) id = 1;
            else id = 2;
        }
        switch(id){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
        }
    },
    getConstrained: function(box) {
        return new Vec3D(this).constrain(box);
    },
    getFloored: function() {
        return new Vec3D(this).floor();
    },
    getFrac: function() {
        return new Vec3D(this).frac();
    },
    getInverted: function() {
        return new Vec3D(-this.x, -this.y, -this.z);
    },
    getLimited: function(limit) {
        if (this.magSquared() > limit * limit) return this.getNormalizedTo(limit);
        return new Vec3D(this);
    },
    getNormalized: function() {
        return new Vec3D(this).normalize();
    },
    getNormalizedTo: function(length) {
        return new Vec3D(this).normalizeTo(length);
    },
    getReciprocal: function() {
        return this.copy().reciprocal();
    },
    getReflected: function(normal) {
        return this.copy().reflect(normal);
    },
    getRotatedAroundAxis: function(vec_axis, theta) {
        return new Vec3D(this).rotateAroundAxis(vec_axis, theta);
    },
    getRotatedX: function(theta) {
        return new Vec3D(this).rotateX(theta);
    },
    getRotatedY: function(theta) {
        return new Vec3D(this).rotateY(theta);
    },
    getRotatedZ: function(theta) {
        return new Vec3D(this).rotateZ(theta);
    },
    getSignum: function() {
        return new Vec3D(this).signum();
    },
    headingXY: function() {
        return Math.atan2(this.y, this.x);
    },
    headingXZ: function() {
        return Math.atan2(this.z, this.x);
    },
    headingYZ: function() {
        return Math.atan2(this.y, this.z);
    },
    immutable: function() {
        return this; //cant make read-only in javascript, implementing to avoid error
    },
    interpolateTo: function(v, f, s) {
        if (s === undefined) return new Vec3D(this.x + (v.x - this.x) * f, this.y + (v.y - this.y) * f, this.z + (v.z - this.z) * f);
        return new Vec3D(s.interpolate(this.y, v.y, f), s.interpolate(this.y, v.y, f), s.interpolate(this.z, v.z, f));
    },
    interpolateToSelf: function(v, f, s) {
        if (s === undefined) {
            this.x += (v.x - this.x) * f;
            this.y += (v.y - this.y) * f;
            this.z += (v.z - this.z) * f;
        } else {
            this.x = s.interpolate(this.x, v.x, f);
            this.y = s.interpolate(this.y, v.y, f);
            this.z = s.interpolate(this.z, v.z, f);
        }
        return this;
    },
    invert: function() {
        this.x *= -1;
        this.y *= -1;
        this.z *= -1;
        return this;
    },
    isInAABB: function(box_or_origin, boxExtent) {
        if (boxExtent) {
            var w = boxExtent.x;
            if (this.x < box_or_origin.x - w || this.x > box_or_origin.x + w) return false;
            w = boxExtent.y;
            if (this.y < box_or_origin.y - w || this.y > box_or_origin.y + w) return false;
            w = boxExtent.y;
            if (this.z < box_or_origin.z - w || this.y > box_or_origin.z + w) return false;
        } else {
            var min = box_or_origin.getMin(), max = box_or_origin.getMax();
            if (this.x < min.x || this.x > max.x) return false;
            if (this.y < min.y || this.y > max.y) return false;
            if (this.z < min.z || this.z > max.z) return false;
        }
        return true;
    },
    isMajorAxis: function(tol) {
        var ax = mathUtils.abs(this.x);
        var ay = mathUtils.abs(this.y);
        var az = mathUtils.abs(this.z);
        var itol = 1 - tol;
        if (ax > itol) {
            if (ay < tol) return az < tol;
        } else if (ay > itol) {
            if (ax < tol) return az < tol;
        } else if (az > itol) {
            if (ax < tol) return ay < tol;
        }
        return false;
    },
    isZeroVector: function() {
        return Math.abs(this.x) < mathUtils.EPS && Math.abs(this.y) < mathUtils.EPS && mathUtils.abs(this.z) < mathUtils.EPS;
    },
    /**
		 * Add random jitter to the vector in the range -j ... +j using the default
		 * {@link Random} generator of {@link MathUtils}.
		 *
		 * @param j
		 *				the j
		 *
		 * @return the vec3 d
		 */ jitter: function(a, b, c) {
        if (b === undefined || c === undefined) b = c = a;
        this.x += mathUtils.normalizedRandom() * a;
        this.y += mathUtils.normalizedRandom() * b;
        this.z += mathUtils.normalizedRandom() * c;
        return this;
    },
    limit: function(lim) {
        if (this.magSquared() > lim * lim) return this.normalize().scaleSelf(lim);
        return this;
    },
    magnitude: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    magSquared: function() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    maxSelf: function(vec) {
        this.x = Math.max(this.x, vec.x);
        this.y = Math.max(this.y, vec.y);
        this.z = Math.max(this.z, vec.z);
        return this;
    },
    minSelf: function(vec) {
        this.x = Math.min(this.x, vec.x);
        this.y = Math.min(this.y, vec.y);
        this.z = Math.min(this.z, vec.z);
        return this;
    },
    modSelf: function(basex, basey, basez) {
        if (basey === undefined || basez === undefined) basey = basez = basex;
        this.x %= basex;
        this.y %= basey;
        this.z %= basez;
        return this;
    },
    normalize: function() {
        var mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        if (mag > 0) {
            mag = 1 / mag;
            this.x *= mag;
            this.y *= mag;
            this.z *= mag;
        }
        return this;
    },
    normalizeTo: function(length) {
        var mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        if (mag > 0) {
            mag = length / mag;
            this.x *= mag;
            this.y *= mag;
            this.z *= mag;
        }
        return this;
    },
    reciprocal: function() {
        this.x = 1 / this.x;
        this.y = 1 / this.y;
        this.z = 1 / this.z;
        return this;
    },
    reflect: function(normal) {
        return this.set(normal.scale(this.dot(normal) * 2).subSelf(this));
    },
    /**
		 * Rotates the vector around the giving axis.
		 *
		 * @param axis
		 *				rotation axis vector
		 * @param theta
		 *				rotation angle (in radians)
		 *
		 * @return itself
		 */ rotateAroundAxis: function(vec_axis, theta) {
        var ax = vec_axis.x, ay = vec_axis.y, az = vec_axis.z, ux = ax * this.x, uy = ax * this.y, uz = ax * this.z, vx = ay * this.x, vy = ay * this.y, vz = ay * this.z, wx = az * this.x, wy = az * this.y, wz = az * this.z, si = Math.sin(theta), co = Math.cos(theta);
        var xx = ax * (ux + vy + wz) + (this.x * (ay * ay + az * az) - ax * (vy + wz)) * co + (-wy + vz) * si;
        var yy = ay * (ux + vy + wz) + (this.y * (ax * ax + az * az) - ay * (ux + wz)) * co + (wx - uz) * si;
        var zz = az * (ux + vy + wz) + (this.z * (ax * ax + ay * ay) - az * (ux + vy)) * co + (-vx + uy) * si;
        this.x = xx;
        this.y = yy;
        this.z = zz;
        return this;
    },
    /**
		 * Rotates the vector by the given angle around the X axis.
		 *
		 * @param theta
		 *				the theta
		 *
		 * @return itself
		 */ rotateX: function(theta) {
        var co = Math.cos(theta);
        var si = Math.sin(theta);
        var zz = co * this.z - si * this.y;
        this.y = si * this.z + co * this.y;
        this.z = zz;
        return this;
    },
    /**
		 * Rotates the vector by the given angle around the Y axis.
		 *
		 * @param theta
		 *				the theta
		 *
		 * @return itself
		 */ rotateY: function(theta) {
        var co = Math.cos(theta);
        var si = Math.sin(theta);
        var xx = co * this.x - si * this.z;
        this.z = si * this.x + co * this.z;
        this.x = xx;
        return this;
    },
    /**
		 * Rotates the vector by the given angle around the Z axis.
		 *
		 * @param theta
		 *				the theta
		 *
		 * @return itself
		 */ rotateZ: function(theta) {
        var co = Math.cos(theta);
        var si = Math.sin(theta);
        var xx = co * this.x - si * this.y;
        this.y = si * this.x + co * this.y;
        this.x = xx;
        return this;
    },
    /**
		 * Rounds the vector to the closest major axis. Assumes the vector is
		 * normalized.
		 *
		 * @return itself
		 */ roundToAxis: function() {
        if (Math.abs(this.x) < 0.5) this.x = 0;
        else {
            this.x = this.x < 0 ? -1 : 1;
            this.y = this.z = 0;
        }
        if (Math.abs(this.y) < 0.5) this.y = 0;
        else {
            this.y = this.y < 0 ? -1 : 1;
            this.x = this.z = 0;
        }
        if (Math.abs(this.z) < 0.5) this.z = 0;
        else {
            this.z = this.z < 0 ? -1 : 1;
            this.x = this.y = 0;
        }
        return this;
    },
    scale: function(a, b, c) {
        if (has.XYZ(a)) return new Vec3D(this.x * a.x, this.y * a.y, this.z * a.z);
        else if (b === undefined || c === undefined) b = c = a;
        return new Vec3D(this.x * a, this.y * b, this.z * c);
    },
    scaleSelf: function(a, b, c) {
        if (has.XYZ(a)) {
            this.x *= a.x;
            this.y *= a.y;
            this.z *= a.z;
            return this;
        } else if (b === undefined || c === undefined) b = c = a;
        this.x *= a;
        this.y *= b;
        this.z *= c;
        return this;
    },
    set: function(a, b, c) {
        if (has.XYZ(a)) {
            this.x = a.x;
            this.y = a.y;
            this.z = a.z;
            return this;
        } else if (b === undefined || c === undefined) b = c = a;
        this.x = a;
        this.y = b;
        this.z = c;
        return this;
    },
    setXY: function(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    },
    shuffle: function(nIterations) {
        var t;
        for(var i = 0; i < nIterations; i++)switch(Math.floor(Math.random() * 3)){
            case 0:
                t = this.x;
                this.x = this.y;
                this.z = t;
                break;
            case 1:
                t = this.x;
                this.x = this.z;
                this.z = t;
                break;
            case 2:
                t = this.y;
                this.y = this.z;
                this.z = t;
                break;
        }
        return this;
    },
    /**
		 * Replaces all vector components with the signum of their original values.
		 * In other words if a components value was negative its new value will be
		 * -1, if zero => 0, if positive => +1
		 *
		 * @return itself
		 */ signum: function() {
        this.x = this.x < 0 ? -1 : this.x === 0 ? 0 : 1;
        this.y = this.y < 0 ? -1 : this.y === 0 ? 0 : 1;
        this.z = this.z < 0 ? -1 : this.z === 0 ? 0 : 1;
        return this;
    },
    sub: function(a, b, c) {
        if (has.XYZ(a)) return new Vec3D(this.x - a.x, this.y - a.y, this.z - a.z);
        else if (b === undefined || c === undefined) b = c = a;
        return new Vec3D(this.x - a, this.y - b, this.z - c);
    },
    subSelf: function(a, b, c) {
        if (has.XYZ(a)) {
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z;
            return this;
        } else if (b === undefined || c === undefined) b = c = a;
        this.x -= a;
        this.y -= b;
        this.z -= c;
        return this;
    },
    to2DXY: function() {
        return new Vec2D(this.x, this.y);
    },
    to2DXZ: function() {
        return new Vec2D(this.x, this.z);
    },
    to2DYZ: function() {
        return new Vec2D(this.y, this.z);
    },
    toArray: function() {
        return [
            this.x,
            this.y,
            this.z
        ];
    },
    toArray4: function(w) {
        var ta = this.toArray();
        ta[3] = w;
        return ta;
    },
    toCartesian: function() {
        var a = this.x * Math.cos(this.z);
        var xx = a * Math.cos(this.y);
        var yy = this.x * Math.sin(this.z);
        var zz = a * Math.sin(this.y);
        this.x = xx;
        this.y = yy;
        this.z = zz;
        return this;
    },
    toSpherical: function() {
        var xx = Math.abs(this.x) <= mathUtils.EPS ? mathUtils.EPS : this.x;
        var zz = this.z;
        var radius = Math.sqrt(xx * xx + this.y * this.y + zz * zz);
        this.z = Math.asin(this.y / radius);
        this.y = Math.atan(zz / xx) + (xx < 0 ? Math.PI : 0);
        this.x = radius;
        return this;
    },
    toString: function() {
        return "[ x: " + this.x + ", y: " + this.y + ", z: " + this.z + "]";
    }
};
/**
	 * Defines vector with all coords set to Float.MIN_VALUE. Useful for
	 * bounding box operations.
	*/ Vec3D.MIN_VALUE = new Vec3D(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);
/**
	 * Defines vector with all coords set to Float.MAX_VALUE. Useful for
	 * bounding box operations.
	*/ Vec3D.MAX_VALUE = new Vec3D(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
/**
	 * Creates a new vector from the given angle in the XY plane. The Z
	 * component of the vector will be zero.
	 *
	 * The resulting vector for theta=0 is equal to the positive X axis.
	 *
	 * @param theta
	 *				the theta
	 *
	 * @return new vector in the XY plane
	 */ Vec3D.fromXYTheta = function(theta) {
    return new Vec3D(Math.cos(theta), Math.sin(theta), 0);
};
/**
	 * Creates a new vector from the given angle in the XZ plane. The Y
	 * component of the vector will be zero.
	 *
	 * The resulting vector for theta=0 is equal to the positive X axis.
	 *
	 * @param theta
	 *				the theta
	 *
	 * @return new vector in the XZ plane
	 */ Vec3D.fromXZTheta = function(theta) {
    return new Vec3D(Math.cos(theta), 0, Math.sin(theta));
};
/**
	 * Creates a new vector from the given angle in the YZ plane. The X
	 * component of the vector will be zero.
	 *
	 * The resulting vector for theta=0 is equal to the positive Y axis.
	 *
	 * @param theta
	 *				the theta
	 *
	 * @return new vector in the YZ plane
	 */ Vec3D.fromYZTheta = function(theta) {
    return new Vec3D(0, Math.cos(theta), Math.sin(theta));
};
/**
	 * Constructs a new vector consisting of the largest components of both
	 * vectors.
	 *
	 * @param b
	 *				the b
	 * @param a
	 *				the a
	 *
	 * @return result as new vector
	 */ Vec3D.max = function(a, b) {
    return new Vec3D(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));
};
/**
	 * Constructs a new vector consisting of the smallest components of both
	 * vectors.
	 *
	 * @param b
	 *				comparing vector
	 * @param a
	 *				the a
	 *
	 * @return result as new vector
	 */ Vec3D.min = function(a, b) {
    return new Vec3D(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));
};
/**
	 * Static factory method. Creates a new random unit vector using the Random
	 * implementation set as default for the {@link MathUtils} class.
	 *
	 * @return a new random normalized unit vector.
	 */ Vec3D.randomVector = function() {
    var v = new Vec3D(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1);
    return v.normalize();
};
Vec3D.ZERO = new Vec3D(0, 0, 0);
Vec3D.X_AXIS = new Vec3D(1, 0, 0);
Vec3D.Y_AXIS = new Vec3D(0, 1, 0);
Vec3D.Z_AXIS = new Vec3D(0, 0, 1);
Vec3D.Axis = {
    X: {
        getVector: function() {
            return Vec3D.X_AXIS;
        },
        toString: function() {
            return "Vec3D.Axis.X";
        }
    },
    Y: {
        getVector: function() {
            return Vec3D.Y_AXIS;
        },
        toString: function() {
            return "Vec3D.Axis.Y";
        }
    },
    Z: {
        getVector: function() {
            return Vec3D.Z_AXIS;
        },
        toString: function() {
            return "Vec3D.Axis.Z";
        }
    }
};
exports.Vec2D = Vec2D;
exports.Vec3D = Vec3D;

},{"../math/mathUtils":"bF4PI","../internals/has":"2hvR2","../internals/is":"4G2iR"}],"b7U9c":[function(require,module,exports) {
var LinkedMap = require('../internals/LinkedMap');
var each = require('../internals/each');
var namedHues = new LinkedMap(), primaryHues = [], Hue;
/*
    * This class defines color hues and allows them to be access by name. There are
    * also methods to check if a hue is one of the 7 primary hues (rainbow) or to
    * find the closest defined hue for a given color.
    */ /**
     * construct a new Hue
     * @param {String} name
     * @param {Number} hue (range 0-1)
     * @param {Boolean} [isPrimary] optionally flag as a primary hue
     * @constructor
     */ Hue = function(name, hue, isPrimary) {
    this._isPrimary = isPrimary === true;
    this.name = name;
    this.hue = hue;
    namedHues.put(name, this);
    if (this._isPrimary) primaryHues.push(this);
};
Hue.prototype = {
    constructor: Hue,
    getHue: function() {
        return this.hue;
    },
    getName: function() {
        return this.name;
    },
    isPrimary: function() {
        return this._isPrimary;
    },
    toString: function() {
        return "Hue: ID:" + this.name + " @ " + parseInt(this.hue * 360, 10) + " degrees";
    }
};
//add presets object, like what `toxi.color.ColorRange` has,
//allows for easy look-up
Hue.PRESETS = {
};
//add the basic hues
each([
    [
        'red',
        true
    ],
    [
        'orange',
        true
    ],
    [
        'yellow',
        true
    ],
    [
        'lime'
    ],
    [
        'green',
        true
    ],
    [
        'teal'
    ],
    [
        'cyan'
    ],
    [
        'azure'
    ],
    [
        'blue',
        true
    ],
    [
        'indigo'
    ],
    [
        'purple',
        true
    ],
    [
        'pink',
        true
    ]
], function(item, i) {
    var name = item[0], nameUC = name.toUpperCase(), isPrimary = item[1];
    Hue[nameUC] = new Hue(name, i * 30 / 360, isPrimary);
    Hue.PRESETS[nameUC] = Hue[nameUC];
});
// Tolerance value for checking if a given hue is primary
Hue.PRIMARY_VARIANCE = 0.01;
/**
     * Finds the closest defined & named Hue for the given hue vale.
     * Optionally, the serach can be limited to primary hues only.
     * @param {Number} hue
     * @param {Boolean} [primaryOnly]
     * @returns Hue
     */ Hue.getClosest = function(hue, primaryOnly) {
    hue %= 1;
    primaryOnly = primaryOnly === true;
    var dist = Number.MAX_VALUE, closest, hues = primaryOnly ? primaryHues : namedHues.getArray();
    each(hues, function(h) {
        var d = Math.min(Math.abs(h.getHue() - hue), Math.abs(1 + h.getHue() - hue));
        if (d < dist) {
            dist = d;
            closest = h;
        }
    });
    return closest;
};
Hue.getForName = function(name) {
    return namedHues.get(name);
};
Hue.isPrimary = function(hue, variance) {
    variance = typeof variance === 'number' ? variance : Hue.PRIMARY_VARIANCE;
    var isPrimary = false;
    for(var i = 0, len = primaryHues.length; i < len; i++){
        var h = primaryHues[i];
        if (Math.abs(hue - h.getHue()) < variance) {
            isPrimary = true;
            break;
        }
    }
    return isPrimary;
};
module.exports = Hue;

},{"../internals/LinkedMap":"6e3mF","../internals/each":"dGZ4W"}],"7nQXo":[function(require,module,exports) {
module.exports = require('./distanceProxies').HSVDistanceProxy;

},{"./distanceProxies":"idJ94"}],"hYv9p":[function(require,module,exports) {
module.exports = require('./distanceProxies').RGBDistanceProxy;

},{"./distanceProxies":"idJ94"}],"5P7sf":[function(require,module,exports) {
var ProximityComparator = function(col, proxy) {
    this.col = col;
    this.proxy = proxy;
};
ProximityComparator.prototype.compare = function(a, b) {
    var da = this.proxy.distanceBetween(this.col, a);
    var db = this.proxy.distanceBetween(this.col, b);
    return da < db ? -1 : da > db ? 1 : 0;
};
module.exports = ProximityComparator;

},{}],"ki8vV":[function(require,module,exports) {
var TColor = require('./TColor');
var ColorList = require('./ColorList');
var FloatRange = require('../util/datatypes/FloatRange');
var is = require('../internals/is');
var each = require('../internals/each');
var MathUtils = require('../math/mathUtils');
var ColorRange, UNTITLED_ID = 1, addRange, addAll, pickRandom;
//@private
//add all elements to the given array, without creating a new array (like concat)
addAll = function(arr, elementsArr) {
    arr.push.apply(arr, elementsArr);
};
//@private
//the addAlphaRange, addHueRange… methods are identical, so with js,
//we can generate them without
addRange = function(attr) {
    return function(min, max) {
        this[attr.toLowerCase() + 'Constraint'].push(is.FloatRange(min) ? min : new FloatRange(min, max));
        return this;
    };
};
//@private
//pickRandom element from array
pickRandom = function(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
};
/**
    * A ColorRange is a set of constraints to specify possible ranges for hue,
    * saturation, brightness and alpha independently and use these as creation
    * rules for new {@link TColor}s or {@link ColorList}s. The class comes with 11
    * preset ranges reflecting common demands and color characters. You can also
    * construct new ranges and manually add additional constraints. Unless the
    * constraints in a range are very narrow the class will always create random
    * variations within the constraints. Please see the examples for further
    * details.
    *
    * {@link ColorRange}s are a key ingredient for defining {@link ColorTheme}s but
    * can also be used individually.
    */ /**
    * construct a new ColorRange,
    * this constructor takes a wide variety of param signatures,
    * 1.
        * @param {toxi.color.ColorList} list
    * 2.
        * @param {toxi.util.datatypes.FloatRange} [hue]
        * @param {toxi.util.datatypes.FloatRange} [sat]
        * @param {toxi.util.datatypes.FloatRange} [bri]
        * @param {toxi.util.datatypes.FloatRange} [alpha]
        * @param {toxi.util.datatypes.FloatRange} [black]
        * @param {toxi.util.datatypes.FloatRange} [white]
        * @param {String} [name]
    * 3.
        * @param {toxi.util.datatypes.FloatRange} [hue]
        * @param {toxi.util.datatypes.FloatRange} [sat]
        * @param {toxi.util.datatypes.FloatRange} [bri]
        * @param {toxi.util.datatypes.FloatRange} [alpha]
        * @param {String} [name]
    * 4.
        * @param {toxi.util.datatypes.FloatRange} [hue]
        * @param {toxi.util.datatypes.FloatRange} [sat]
        * @param {toxi.util.datatypes.FloatRange} [bri]
        * @param {String} [name]
    * 5.name
        * @param {toxi.color.Hue} hue
    * 6.
        * @param {toxi.color.TColor} c
    */ ColorRange = function(hue, sat, bri, alpha, black, white, name) {
    var self = this, list; //if ColorList is supplied
    if (arguments.length === 0) return this;
    //ColorRange( ColorList list)
    if (is.ColorList(hue)) {
        list = hue;
        hue = list.get(0);
    }
    //ColorRange( Hue hue )
    if (is.Hue(hue)) hue = new FloatRange(hue.getHue(), hue.getHue());
    //ColorRange( TColor c )
    if (is.TColor(hue)) //transform `hue` from a TColor to FloatRange for hue
    hue = new FloatRange(hue.hue(), hue.hue());
    this.hueConstraint = [
        is.FloatRange(hue) ? hue : new FloatRange(0, 1)
    ];
    this.saturationConstraint = [
        is.FloatRange(sat) ? sat : new FloatRange(0, 1)
    ];
    this.brightnessConstraint = [
        is.FloatRange(bri) ? bri : new FloatRange(0, 1)
    ];
    this.alphaConstraint = [
        is.FloatRange(alpha) ? alpha : new FloatRange(1, 1)
    ];
    //not arrays for black & white
    this.black = is.FloatRange(black) ? black : new FloatRange(0, 1);
    this.white = is.FloatRange(white) ? white : new FloatRange(0, 1);
    //now that the constraints have all been created
    if (list) {
        this.hueConstraint = []; //clear the hues
        list.each(function(c) {
            self.add(c);
        });
    }
    //search arguments for a string that would be the name
    var i = arguments.length - 1;
    for(; i >= 0; i--)if (typeof arguments[i] === 'string') {
        this.name = arguments[i];
        break;
    }
    if (!this.name) this.name = "untitled" + UNTITLED_ID++;
};
ColorRange.prototype = {
    constructor: ColorRange,
    /**
         * Adds the HSV color components as constraints
         * @param {toxi.color.ColorRange | toxi.color.TColor} rc
         * @return itself
         */ add: function(rc) {
        if (is.ColorRange(rc)) {
            addAll(this.hueConstraint, rc.hueConstraint);
            addAll(this.saturationConstraint, rc.saturationConstraint);
            addAll(this.brightnessConstraint, rc.brightnessConstraint);
            addAll(this.alphaConstraint, rc.alphaConstraint);
            this.black.min = Math.min(this.black.min, rc.black.min);
            this.black.max = Math.max(this.black.max, rc.black.max);
            this.white.min = Math.min(this.white.min, rc.white.min);
            this.white.max = Math.max(this.white.max, rc.white.max);
        } else {
            this.hueConstraint.push(new FloatRange(rc.hue(), rc.hue()));
            this.saturationConstraint.push(new FloatRange(rc.saturation(), rc.saturation()));
            this.brightnessConstraint.push(new FloatRange(rc.brightness(), rc.brightness()));
            this.alphaConstraint.push(new FloatRange(rc.alpha(), rc.alpha()));
        }
        return this;
    },
    /**
         * Adds the range between min-max as possible alpha values for this range
         * @param {toxi.util.datatypes.FloatRange | Number} min
         * @param {Number} [max]
         * @return itself
         */ addAlphaRange: addRange('alpha'),
    addBrightnessRange: addRange('brightness'),
    addHue: function(hue) {
        this.hueConstraint.push(new FloatRange(hue.getHue(), hue.getHue()));
        return this;
    },
    addHueRange: addRange('hue'),
    addSaturationRange: addRange('saturation'),
    /**
         * checks if all HSVA components of the given color are within
         * the constraints define for this range
         * @param {toxi.color.TColor} c
         * @return true if is contained
         */ contains: function(c) {
        var isInRange = this.isValueInConstraint(c.hue(), this.hueConstraint);
        isInRange &= this.isValueInConstraint(c.saturation(), this.saturationConstraint);
        isInRange &= this.isValueInConstraint(c.brightness(), this.brightnessConstraint);
        isInRange &= this.isValueInConstraint(c.alpha(), this.alphaConstraint);
        return isInRange || false; //if its 0, return false
    },
    /**
         * creates a copy of the range but overrides the hue
         * and alpha constraints taken from the given color (if specified)
         * @param {toxi.color.TColor} [c]
         * @param {Number} [variance]
         * @return copy
         */ copy: function(c, variance) {
        variance = typeof variance === 'number' ? variance : 0;
        var range = new ColorRange();
        range.name = this.name;
        if (c) {
            var hue = c.hue() + variance * MathUtils.normalizedRandom();
            range.hueConstraint = [
                new FloatRange(hue, hue)
            ];
            range.alphaConstraint = [
                new FloatRange(c.alpha(), c.alpha())
            ];
        } else {
            range.hueConstraint = [].concat(this.hueConstraint);
            range.alphaConstraint = [].concat(this.alphaConstraint);
        }
        range.saturationConstraint = [].concat(this.saturationConstraint);
        range.brightnessConstraint = [].concat(this.brightnessConstraint);
        range.black = this.black.copy();
        range.white = this.white.copy();
        return range;
    },
    /**
         * creates a new shade of the given parameter based on the other constraints
         * of the range. This function has many param options:
         * 1. no params
         * 2.
            * @param {toxi.color.Hue} hue
         * 3.
            * @param {toxi.color.TColor} c
            * @param {Number} variance
        */ getColor: function(hue_c, variance) {
        if (is.Hue(hue_c)) return TColor.newHSVA(hue_c.getHue(), pickRandom(this.saturationConstraint).pickRandom(), pickRandom(this.brightnessConstraint).pickRandom(), pickRandom(this.alphaConstraint).pickRandom());
        //must be a TColor
        var c = hue_c, h, s, b, a;
        if (c) {
            if (c.isBlack()) return TColor.newHSVA(c.hue(), 0, this.black.pickRandom(), c.alpha());
            else if (c.isWhite()) return TColor.newHSVA(c.hue(), 0, this.white.pickRandom(), c.alpha());
            if (c.isGrey()) return TColor.newHSVA(c.hue(), 0, MathUtils.flipCoin() ? this.black.pickRandom() : this.white.pickRandom(), c.alpha());
            h = c.hue() + variance * MathUtils.normalizedRandom();
            a = c.alpha();
        } else {
            h = pickRandom(this.hueConstraint).pickRandom();
            a = pickRandom(this.alphaConstraint).pickRandom();
        }
        s = pickRandom(this.saturationConstraint).pickRandom();
        b = pickRandom(this.brightnessConstraint).pickRandom();
        return TColor.newHSVA(h, s, b, a);
    },
    /**
        * creates a new `toxi.color.ColorList` of colors based
        * on constraints of this range
        * 1.
            * @param {Number} num integer of how many colors to get
        * 2.
            * @param {toxi.color.TColor} c
            * @param {Number} num
            * @param {Number} variance
        * @return {toxi.color.ColorList} list
        */ getColors: function(c, num, variance) {
        if (arguments.length < 3) variance = ColorRange.DEFAULT_VARIANCE;
        if (arguments.length === 1) {
            num = c;
            c = undefined;
        }
        var list = new ColorList();
        for(var i = 0; i < num; i++)list.add(this.getColor(c, variance));
        return list;
    },
    /**
         * creates a new shade of gray
         * @param {Number} brightness
         * @param {Number} variance
         */ getGrayscale: function(brightness, variance) {
        return this.getColor(TColor.newGray(brightness), variance);
    },
    getName: function() {
        return this.name;
    },
    /**
         * creates a copy of the current range and adds the given one to it
         * @param {toxi.color.ColorRange} range
         * @return the summed copy
         */ getSum: function(range) {
        return this.copy().add(range);
    },
    isValueInConstraint: function(val, rangeSet) {
        var isValid = false;
        each(rangeSet, function(r) {
            isValid |= r.isValueInRange(val);
        });
        return isValid;
    }
};
//default hue variance for #getColor
ColorRange.DEFAULT_VARIANCE = 0.035;
(function(FR, un) {
    ColorRange.PRESETS = {
    };
    each({
        'light': [
            un,
            new FR(0.3, 0.7),
            new FR(0.9, 1),
            un,
            new FR(0.15, 0.3),
            un
        ],
        'dark': [
            un,
            new FR(0.7, 1),
            new FR(0.15, 0.4),
            un,
            un,
            new FR(0.5, 0.75)
        ],
        'bright': [
            un,
            new FR(0.8, 1),
            new FR(0.8, 1)
        ],
        'weak': [
            un,
            new FR(0.15, 0.3),
            new FR(0.7, 1),
            un,
            new FR(0.2, 0.2),
            un
        ],
        'neutral': [
            un,
            new FR(0.25, 0.35),
            new FR(0.3, 0.7),
            un,
            new FR(0.15, 0.15),
            new FR(0.9, 1)
        ],
        'fresh': [
            un,
            new FR(0.4, 0.8),
            new FR(0.8, 1),
            un,
            new FR(0.05, 0.3),
            new FR(0.8, 1)
        ],
        'soft': [
            un,
            new FR(0.2, 0.3),
            new FR(0.6, 0.9),
            un,
            new FR(0.05, 0.15),
            new FR(0.6, 0.9)
        ],
        'hard': [
            un,
            new FR(0.9, 1),
            new FR(0.4, 1)
        ],
        'warm': [
            un,
            new FR(0.6, 0.9),
            new FR(0.4, 0.9),
            un,
            new FR(0.2, 0.2),
            new FR(0.8, 1)
        ],
        'cool': [
            un,
            new FR(0.05, 0.2),
            new FR(0.9, 1),
            un,
            un,
            new FR(0.95, 1)
        ],
        'intense': [
            un,
            new FR(0.9, 1),
            new FR(0.2, 0.35)
        ]
    }, function(args, name) {
        args.push(name);
        var nameUC = name.toUpperCase();
        //construct a new ColorRange without params (only do this internally)
        ColorRange[nameUC] = new ColorRange();
        //apply the arguments to the constructor
        ColorRange.apply(ColorRange[nameUC], args);
        //reference the same object from the PRESETS object
        ColorRange.PRESETS[nameUC] = ColorRange[nameUC];
    });
    ColorRange.INTENSE.addBrightnessRange(new FR(0.8, 1));
})(FloatRange, undefined);
ColorRange.getPresetForName = function(name) {
    return ColorRange.PRESETS[name.toUpperCase()];
};
module.exports = ColorRange;

},{"./TColor":"4XKw0","./ColorList":"1i9Sc","../util/datatypes/FloatRange":"7jbx6","../internals/is":"4G2iR","../internals/each":"dGZ4W","../math/mathUtils":"bF4PI"}],"7jbx6":[function(require,module,exports) {
var mathUtils = require('../../math/mathUtils');
/**
 * construct a new `FloatRange`
 * provides utilities for dealing with a range of Numbers.
 * @param {Number} [min=0] the minimum in the range
 * @param {Number} [max=1.0] the maximum in the range
 * @constructor
 */ var FloatRange = function(min, max) {
    min = min || 0;
    max = typeof max === 'number' ? max : 1;
    // swap if necessary
    if (min > max) {
        var t = max;
        max = min;
        min = t;
    }
    this.min = min;
    this.max = max;
    this.currValue = min;
};
FloatRange.prototype = {
    adjustCurrentBy: function(val) {
        return this.setCurrent(this.currValue + val);
    },
    copy: function() {
        var range = new FloatRange(this.min, this.max);
        range.currValue = this.currValue;
        return range;
    },
    /**
     * Returns the value at the normalized position <code>(0.0 = min ... 1.0 =
     * max-EPS)</code> within the range. Since the max value is exclusive, the
     * value returned for position 1.0 is the range max value minus
     * {@link MathUtils#EPS}. Also note the given position is not being clipped
     * to the 0.0-1.0 interval, so when passing in values outside that interval
     * will produce out-of-range values too.
     * @param {Number} perc
     * @return {Number} value within the range
     */ getAt: function(perc) {
        return this.min + (this.max - this.min - mathUtils.EPS) * perc;
    },
    getCurrent: function() {
        return this.currValue;
    },
    getMedian: function() {
        return (this.min + this.max) * 0.5;
    },
    getRange: function() {
        return this.max - this.min;
    },
    isValueInRange: function(val) {
        return val >= this.min && val <= this.max;
    },
    pickRandom: function() {
        this.currValue = mathUtils.random(this.min, this.max);
        return this.currValue;
    },
    setCurrent: function(val) {
        this.currValue = mathUtils.clip(val, this.min, this.max);
        return this.currValue;
    },
    /*
	seed: function(seed){
		throw new Error("Not yet Implemented");
	},
	setRandom: function(rnd){
		
	}
	*/ toArray: function(step) {
        var range = [], v = this.min;
        while(v < this.max){
            range.push(v);
            v += step;
        }
        return range;
    },
    toString: function() {
        return "FloatRange: " + this.min + " -> " + this.max;
    }
};
module.exports = FloatRange;

},{"../../math/mathUtils":"bF4PI"}],"hjqyw":[function(require,module,exports) {
var each = require('../internals/each');
var MathUtils = require('../math/mathUtils');
var ColorRange = require('./ColorRange');
var NamedColor = require('./namedColor');
var ColorList = require('./ColorList');
var ColorTheme, _ThemePart;
/**
     * @private
     * internal object for a part of the theme
     * @param {ColorRange} range
     * @param {TColor} color.
     * @param {Number} weight
     */ _ThemePart = function(range, color, weight) {
    this.range = range;
    this.color = color;
    this.weight = weight;
};
_ThemePart.prototype.getColor = function() {
    return this.range.getColor(this.color, ColorRange.DEFAULT_VARIANCE);
};
/**
    * A ColorTheme is a weighted collection of {@link ColorRange}s used to define
    * custom palettes with a certain balance between individual colors/shades. New
    * theme parts can be added via textual descriptors referring to one of the
    * preset {@link ColorRange}s and/or {@link NamedColor}s: e.g.
    * "warm springgreen". For each theme part a weight has to be specified. The
    * magnitude of the weight value is irrelevant and is only important in relation
    * to the weights of other theme parts. For example: Theme part A with a weight
    * of 0.5 will only have 1/20 of the weight of theme part B with a weight of 5.0...
    */ ColorTheme = function(name) {
    this.name = name;
    this.parts = [];
    this._weightedSum = 0;
};
ColorTheme.prototype = {
    constructor: ColorTheme,
    /**
         * Add a range to the theme, 2 paramater options:
         * @param {toxi.color.ColorRange|string} range_or_descriptor either a range
         * or a tokenized string
         * @param {toxi.color.TColor|Number} color_or_weight a color if you provided
         * a ColorRange, or a weight if specified a descriptor
         * @param {Number} [weight] a weight if you specified a ColorRange and a TColor
         * for former parameters
         * @return itself
         */ addRange: function(range_or_descriptor, color_or_weight, weight) {
        var self = this;
        var _range, _col;
        if (arguments.length === 3) {
            this.parts.push(new _ThemePart(range_or_descriptor, color_or_weight, weight));
            this._weightedSum += weight;
        } else {
            //tokenize
            each(range_or_descriptor.split(' '), function(item) {
                if (ColorRange.getPresetForName(item)) _range = ColorRange.getPresetForName(item);
                else if (NamedColor.getForName(item)) _col = NamedColor.getForName(item);
            });
            if (_range) self.addRange(_range, _col, color_or_weight);
        }
        return this;
    },
    getColor: function() {
        var self = this, rnd = Math.random(), t, currWeight;
        for(var i = 0, l = this.parts.length; i < l; i++){
            t = this.parts[i];
            currWeight = t.weight / this._weightedSum;
            if (currWeight >= rnd) return t.getColor();
            rnd -= currWeight;
        }
        return null;
    },
    /**
         * Creates a {ColorList} of {TColor} based on the theme's
         * ranges and balance defined by their weights
         * @param {Number} num the number of colors to put in the list
         */ getColors: function(num) {
        var list = new ColorList();
        for(var i = 0; i < num; i++)list.add(this.getColor());
        return list;
    },
    /**
         * @return the theme's name
         */ getName: function() {
        return this.name;
    }
};
module.exports = ColorTheme;

},{"../internals/each":"dGZ4W","../math/mathUtils":"bF4PI","./ColorRange":"ki8vV","./namedColor":"eFB5k","./ColorList":"1i9Sc"}],"eFB5k":[function(require,module,exports) {
var TColor = require('./TColor');
var internals = require('../internals');
var each = internals.each, names = [], //kept private, used for `getForName`
namedColorMap = {
};
//attach every one of the X11 colors to NamedColor
//make all names uppercase
each(TColor.X11, function(value, key) {
    var upkey = key.toUpperCase();
    names.push(upkey);
    namedColorMap[upkey] = value;
    namedColorMap[key] = value;
    exports[upkey] = value;
});
/**
     * Returns the color for the given name
     * @param {String} name
     * @return color or undefined if name not found
     */ exports.getForName = function(name) {
    //return the color, and if it was sent like "springGreen", lowercase it to be nice :)
    return namedColorMap[name] || namedColorMap[name.toLowerCase()];
};
/**
     * Return the names of all defined colors
     * @return list of names
     */ exports.getNames = function() {
    return names.slice(0);
};

},{"./TColor":"4XKw0","../internals":"iIw4Q"}],"9s2Dk":[function(require,module,exports) {
var ColorTheoryRegistry = require('./theory/colorTheoryRegistry');
/**
    * Factory method. Creates a new ColorList based on the given
    * {@link ColorTheoryStrategy} instance and the given source color. The
    * number of colors returned will vary with the strategy chosen.
    * @param {string|toxi.color.theory.*Strategy} strategy either a string
    * for a strategy, such as "splitComplementary" or an instance of a strategy
    * @param {toxi.color.TColor} c a color to base the strategy off
    * @return {toxi.color.ColorList} new list
    */ module.exports = function(strategy, c) {
    if (typeof strategy == 'string') strategy = ColorTheoryRegistry.getStrategyForName(strategy);
    var list;
    if (strategy !== undefined) list = strategy.createListFromColor(c);
    return list;
};

},{"./theory/colorTheoryRegistry":"bUkVZ"}],"bUkVZ":[function(require,module,exports) {
var internals = require('../../internals'), each = internals.each, keys = internals.keys, values = internals.values, implementations = {
};
var strats = {
    SINGLE_COMPLEMENT: require('./SingleComplementStrategy'),
    COMPLEMENTARY: require('./ComplementaryStrategy'),
    SPLIT_COMPLEMENTARY: require('./SplitComplementaryStrategy'),
    LEFT_SPLIT_COMPLEMENTARY: require('./LeftSplitComplementaryStrategy'),
    RIGHT_SPLIT_COMPLEMENTARY: require('./RightSplitComplementaryStrategy'),
    ANALAGOUS: require('./AnalagousStrategy'),
    MONOCHROME: require('./MonochromeTheoryStrategy'),
    TRIAD: require('./TriadTheoryStrategy'),
    TETRAD: require('./TetradTheoryStrategy'),
    COMPOUND: require('./CompoundTheoryStrategy')
};
exports.getRegisteredNames = function() {
    return keys(implementations);
};
exports.getRegisteredStrategies = function() {
    return values(implementations);
};
exports.getStrategyForName = function(id) {
    return implementations[id];
};
exports.registerImplementation = function(impl) {
    implementations[impl.getName()] = impl;
};
each(strats, function(Constructor, type) {
    exports[type] = new strats[type]();
    exports.registerImplementation(exports[type]);
});

},{"../../internals":"iIw4Q","./SingleComplementStrategy":"jm8x2","./ComplementaryStrategy":"biP88","./SplitComplementaryStrategy":"ko9v9","./LeftSplitComplementaryStrategy":"caF5I","./RightSplitComplementaryStrategy":"8pVTo","./AnalagousStrategy":"6mqs3","./MonochromeTheoryStrategy":"eY0cu","./TriadTheoryStrategy":"8wQ2t","./TetradTheoryStrategy":"cJ58r","./CompoundTheoryStrategy":"eJg3j"}],"jm8x2":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
/**
    * Implements the <a href=
    * "http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm#complementary"
    * >single complementary color scheme</a> to create a compatible color for the
    * given one.
    */ var getName = function() {
    return "complement";
};
module.exports = strategies.create('SingleComplement', {
    createListFromColor: function(src) {
        var list = new ColorList(src);
        list.add(src.getComplement());
        return list;
    },
    getName: getName,
    toString: getName
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"kRZLj":[function(require,module,exports) {
var has = require('../../internals/has');
var is = require('../../internals/is');
var has = has.all, isTColor = is.TColor;
exports.create = function(name, constructor, extend) {
    if (arguments.length === 2) {
        extend = constructor;
        constructor = function() {
        };
    }
    var _NAME = name.charAt(0).toLowerCase() + name.slice(1, name.length);
    constructor.prototype.constructor = constructor;
    constructor.prototype.getName = function() {
        return _NAME;
    };
    constructor.prototype.toString = constructor.prototype.getName;
    for(var prop in extend)constructor.prototype[prop] = extend[prop];
    //wrap this function in an error-condition
    (function(createList) {
        constructor.prototype.createListFromColor = function(src) {
            if (!isTColor(src)) throw new Error('src color was not a valid TColor');
            return createList.call(this, src);
        };
    })(constructor.prototype.createListFromColor);
    return constructor;
};
exports.wrap = function(x, min, threshold, plus) {
    if (x - min < threshold) return x + plus;
    return x - min;
};

},{"../../internals/has":"2hvR2","../../internals/is":"4G2iR"}],"biP88":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var adjust = function(c, thresh) {
    var b = c.brightness();
    if (b > thresh) c.setBrightness(0.1 + b * 0.25);
    else c.setBrightness(1 - b * 0.25);
    return c;
};
module.exports = strategies.create('Complementary', {
    createListFromColor: function(src) {
        var colors = new ColorList(src), c;
        // A contrasting color: much darker or lighter than the original
        colors.add(adjust(src.copy(), 0.4));
        // A soft supporting color: lighter and less saturated
        c = src.copy();
        c.lighten(0.3);
        c.setSaturation(0.1 + c.saturation() * 0.3);
        colors.add(c);
        // A contrasting complement: very dark or very light
        colors.add(adjust(src.getComplement(), 0.3));
        // The complment and a light supporting variant
        colors.add(src.getComplement());
        c = src.getComplement();
        c.lighten(0.3);
        c.setSaturation(0.1 + c.saturation() * 0.25);
        colors.add(c);
        return colors;
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"ko9v9":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
/**
    * Implements the <a href=
    * "http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm#split-complementary"
    * >split-complementary color scheme</a> to create 2 compatible colors for the
    * given one.
    */ module.exports = strategies.create('SplitComplementary', {
    createListFromColor: function(src) {
        var colors = new ColorList(src);
        colors.add(src.getRotatedRYB(150).lighten(0.1));
        colors.add(src.getRotatedRYB(210).lighten(0.1));
        return colors;
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"caF5I":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var ComplementaryStrategy = require('./ComplementaryStrategy');
var complementary;
/**
     * creates an instance of a LeftSplitComplementaryStrategy
     * @constructor
     */ module.exports = strategies.create('LeftSplitComplementary', {
    createListFromColor: function(src) {
        //first time create the instance, then just reuse it
        complementary = complementary || new ComplementaryStrategy();
        var left = src.getComplement().rotateRYB(-30).lighten(0.1), colors = complementary.createListFromColor(src), c;
        for(var i = 3; i < 6; i++){
            c = colors.get(i);
            c.setHue(left.hue());
        }
        return colors;
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc","./ComplementaryStrategy":"biP88"}],"8pVTo":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var ComplementaryStrategy = require('./ComplementaryStrategy');
var complementary;
module.exports = strategies.create('RightSplitComplementary', {
    createListFromColor: function(src) {
        complementary = complementary || new ComplementaryStrategy();
        var left = src.getComplement().rotateRYB(30).lighten(0.1), colors = complementary.createListFromColor(src), c;
        for(var i = 3; i < 6; i++){
            c = colors.get(i);
            c.setHue(left.hue());
        }
        return colors;
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc","./ComplementaryStrategy":"biP88"}],"6mqs3":[function(require,module,exports) {
var strategies = require('./strategies');
var vectors = require('../../geom/vectors');
var MathUtils = require('../../math/mathUtils');
var internals = require('../../internals');
var ColorList = require('../ColorList');
var each = internals.each, Vec2D = vectors.Vec2D;
//@private
var _tones = [
    new Vec2D(1, 2.2),
    new Vec2D(2, 1),
    new Vec2D(-1, -0.5),
    new Vec2D(-2, 1)
];
module.exports = strategies.create('Analagous', /**
        * Creates a new instance
        * @param {Number} [theta] optionally provide an angle in degrees, defaults to 10
        * @param {Number} [contrast] optionally provide a contrast, defaults to 0.25
        */ function(theta, contrast) {
    this.contrast = typeof contrast === 'number' ? contrast : 0.25;
    this.theta = MathUtils.radians(typeof theta === 'number' ? theta : 10);
}, {
    createListFromColor: function(src) {
        var self = this;
        this.contrast = MathUtils.clipNormalized(this.contrast);
        var colors = new ColorList(src);
        each(_tones, function(currTone) {
            var c = src.getRotatedRYB(self.theta * currTone.x), t = 0.44 - currTone.y * 0.1;
            if (src.brightness() - self.contras * currTone.y < t) c.setBrightness(t);
            else c.setBrightness(src.brightness() - self.contrast * currTone.y);
            c.desaturate(0.05);
            colors.add(c);
        });
        return colors;
    },
    toString: function() {
        return 'analagous contrast: ' + this.contrast + ' theta: ' + MathUtils.degrees(this.theta);
    }
});

},{"./strategies":"kRZLj","../../geom/vectors":"aHZPH","../../math/mathUtils":"bF4PI","../../internals":"iIw4Q","../ColorList":"1i9Sc"}],"eY0cu":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var wrap = strategies.wrap;
module.exports = strategies.create('Monochrome', {
    createListFromColor: function(src) {
        var colors = new ColorList(src), c = src.copy();
        c.setBrightness(wrap(c.brightness(), 0.5, 0.2, 0.3));
        c.setSaturation(wrap(c.saturation(), 0.3, 0.1, 0.3));
        colors.add(c);
        c = src.copy();
        c.setBrightness(wrap(c.brightness(), 0.2, 0.2, 0.6));
        colors.add(c);
        c = src.copy();
        c.setBrightness(Math.max(0.2, c.brightness() + (1 - c.brightness()) * 0.2));
        c.setSaturation(wrap(c.saturation(), 0.3, 0.1, 0.3));
        colors.add(c);
        c = src.copy();
        c.setBrightness(wrap(c.brightness(), 0.5, 0.2, 0.3));
        colors.add(c);
        return colors;
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"8wQ2t":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var getName = function() {
    return 'triad';
};
/**
    * Implements the <a href=
    * "http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm#triadic"
    * >triadic color scheme</a> to create 3 compatible colors for the given one.
    */ module.exports = strategies.create('TriadTheory', {
    createListFromColor: function(src) {
        var colors = new ColorList(src);
        colors.add(src.getRotatedRYB(120).lighten(0.1));
        colors.add(src.getRotatedRYB(-120).lighten(0.1));
        return colors;
    },
    getName: getName,
    toString: toString
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"cJ58r":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var getName = function() {
    return 'tetrad';
}, adjust = function(c) {
    return c[c.brightness() < 0.5 ? 'lighten' : 'darken'](0.2);
};
/**
    * Implements the <a href=
    * "http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm#rectangle"
    * >tetradic color scheme</a> to create 4 compatible colors for the given one.
    */ module.exports = strategies.create('TetradTheory', /**
        * Constructs a new instance with the given color offset angle
        * @param {Number} hue rotation angle in degrees
        */ function(theta) {
    this.theta = typeof theta === 'number' ? theta : 90;
}, {
    createListFromColor: function(src) {
        var colors = new ColorList(src);
        colors.add(adjust(src.getRotatedRYB(this.theta)));
        colors.add(adjust(src.getRotatedRYB(this.theta * 2)));
        colors.add(src.getRotatedRYB(this.theta * 3).lighten(0.1));
        return colors;
    },
    getName: getName,
    toString: getName
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"eJg3j":[function(require,module,exports) {
var strategies = require('./strategies');
var ColorList = require('../ColorList');
var wrap = strategies.wrap;
module.exports = strategies.create('Compound', function(flipped) {
    this._isFlipped = flipped === true;
}, {
    createListFromColor: function(src) {
        var colors = new ColorList(src), direction = this._isFlipped ? -1 : 1, c;
        c = src.getRotatedRYB(30 * direction);
        c.setBrightness(wrap(c.brightness(), 0.25, 0.6, 0.25));
        colors.add(c);
        c = src.getRotatedRYB(30 * direction);
        c.setSaturation(wrap(c.saturation(), 0.4, 0.1, 0.4));
        c.setBrightness(wrap(c.brightness(), 0.4, 0.2, 0.4));
        colors.add(c);
        c = src.getRotatedRYB(160 * direction);
        c.setSaturation(wrap(c.saturation(), 0.25, 0.1, 0.25));
        c.setBrightness(Math.max(0.2, c.brightness()));
        colors.add(c);
        c = src.getRotatedRYB(150 * direction);
        c.setSaturation(wrap(c.saturation(), 0.1, 0.8, 0.1));
        c.setBrightness(wrap(c.brightness(), 0.3, 0.6, 0.3));
        colors.add(c);
        /* disabled in java: http://hg.postspectacular.com/toxiclibs/src/4cfadbbea3b0bd02e2081e532f44782c5bfd67d7/src.color/toxi/color/theory/CompoundTheoryStrategy.java?at=default#cl-89
            c = src.getRotatedRYB(150 * direction);
            c.setSaturation(wrap(c.saturation(), 0.1, 0.8, 0.1));
            c.setBrightness(wrap(c.brightness(), 0.4, 0.2, 0.4));
            colors.add(c);*/ return colors;
    },
    isFlipped: function() {
        return this._isFlipped;
    },
    setFlipped: function(state) {
        this._isFlipped = state;
    },
    toString: function() {
        return 'Compound' + (this.isFlipped() ? "_flipped" : "");
    }
});

},{"./strategies":"kRZLj","../ColorList":"1i9Sc"}],"iCBxp":[function(require,module,exports) {
var HistEntry = function(c) {
    this.col = c;
    this.freq = 1;
};
HistEntry.prototype = {
    constructor: HistEntry,
    compareTo: function(entry) {
        return parseInt(entry.freq - this.freq, 10);
    },
    getColor: function() {
        return this.col;
    },
    getFrequency: function() {
        return this.freq;
    }
};
module.exports = HistEntry;

},{}],"aou90":[function(require,module,exports) {
var each = require('../internals').each, Iterator = require('../internals').Iterator, HistEntry = require('./HistEntry'), ColorList = require('./ColorList');
/**
	 * Histogram constructor
	 * @param {toxi.color.ColorList} palette
	 */ var Histogram = function(palette) {
    this.palette = palette;
};
Histogram.prototype = {
    constructor: Histogram,
    /**
		 * @param {Number} tolerance color tolerance used to merge similar colors
		 * (based on RGB distance)
		 * @param {Boolean} blendCols switch to enable color blending of binned colors
		 * @type sorted histogram as List of HistEntry
		 */ compute: function(tolerance, blendCols) {
        var self = this;
        this.entries = [];
        var maxFreq = 1;
        this.palette.each(function(c) {
            var existing, e, i = 0, l = self.entries.length;
            for(i = 0; i < l; i++){
                e = self.entries[i];
                if (e.col.distanceToRGB(c) < tolerance) {
                    if (blendCols) e.col.blend(c, 1 / (e.freq + 1));
                    existing = e;
                    break;
                }
            }
            if (existing !== undefined) {
                existing.freq++;
                if (existing.freq > maxFreq) maxFreq = existing.freq;
            } else self.entries.push(new HistEntry(c));
        });
        this.entries.sort();
        maxFreq = 1 / this.palette.size();
        each(this.entries, function(e) {
            e.freq *= maxFreq;
        });
        return this.entries;
    },
    getEntries: function() {
        return this.entries;
    },
    getPalette: function() {
        return this.palette;
    },
    iterator: function() {
        return new Iterator(this.entries);
    },
    setPalette: function(palette) {
        this.palette = palette;
    }
};
Histogram.newFromARGBArray = function(pixels, numSamples, tolerance, blendCols) {
    var h = new Histogram(ColorList.createFromARGBArray(pixels, numSamples, false));
    h.compute(tolerance, blendCols);
    return h;
};
module.exports = Histogram;

},{"../internals":"iIw4Q","./HistEntry":"iCBxp","./ColorList":"1i9Sc"}],"3H4ZK":[function(require,module,exports) {
exports.AnalagousStrategy = require('./theory/AnalagousStrategy');
exports.colorTheoryRegistry = require('./theory/colorTheoryRegistry');
//keep it uppercase also
exports.ColorTheoryRegistry = exports.colorTheoryRegistry;
exports.ComplementaryStrategy = require('./theory/ComplementaryStrategy');
exports.CompoundTheoryStrategy = require('./theory/CompoundTheoryStrategy');
exports.LeftSplitComplementaryStrategy = require('./theory/LeftSplitComplementaryStrategy');
exports.MonochromeTheoryStrategy = require('./theory/MonochromeTheoryStrategy');
exports.RightSplitComplementaryStrategy = require('./theory/RightSplitComplementaryStrategy');
exports.SingleComplementStrategy = require('./theory/SingleComplementStrategy');
exports.SplitComplementaryStrategy = require('./theory/SplitComplementaryStrategy');
exports.TetradTheoryStrategy = require('./theory/TetradTheoryStrategy');
exports.TriadTheoryStrategy = require('./theory/TriadTheoryStrategy');
//for creating custom strategies
exports.strategies = require('./theory/strategies');

},{"./theory/AnalagousStrategy":"6mqs3","./theory/colorTheoryRegistry":"bUkVZ","./theory/ComplementaryStrategy":"biP88","./theory/CompoundTheoryStrategy":"eJg3j","./theory/LeftSplitComplementaryStrategy":"caF5I","./theory/MonochromeTheoryStrategy":"eY0cu","./theory/RightSplitComplementaryStrategy":"8pVTo","./theory/SingleComplementStrategy":"jm8x2","./theory/SplitComplementaryStrategy":"ko9v9","./theory/TetradTheoryStrategy":"cJ58r","./theory/TriadTheoryStrategy":"8wQ2t","./theory/strategies":"kRZLj"}],"e5u4H":[function(require,module,exports) {
var is = require('../internals/is');
var ScaleMap = require('../math/ScaleMap');
var ColorList = require('./ColorList');
var ColorGradient = require('./ColorGradient');
var ToneMap;
/**
     * ToneMap
     * @constructor
     * @param {Number} min `min` or `a`
     * @param {Number} max `max` or `b`
     * @param {toxi.color.ColorGradient|ColorList|TColor} g
     * @param {toxi.color.TColor} [colorB]
     * @param {Number} [resolution]
     *
     * @usages
     * new ToneMap( min, max, gradient );
     * or
     * new ToneMap( min, max, colorList );
     * or
     * new ToneMap( a, b, colorA, colorB );
     * or
     * new ToneMap( min, max, colorA, colorB, resolution );
     */ ToneMap = function(min, max, list, colorB, resolution) {
    var al = arguments.length;
    if (al > 3) {
        //( a, b, colorA, colorB )
        if (al === 4) list = new ColorList(list, colorB);
        else {
            //( min, max, colorA, colorB, resolution )
            var colA = list;
            list = new ColorGradient();
            list.addColorAt(0, colA);
            list.addColorAt(resolution - 1, colorB);
            list = list.calcGradient(0, resolution);
        }
    }
    //( min, max, gradient ) or
    //( min, max, colorlist )
    if (is.ColorGradient(list)) //make it a colorlist
    list = list.calcGradient();
    this.map = new ScaleMap(min, max, 0, list.size() - 1);
    this.colors = list;
};
ToneMap.prototype = {
    constructor: ToneMap,
    getARGBToneFor: function(t) {
        return this.getToneFor(t).toARGB();
    },
    /**
        * get a color from a tonal value
        * @param {Number} t
        * @return {toxi.color.TColor}
        */ getToneFor: function(t) {
        var idx;
        if (this.colors.size() > 2) idx = Math.floor(this.map.getClippedValueFor(t) + 0.5);
        else idx = t >= this.map.getInputMedian() ? 1 : 0;
        return this.colors.get(idx);
    },
    /**
        * Applies the tonemap to all elements in the given source array of
        * values and places the resulting ARGB color in the corresponding
        * index of the target pixel buffer. If the target buffer is null, a new one
        * will be created automatically.
        *
        * @param {Array<Number>}src source array of values to be tone mapped
        * @param {Array<Number>}pixels target pixel buffer
        * @param {Number} [offset] optionally provide an index-offset to start
        * at in the destination pixels array
        * @return pixel array
        */ getToneMappedArray: function(src, pixels, offset) {
        if (typeof offset !== 'number') offset = 0;
        else if (offset < 0) throw new Error("offset into target pixel array is negative");
        pixels = pixels || new Array(src.length);
        for(var i = 0, l = src.length; i < l; i++)pixels[offset++] = this.getToneFor(src[i]).toARGB();
        return pixels;
    },
    /**
         * @param {toxi.math.InterpolateStrategy} func
         */ setMapFunction: function(func) {
        this.map.setMapFunction(func);
    }
};
module.exports = ToneMap;

},{"../internals/is":"4G2iR","../math/ScaleMap":"3UZGr","./ColorList":"1i9Sc","./ColorGradient":"5nvB4"}],"3UZGr":[function(require,module,exports) {
var mathUtils = require('./mathUtils'), LinearInterpolation = require('./LinearInterpolation');
var _Range = function(min, max) {
    this.min = min;
    this.max = max;
};
_Range.prototype.toString = function() {
    return "{ min: " + this.min + ", max: " + this.max + "}";
};
/**
 * @class This class maps values from one interval into another. By default the mapping
 * is using linear projection, but can be changed by using alternative
 * {@link math.InterpolateStrategy} implementations to achieve a
 * non-regular mapping.
 *
 * @member toxi
 *
 * @description Creates a new instance to map values between the 2 number ranges
 * specified. By default linear projection is used.
 * @param {Number} minIn
 * @param {Number} maxIn
 * @param {Number} minOut
 * @param {Number} maxOut
 */ var ScaleMap = function(minIn, maxIn, minOut, maxOut) {
    if (arguments.length == 1 && arguments[0].input !== undefined && arguments[0].output !== undefined) {
        var arg = arguments[0];
        minOut = arg.output.min;
        maxOut = arg.output.max;
        maxIn = arg.input.max;
        minIn = arg.input.min;
    }
    this.mapFunction = new LinearInterpolation();
    this.setInputRange(minIn, maxIn);
    this.setOutputRange(minOut, maxOut);
};
ScaleMap.prototype = {
    /**
     * Computes mapped value in the target interval and ensures the input value
     * is clipped to source interval.
     * 
     * @param val
     * @return mapped value
     */ getClippedValueFor: function(val) {
        var t = mathUtils.clipNormalized((val - this._in.min) / this._interval);
        return this.mapFunction.interpolate(0, this.mapRange, t) + this._out.min;
    },
    /**
     * @return the middle value of the input range.
     */ getInputMedian: function() {
        return (this._in.min + this._in.max) * 0.5;
    },
    /**
     * @return the in
     */ getInputRange: function() {
        return this._in;
    },
    /**
     * @return the mapped middle value of the output range. Depending on the
     *         mapping function used, this value might be different to the one
     *         returned by {@link #getOutputMedian()}.
     */ getMappedMedian: function() {
        return this.getMappedValueFor(0.5);
    },
    /**
     * Computes mapped value in the target interval. Does check if input value
     * is outside the input range.
     * 
     * @param val
     * @return mapped value
     */ getMappedValueFor: function(val) {
        var t = (val - this._in.min) / this._interval;
        return this.mapFunction.interpolate(0, this.mapRange, t) + this._out.min;
    },
    /**
     * @return the middle value of the output range
     */ getOutputMedian: function() {
        return (this._out.min + this._out.max) * 0.5;
    },
    /**
     * @return the output range
     */ getOutputRange: function() {
        return this._out;
    },
    /**
     * Sets new minimum & maximum values for the input range
     * 
     * @param min
     * @param max
     */ setInputRange: function(min, max) {
        this._in = new _Range(min, max);
        this._interval = max - min;
    },
    /**
     * Overrides the mapping function used for the scale conversion.
     * 
     * @param func
     *            interpolate strategy implementation
     */ setMapFunction: function(func) {
        this.mapFunction = func;
    },
    /**
     * Sets new minimum & maximum values for the output/target range
     * 
     * @param min
     *            new min output value
     * @param max
     *            new max output value
     */ setOutputRange: function(min, max) {
        this._out = new _Range(min, max);
        this.mapRange = max - min;
    },
    toString: function() {
        return "ScaleMap, inputRange: " + this._in.toString() + " outputRange: " + this._out.toString();
    }
};
module.exports = ScaleMap;

},{"./mathUtils":"bF4PI","./LinearInterpolation":"fp5tv"}],"cpUdF":[function(require,module,exports) {
exports.AABB = require('./geom/AABB');
exports.mesh = require('./geom/mesh');
exports.BernsteinPolynomial = require('./geom/BernsteinPolynomial');
exports.Circle = require('./geom/Circle');
exports.CircleIntersector = require('./geom/CircleIntersector');
exports.Cone = require('./geom/Cone');
exports.ConvexPolygonClipper = require('./geom/ConvexPolygonClipper');
exports.Ellipse = require('./geom/Ellipse');
exports.IsectData2D = require('./geom/IsectData2D');
exports.IsectData3D = require('./geom/IsectData3D');
exports.Line2D = require('./geom/Line2D');
exports.Line3D = require('./geom/Line3D');
exports.LineStrip3D = require('./geom/LineStrip3D');
exports.Matrix4x4 = require('./geom/Matrix4x4');
exports.Plane = require('./geom/Plane');
exports.Polygon2D = require('./geom/Polygon2D');
exports.Quaternion = require('./geom/Quaternion');
exports.Ray2D = require('./geom/Ray2D');
exports.Ray3D = require('./geom/Ray3D');
exports.Ray3DIntersector = require('./geom/Ray3DIntersector');
exports.Rect = require('./geom/Rect');
exports.Sphere = require('./geom/Sphere');
exports.Spline2D = require('./geom/Spline2D');
exports.Spline3D = require('./geom/Spline3D');
exports.SutherlandHodgemanClipper = require('./geom/SutherlandHodgemanClipper');
exports.Triangle2D = require('./geom/Triangle2D');
exports.Triangle3D = require('./geom/Triangle3D');
exports.Vec2D = require('./geom/Vec2D');
exports.Vec3D = require('./geom/Vec3D');
exports.XAxisCylinder = require('./geom/XAxisCylinder');
exports.YAxisCylinder = require('./geom/YAxisCylinder');
exports.ZAxisCylinder = require('./geom/ZAxisCylinder');

},{"./geom/AABB":"6ZidC","./geom/mesh":"059x1","./geom/BernsteinPolynomial":"18WGa","./geom/Circle":"7rYzr","./geom/CircleIntersector":"kOPg8","./geom/Cone":"4JHEk","./geom/ConvexPolygonClipper":"5vnhk","./geom/Ellipse":"9H9Du","./geom/IsectData2D":"cOadS","./geom/IsectData3D":"2LfTk","./geom/Line2D":"2HvSh","./geom/Line3D":"b5COq","./geom/LineStrip3D":"1r0YT","./geom/Matrix4x4":"c1T7H","./geom/Plane":"ftdlJ","./geom/Polygon2D":"d9pnk","./geom/Quaternion":"adHTo","./geom/Ray2D":"k92SH","./geom/Ray3D":"6rIwI","./geom/Ray3DIntersector":"4HdDQ","./geom/Rect":"7QDy8","./geom/Sphere":"bxMAT","./geom/Spline2D":"f1xbM","./geom/Spline3D":"ddHro","./geom/SutherlandHodgemanClipper":"1wGsx","./geom/Triangle2D":"kZrbk","./geom/Triangle3D":"lw0Ec","./geom/Vec2D":"hVtPc","./geom/Vec3D":"2Czl7","./geom/XAxisCylinder":"jg3e0","./geom/YAxisCylinder":"dXziX","./geom/ZAxisCylinder":"aMhRa"}],"6ZidC":[function(require,module,exports) {
var internals = require('../internals'), Vec3D = require('./Vec3D'), Vec2D = require('./Vec2D'), mathUtils = require('../math/mathUtils');
/**
 @class Axis-aligned Bounding Box
 @member
 */ var AABB = function(a, b) {
    if (a === undefined) {
        Vec3D.call(this);
        this.setExtent(new Vec3D());
    } else if (typeof a == "number") {
        Vec3D.call(this, new Vec3D());
        this.setExtent(a);
    } else if (internals.has.XYZ(a)) {
        Vec3D.call(this, a);
        if (b === undefined && internals.is.AABB(a)) this.setExtent(a.getExtent());
        else if (typeof b == "number") this.setExtent(new Vec3D(b, b, b));
        else this.setExtent(b);
    }
};
internals.extend(AABB, Vec3D);
AABB.fromMinMax = function(min, max) {
    var a = Vec3D.min(min, max);
    var b = Vec3D.max(min, max);
    return new AABB(a.interpolateTo(b, 0.5), b.sub(a).scaleSelf(0.5));
};
AABB.prototype.containsPoint = function(p) {
    return p.isInAABB(this);
};
AABB.prototype.copy = function() {
    return new AABB(this);
};
/**
 * Returns the current box size as new Vec3D instance (updating this vector
 * will NOT update the box size! Use {@link #setExtent(ReadonlyVec3D)} for
 * those purposes)
 *
 * @return box size
 */ AABB.prototype.getExtent = function() {
    return this.extent.copy();
};
AABB.prototype.getMax = function() {
    // return this.add(extent);
    return this.max.copy();
};
AABB.prototype.getMin = function() {
    return this.min.copy();
};
AABB.prototype.getNormalForPoint = function(p) {
    p = p.sub(this);
    var pabs = this.extent.sub(p.getAbs());
    var psign = p.getSignum();
    var normal = Vec3D.X_AXIS.scale(psign.x);
    var minDist = pabs.x;
    if (pabs.y < minDist) {
        minDist = pabs.y;
        normal = Vec3D.Y_AXIS.scale(psign.y);
    }
    if (pabs.z < minDist) normal = Vec3D.Z_AXIS.scale(psign.z);
    return normal;
};
/**
 * Adjusts the box size and position such that it includes the given point.
 *
 * @param p
 *            point to include
 * @return itself
 */ AABB.prototype.includePoint = function(p) {
    this.min.minSelf(p);
    this.max.maxSelf(p);
    this.set(this.min.interpolateTo(this.max, 0.5));
    this.extent.set(this.max.sub(this.min).scaleSelf(0.5));
    return this;
};
/**
* Checks if the box intersects the passed in one.
*
* @param box
*            box to check
* @return true, if boxes overlap
*/ AABB.prototype.intersectsBox = function(box) {
    var t = box.sub(this);
    return Math.abs(t.x) <= this.extent.x + box.extent.x && Math.abs(t.y) <= this.extent.y + box.extent.y && Math.abs(t.z) <= this.extent.z + box.extent.z;
};
/**
 * Calculates intersection with the given ray between a certain distance
 * interval.
 *
 * Ray-box intersection is using IEEE numerical properties to ensure the
 * test is both robust and efficient, as described in:
 *
 * Amy Williams, Steve Barrus, R. Keith Morley, and Peter Shirley: "An
 * Efficient and Robust Ray-Box Intersection Algorithm" Journal of graphics
 * tools, 10(1):49-54, 2005
 *
 * @param ray incident ray
 * @param minDist
 * @param maxDist
 * @return intersection point on the bounding box (only the first is
 *         returned) or null if no intersection
 */ AABB.prototype.intersectsRay = function(ray, minDist, maxDist) {
    var invDir = ray.getDirection().reciprocal();
    var signDirX = invDir.x < 0;
    var signDirY = invDir.y < 0;
    var signDirZ = invDir.z < 0;
    var bbox = signDirX ? this.max : this.min;
    var tmin = (bbox.x - ray.x) * invDir.x;
    bbox = signDirX ? this.min : this.max;
    var tmax = (bbox.x - ray.x) * invDir.x;
    bbox = signDirY ? this.max : this.min;
    var tymin = (bbox.y - ray.y) * invDir.y;
    bbox = signDirY ? this.min : this.max;
    var tymax = (bbox.y - ray.y) * invDir.y;
    if (tmin > tymax || tymin > tmax) return null;
    if (tymin > tmin) tmin = tymin;
    if (tymax < tmax) tmax = tymax;
    bbox = signDirZ ? this.max : this.min;
    var tzmin = (bbox.z - ray.z) * invDir.z;
    bbox = signDirZ ? this.min : this.max;
    var tzmax = (bbox.z - ray.z) * invDir.z;
    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin) tmin = tzmin;
    if (tzmax < tmax) tmax = tzmax;
    if (tmin < maxDist && tmax > minDist) return ray.getPointAtDistance(tmin);
    return undefined;
};
/**
 * @param c
 *            sphere centre
 * @param r
 *            sphere radius
 * @return true, if AABB intersects with sphere
 */ AABB.prototype.intersectsSphere = function(c, r) {
    if (arguments.length == 1) r = c.radius;
    var s, d = 0;
    // find the square of the distance
    // from the sphere to the box
    if (c.x < this.min.x) {
        s = c.x - this.min.x;
        d = s * s;
    } else if (c.x > this.max.x) {
        s = c.x - this.max.x;
        d += s * s;
    }
    if (c.y < this.min.y) {
        s = c.y - this.min.y;
        d += s * s;
    } else if (c.y > this.max.y) {
        s = c.y - this.max.y;
        d += s * s;
    }
    if (c.z < this.min.z) {
        s = c.z - this.min.z;
        d += s * s;
    } else if (c.z > this.max.z) {
        s = c.z - this.max.z;
        d += s * s;
    }
    return d <= r * r;
};
AABB.prototype.intersectsTriangle = function(tri) {
    // use separating axis theorem to test overlap between triangle and box
    // need to test for overlap in these directions:
    //
    // 1) the {x,y,z}-directions (actually, since we use the AABB of the
    // triangle
    // we do not even need to test these)
    // 2) normal of the triangle
    // 3) crossproduct(edge from tri, {x,y,z}-directin)
    // this gives 3x3=9 more tests
    var v0, v1, v2, normal, e0, e1, e2, f;
    // move everything so that the boxcenter is in (0,0,0)
    v0 = tri.a.sub(this);
    v1 = tri.b.sub(this);
    v2 = tri.c.sub(this);
    // compute triangle edges
    e0 = v1.sub(v0);
    e1 = v2.sub(v1);
    e2 = v0.sub(v2);
    // test the 9 tests first (this was faster)
    f = e0.getAbs();
    if (this.testAxis(e0.z, -e0.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) return false;
    if (this.testAxis(-e0.z, e0.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) return false;
    if (this.testAxis(e0.y, -e0.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) return false;
    f = e1.getAbs();
    if (this.testAxis(e1.z, -e1.y, f.z, f.y, v0.y, v0.z, v2.y, v2.z, this.extent.y, this.extent.z)) return false;
    if (this.testAxis(-e1.z, e1.x, f.z, f.x, v0.x, v0.z, v2.x, v2.z, this.extent.x, this.extent.z)) return false;
    if (this.testAxis(e1.y, -e1.x, f.y, f.x, v0.x, v0.y, v1.x, v1.y, this.extent.x, this.extent.y)) return false;
    f = e2.getAbs();
    if (this.testAxis(e2.z, -e2.y, f.z, f.y, v0.y, v0.z, v1.y, v1.z, this.extent.y, this.extent.z)) return false;
    if (this.testAxis(-e2.z, e2.x, f.z, f.x, v0.x, v0.z, v1.x, v1.z, this.extent.x, this.extent.z)) return false;
    if (this.testAxis(e2.y, -e2.x, f.y, f.x, v1.x, v1.y, v2.x, v2.y, this.extent.x, this.extent.y)) return false;
    // first test overlap in the {x,y,z}-directions
    // find min, max of the triangle each direction, and test for overlap in
    // that direction -- this is equivalent to testing a minimal AABB around
    // the triangle against the AABB
    // test in X-direction
    if (mathUtils.min(v0.x, v1.x, v2.x) > this.extent.x || mathUtils.max(v0.x, v1.x, v2.x) < -this.extent.x) return false;
    // test in Y-direction
    if (mathUtils.min(v0.y, v1.y, v2.y) > this.extent.y || mathUtils.max(v0.y, v1.y, v2.y) < -this.extent.y) return false;
    // test in Z-direction
    if (mathUtils.min(v0.z, v1.z, v2.z) > this.extent.z || mathUtils.max(v0.z, v1.z, v2.z) < -this.extent.z) return false;
    // test if the box intersects the plane of the triangle
    // compute plane equation of triangle: normal*x+d=0
    normal = e0.cross(e1);
    var d = -normal.dot(v0);
    if (!this.planeBoxOverlap(normal, d, this.extent)) return false;
    return true;
};
AABB.prototype.planeBoxOverlap = function(normal, d, maxbox) {
    var vmin = new Vec3D();
    var vmax = new Vec3D();
    if (normal.x > 0) {
        vmin.x = -maxbox.x;
        vmax.x = maxbox.x;
    } else {
        vmin.x = maxbox.x;
        vmax.x = -maxbox.x;
    }
    if (normal.y > 0) {
        vmin.y = -maxbox.y;
        vmax.y = maxbox.y;
    } else {
        vmin.y = maxbox.y;
        vmax.y = -maxbox.y;
    }
    if (normal.z > 0) {
        vmin.z = -maxbox.z;
        vmax.z = maxbox.z;
    } else {
        vmin.z = maxbox.z;
        vmax.z = -maxbox.z;
    }
    if (normal.dot(vmin) + d > 0) return false;
    if (normal.dot(vmax) + d >= 0) return true;
    return false;
};
/**
 * Updates the position of the box in space and calls
 * {@link #updateBounds()} immediately
 *
 * @see geom.Vec3D#set(float, float, float)
 */ AABB.prototype.set = function(a, b, c) {
    if (internals.is.AABB(a)) {
        this.extent.set(a.extent);
        return Vec3D.set.apply(this, [
            a
        ]);
    }
    if (internals.has.XYZ(a)) {
        b = a.y;
        c = a.z;
        a = a.a;
    }
    this.x = a;
    this.y = b;
    this.z = c;
    this.updateBounds();
    return this;
};
AABB.prototype.setExtent = function(extent) {
    this.extent = extent.copy();
    return this.updateBounds();
};
AABB.prototype.testAxis = function(a, b, fa, fb, va, vb, wa, wb, ea, eb) {
    var p0 = a * va + b * vb;
    var p2 = a * wa + b * wb;
    var min;
    var max;
    if (p0 < p2) {
        min = p0;
        max = p2;
    } else {
        min = p2;
        max = p0;
    }
    var rad = fa * ea + fb * eb;
    return min > rad || max < -rad;
};
AABB.prototype.toMesh = function(mesh) {
    if (mesh === undefined) {
        var TriangleMesh = require('./mesh/meshCommon').TriangleMesh;
        mesh = new TriangleMesh("aabb", 8, 12);
    }
    var a = this.min, g = this.max, b = new Vec3D(a.x, a.y, g.z), c = new Vec3D(g.x, a.y, g.z), d = new Vec3D(g.x, a.y, a.z), e = new Vec3D(a.x, g.y, a.z), f = new Vec3D(a.x, g.y, g.z), h = new Vec3D(g.x, g.y, a.z), ua = new Vec2D(0, 0), ub = new Vec2D(1, 0), uc = new Vec2D(1, 1), ud = new Vec2D(0, 1);
    // left
    mesh.addFace(a, b, f, ud, uc, ub);
    mesh.addFace(a, f, e, ud, ub, ua);
    // front
    mesh.addFace(b, c, g, ud, uc, ub);
    mesh.addFace(b, g, f, ud, ub, ua);
    // right
    mesh.addFace(c, d, h, ud, uc, ub);
    mesh.addFace(c, h, g, ud, ub, ua);
    // back
    mesh.addFace(d, a, e, ud, uc, ub);
    mesh.addFace(d, e, h, ud, ub, ua);
    // top
    mesh.addFace(e, f, h, ua, ud, ub);
    mesh.addFace(f, g, h, ud, uc, ub);
    // bottom
    mesh.addFace(a, d, b, ud, uc, ua);
    mesh.addFace(b, d, c, ua, uc, ub);
    return mesh;
};
AABB.prototype.toString = function() {
    return "<aabb> pos: " + Vec3D.prototype.toString.call(this) + " ext: " + this.extent.toString();
};
/**
* Updates the min/max corner points of the box. MUST be called after moving
* the box in space by manipulating the public x,y,z coordinates directly.
*
* @return itself
*/ AABB.prototype.updateBounds = function() {
    // this is check is necessary for the constructor
    if (this.extent !== undefined) {
        this.min = this.sub(this.extent);
        this.max = this.add(this.extent);
    }
    return this;
};
module.exports = AABB;

},{"../internals":"iIw4Q","./Vec3D":"2Czl7","./Vec2D":"hVtPc","../math/mathUtils":"bF4PI","./mesh/meshCommon":"1kzZS"}],"2Czl7":[function(require,module,exports) {
//Vec3D is defined in toxi/geom/vectors to circumvent circular dependencies
module.exports = require('./vectors').Vec3D;

},{"./vectors":"aHZPH"}],"hVtPc":[function(require,module,exports) {
//Vec2D is located in toxi/geom/vectors to circumvent circular dependencies
module.exports = require('./vectors').Vec2D;

},{"./vectors":"aHZPH"}],"1kzZS":[function(require,module,exports) {
var TriangleMesh1, WETriangleMesh, Terrain, SurfaceMeshBuilder;
var precision = 1000000;
var format = function(n) {
    return Math.floor(n * precision) / precision;
};
//private: way of generating object keys for point map in meshes
function vertexKeyGenerator(v) {
    //this will hold the ids consistently between vertex and vec3ds
    return "[ x: " + format(v.x) + ", y: " + format(v.y) + ", z: " + format(v.z) + "]";
}
//private: used for tracking edges in the internals.LinkedMap
function edgeKeyGenerator(edge) {
    return edge.a.id + '->' + edge.b.id;
}
(function() {
    var internals = require('../../internals'), mathUtils = require('../../math/mathUtils'), Matrix4x4 = require('../Matrix4x4'), Face = require('./Face'), Vec3D = require('../Vec3D'), Triangle3D = require('../Triangle3D'), TriangleIntersector = require('../TriangleIntersector'), Quaternion = require('../Quaternion'), Vertex = require('./Vertex');
    /**
		 * @class
		 * @member toxi
		 */ //java TriangleMesh constructor is (name, numVertices, numFaces)
    //numVertices, numFaces is irrelevant with js arrays
    TriangleMesh1 = function(name) {
        if (name === undefined) name = "untitled";
        this.init(name);
        return this;
    };
    TriangleMesh1.__vertexKeyGenerator = vertexKeyGenerator;
    //statics
    TriangleMesh1.DEFAULT_NUM_VERTICES = 1000;
    TriangleMesh1.DEFAULT_NUM_FACES = 3000;
    TriangleMesh1.DEFAULT_STRIDE = 4;
    TriangleMesh1.prototype = {
        /**
             * add a Face to the mesh
             * @param {Vec3D} a
             * @param {Vec3D} b
             * @param {Vec3D} c
             * @param {Vec3D} [n] the normal
             * @param {Vec2D} [uvA]
             * @param {Vec2D} [uvB]
             * @param {Vec2D} [uvC]
             * @returns itself
             */ addFace: function(a, b, c, n, uvA, uvB, uvC) {
            //can be 3 args, 4 args, 6 args, or 7 args
            //if it was 6 swap vars around,
            if (arguments.length == 6) {
                uvC = uvB;
                uvB = uvA;
                uvA = n;
                n = undefined;
            }
            //7 param method
            var va = this.__checkVertex(a);
            var vb = this.__checkVertex(b);
            var vc = this.__checkVertex(c);
            if (va.id === vb.id || va.id === vc.id || vb.id === vc.id) ;
            else {
                if (n != null) {
                    var nc = va.sub(vc).crossSelf(va.sub(vb));
                    if (n.dot(nc) < 0) {
                        var t = va;
                        va = vb;
                        vb = t;
                    }
                }
                var f = new Face(va, vb, vc, uvA, uvB, uvC);
                this.faces.push(f);
            }
            return this;
        },
        /**
             * add the contents of a TriangleMesh to this TriangleMesh
             * @param {TriangleMesh} m
             * @returns itself
             */ addMesh: function(m) {
            var l = m.getFaces().length;
            for(var i = 0; i < l; i++){
                var f = m.getFaces()[i];
                this.addFace(f.a, f.b, f.c);
            }
            return this;
        },
        center: function(origin) {
            this.computeCentroid();
            var delta = origin != null ? origin.sub(this.centroid) : this.centroid.getInverted();
            var l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var v = this.vertices[i];
                v.addSelf(delta);
            }
            return this.getBoundingBox();
        },
        __checkVertex: function(v) {
            var vertex = this.vertexMap.get(v);
            if (!vertex) {
                vertex = this._createVertex(v, this.uniqueVertexID++);
                this.vertexMap.put(vertex, vertex);
            }
            return vertex;
        },
        clear: function() {
            this.vertexMap = new internals.LinkedMap(vertexKeyGenerator);
            this.vertices = this.vertexMap.getArray();
            this.faces = [];
            this.bounds = undefined;
            return this;
        },
        computeCentroid: function() {
            this.centroid.clear();
            var l = this.vertices.length;
            for(var i = 0; i < l; i++)this.centroid.addSelf(this.vertices[i]);
            return this.centroid.scaleSelf(1 / this.vertexMap.size()).copy();
        },
        computeFaceNormals: function() {
            var l = this.faces.length;
            for(var i = 0; i < l; i++)this.faces[i].computeNormal();
        },
        computeVertexNormals: function() {
            var l = this.vertices.length, i = 0;
            for(i = 0; i < l; i++)this.vertices[i].clearNormal();
            l = this.faces.length;
            for(i = 0; i < l; i++){
                var f = this.faces[i];
                f.a.addFaceNormal(f.normal);
                f.b.addFaceNormal(f.normal);
                f.c.addFaceNormal(f.normal);
            }
            l = this.vertices.length;
            for(i = 0; i < l; i++)this.vertices[i].computeNormal();
            return this;
        },
        copy: function() {
            var m = new TriangleMesh1(this.name + "-copy", this.vertexMap.size(), this.faces.length);
            var l = this.faces.length;
            for(var i = 0; i < l; i++){
                var f = this.faces[i];
                m.addFace(f.a, f.b, f.c, f.normal, f.uvA, f.uvB, f.uvC);
            }
            return m;
        },
        _createVertex: function(vec3D, id) {
            var vertex = new Vertex(vec3D, id);
            return vertex;
        },
        faceOutwards: function() {
            this.computeCentroid();
            var l = this.faces.length;
            for(var i = 0; i < l; i++){
                var f = this.faces[i];
                var n = f.getCentroid().sub(this.centroid);
                var dot = n.dot(f.normal);
                if (dot < 0) f.flipVertexOrder();
            }
            return this;
        },
        flipVertexOrder: function() {
            var l = this.faces.length, tuv;
            for(var i = 0; i < l; i++){
                var f = this.faces[i];
                var t = f.a;
                f.a = f.b;
                f.b = t;
                if (f.uvA) {
                    tuv = f.uvA;
                    f.uvA = f.uvB;
                    f.uvB = tuv;
                }
                f.normal.invert();
            }
            return this;
        },
        flipYAxis: function() {
            this.transform(new Matrix4x4().scaleSelf(1, -1, 1));
            this.flipVertexOrder();
            return this;
        },
        getBoundingBox: function() {
            var AABB = require('../AABB');
            var self = this;
            var minBounds = Vec3D.MAX_VALUE.copy();
            var maxBounds = Vec3D.MIN_VALUE.copy();
            var l = self.vertices.length;
            for(var i = 0; i < l; i++){
                var v = self.vertices[i];
                minBounds.minSelf(v);
                maxBounds.maxSelf(v);
            }
            self.bounds = AABB.fromMinMax(minBounds, maxBounds);
            return self.bounds;
        },
        getBoundingSphere: function() {
            var Sphere = require('../Sphere');
            var radius = 0;
            this.computeCentroid();
            var l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var v = this.vertices[i];
                radius = mathUtils.max(radius, v.distanceToSquared(this.centroid));
            }
            var sph = new Sphere(this.centroid, Math.sqrt(radius));
            return sph;
        },
        getClosestVertexToPoint: function(p) {
            var closest, minDist = Number.MAX_VALUE, l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var v = this.vertices[i];
                var d = v.distanceToSquared(p);
                if (d < minDist) {
                    closest = v;
                    minDist = d;
                }
            }
            return closest;
        },
        /**
			 * Creates an array of unravelled normal coordinates. For each vertex the
			 * normal vector of its parent face is used. This method can be used to
			 * translate the internal mesh data structure into a format suitable for
			 * OpenGL Vertex Buffer Objects (by choosing stride=4). For more detail,
			 * please see {@link #getMeshAsVertexArray(float[], int, int)}
			 *
			 * @see #getMeshAsVertexArray(float[], int, int)
			 *
			 * @param normals existing float array or null to automatically create one
			 * @param offset start index in array to place normals
			 * @param stride stride/alignment setting for individual coordinates (min value = 3)
			 * @return array of xyz normal coords
			 */ getFaceNormalsAsArray: function(normals, offset, stride) {
            if (arguments.length === 0) {
                normals = undefined;
                offset = 0;
                stride = TriangleMesh1.DEFAULT_STRIDE;
            } else if (arguments.length == 1 && typeof arguments[0] == 'object') {
                var opts = arguments[0];
                normals = opts.normals;
                offset = opts.offset;
                stride = opts.stride;
            }
            stride = mathUtils.max(stride, 3);
            if (normals === undefined) normals = [];
            var i = offset;
            var l = this.faces.length;
            for(var j = 0; j < l; j++){
                var f = this.faces[j];
                normals[i] = f.normal.x;
                normals[i + 1] = f.normal.y;
                normals[i + 2] = f.normal.z;
                i += stride;
                normals[i] = f.normal.x;
                normals[i + 1] = f.normal.y;
                normals[i + 2] = f.normal.z;
                i += stride;
                normals[i] = f.normal.x;
                normals[i + 1] = f.normal.y;
                normals[i + 2] = f.normal.z;
                i += stride;
            }
            return normals;
        },
        getFaces: function() {
            return this.faces;
        },
        /**
			 * Builds an array of vertex indices of all faces. Each vertex ID
			 * corresponds to its position in the vertices Array. The
			 * resulting array will be 3 times the face count.
			 * please see {@link #getUniqueVerticesAsArray([array])}
             * and {@link #getUniqueVertexNormalsAsArray([array])}
			 *
			 * @see #getUniqueVerticesAsArray([array])
             * @see #getUniqueVertexNormalsAsArray([array])
			 *
             * @param {Array|Unit16Array} [faceList] optionally provide an array or typed-array
			 * @return array of vertex indices
			 */ getFacesAsArray: function(faceList) {
            faceList = faceList || [];
            var i = 0;
            var l = this.faces.length;
            for(var j = 0; j < l; j++){
                var f = this.faces[j];
                faceList[i++] = f.a.id;
                faceList[i++] = f.b.id;
                faceList[i++] = f.c.id;
            }
            return faceList;
        },
        getIntersectionData: function() {
            return this.intersector.getIntersectionData();
        },
        /**
			 * Creates an array of unravelled vertex coordinates for all faces. This
			 * method can be used to translate the internal mesh data structure into a
			 * format suitable for OpenGL Vertex Buffer Objects (by choosing stride=4).
			 * The order of the array will be as follows:
			 *
			 * <ul>
			 * <li>Face 1:
			 * <ul>
			 * <li>Vertex #1
			 * <ul>
			 * <li>x</li>
			 * <li>y</li>
			 * <li>z</li>
			 * <li>[optional empty indices to match stride setting]</li>
			 * </ul>
			 * </li>
			 * <li>Vertex #2
			 * <ul>
			 * <li>x</li>
			 * <li>y</li>
			 * <li>z</li>
			 * <li>[optional empty indices to match stride setting]</li>
			 * </ul>
			 * </li>
			 * <li>Vertex #3
			 * <ul>
			 * <li>x</li>
			 * <li>y</li>
			 * <li>z</li>
			 * <li>[optional empty indices to match stride setting]</li>
			 * </ul>
			 * </li>
			 * </ul>
			 * <li>Face 2:
			 * <ul>
			 * <li>Vertex #1</li>
			 * <li>...etc.</li>
			 * </ul>
			 * </ul>
			 *
			 * @param verts  an existing target array or null to automatically create one
			 * @param offset start index in arrtay to place vertices
			 * @param stride stride/alignment setting for individual coordinates
			 * @return array of xyz vertex coords
			 */ getMeshAsVertexArray: function(verts, offset, stride) {
            if (verts === undefined) verts = undefined;
            if (offset === undefined) offset = 0;
            if (stride === undefined) stride = TriangleMesh1.DEFAULT_STRIDE;
            stride = mathUtils.max(stride, 3);
            if (verts === undefined) verts = [];
            var i = 0, l = this.faces.length;
            for(var j = 0; j < l; ++j){
                var f = this.faces[j];
                verts[i] = f.a.x;
                verts[i + 1] = f.a.y;
                verts[i + 2] = f.a.z;
                i += stride;
                verts[i] = f.b.x;
                verts[i + 1] = f.b.y;
                verts[i + 2] = f.b.z;
                i += stride;
                verts[i] = f.c.x;
                verts[i + 1] = f.c.y;
                verts[i + 2] = f.c.z;
                i += stride;
            }
            return verts;
        },
        getNumFaces: function() {
            return this.faces.length;
        },
        getNumVertices: function() {
            return this.vertexMap.size();
        },
        getRotatedAroundAxis: function(axis, theta) {
            return this.copy().rotateAroundAxis(axis, theta);
        },
        getRotatedX: function(theta) {
            return this.copy().rotateX(theta);
        },
        getRotatedY: function(theta) {
            return this.copy().rotateY(theta);
        },
        getRotatedZ: function(theta) {
            return this.copy().rotateZ(theta);
        },
        getScaled: function(scale) {
            return this.copy().scale(scale);
        },
        getTranslated: function(trans) {
            return this.copy().translate(trans);
        },
        /**
             * flatten each vertex once into an array, useful for OpenGL attributes
             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse
             * @return {Array|Float32Array}
             */ getUniqueVerticesAsArray: function(array) {
            array = array || [];
            var i = 0;
            var l = this.vertices.length;
            for(var j = 0; j < l; j++){
                var v = this.vertices[j];
                array[i++] = v.x;
                array[i++] = v.y;
                array[i++] = v.z;
            }
            return array;
        },
        /**
             * flatten each vertex normal once into an array, useful for OpenGL attributes
             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse
             * @return {Array|Float32Array}
             */ getUniqueVertexNormalsAsArray: function(array) {
            array = array || [];
            var n = 0;
            for(i = 0; i < this.vertices.length; i++){
                var v = this.vertices[i];
                array[n++] = v.normal.x;
                array[n++] = v.normal.y;
                array[n++] = v.normal.z;
            }
            return array;
        },
        /**
             * get the UVs of all faces in flattened array that is, usefl for OpenGL attributes
             * any missing UV coordinates are returned as 0
             * @param {Array|Float32Array} [array] optionally pass in an array or typed-array to reuse
             * @return {Array|Float32Array}
             */ getUVsAsArray: function(array) {
            array = array || [];
            var i = 0;
            for(f = 0; f < this.faces.length; f++){
                var face = this.faces[f];
                array[i++] = face.uvA ? face.uvA.x : 0;
                array[i++] = face.uvA ? face.uvA.y : 0;
                array[i++] = face.uvB ? face.uvB.x : 0;
                array[i++] = face.uvB ? face.uvB.y : 0;
                array[i++] = face.uvC ? face.uvC.x : 0;
                array[i++] = face.uvC ? face.uvC.y : 0;
            }
            return array;
        },
        getVertexAtPoint: function(v) {
            var index;
            for(var i = 0; i < this.vertices.length; i++)if (this.vertices[i].equals(v)) index = i;
            return this.vertices[index];
        },
        //my own method to help
        getVertexIndex: function(vec) {
            var matchedVertex = -1;
            var l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var vert = this.vertices[i];
                if (vert.equals(vec)) matchedVertex = i;
            }
            return matchedVertex;
        },
        getVertexForID: function(id) {
            var vertex, l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var v = this.vertices[i];
                if (v.id == id) {
                    vertex = v;
                    break;
                }
            }
            return vertex;
        },
        /**
			 * Creates an array of unravelled vertex normal coordinates for all faces.
			 * This method can be used to translate the internal mesh data structure
			 * into a format suitable for OpenGL Vertex Buffer Objects (by choosing
			 * stride=4). For more detail, please see
			 * {@link #getMeshAsVertexArray(float[], int, int)}
			 *
			 * @see #getMeshAsVertexArray(float[], int, int)
			 *
			 * @param normals existing float array or null to automatically create one
			 * @param offset start index in array to place normals
			 * @param stride stride/alignment setting for individual coordinates (min value
			 *            = 3)
			 * @return array of xyz normal coords
			 */ getVertexNormalsAsArray: function(normals, offset, stride) {
            if (offset === undefined) offset = 0;
            if (stride === undefined) stride = TriangleMesh1.DEFAULT_STRIDE;
            stride = mathUtils.max(stride, 3);
            if (normals === undefined) normals = [];
            var i = offset;
            var l = this.faces.length;
            for(var j = 0; j < l; j++){
                var f = this.faces[j];
                normals[i] = f.a.normal.x;
                normals[i + 1] = f.a.normal.y;
                normals[i + 2] = f.a.normal.z;
                i += stride;
                normals[i] = f.b.normal.x;
                normals[i + 1] = f.b.normal.y;
                normals[i + 2] = f.b.normal.z;
                i += stride;
                normals[i] = f.c.normal.x;
                normals[i + 1] = f.c.normal.y;
                normals[i + 2] = f.c.normal.z;
                i += stride;
            }
            return normals;
        },
        getVertices: function() {
            return this.vertices;
        },
        handleSaveAsSTL: function(stl, useFlippedY) {
            /*f (useFlippedY) {
					stl.setScale(new Vec3D(1, -1, 1));
					for (Face f : faces) {
						stl.face(f.a, f.b, f.c, f.normal, STLWriter.DEFAULT_RGB);
					}
				} else {
					for (Face f : faces) {
						stl.face(f.b, f.a, f.c, f.normal, STLWriter.DEFAULT_RGB);
					}
				}
				stl.endSave();
				console.log(numFaces + " faces written");
				*/ throw new Error("TriangleMesh.handleSaveAsSTL() currently not implemented");
        },
        init: function(name) {
            this.setName(name);
            this.matrix = new Matrix4x4();
            this.centroid = new Vec3D();
            this.vertexMap = new internals.LinkedMap(vertexKeyGenerator);
            //used for checking if theres an existing Vertex
            this.vertices = this.vertexMap.getArray();
            this.faces = [];
            this.uniqueVertexID = 0;
            this.intersector = new TriangleIntersector();
        },
        intersectsRay: function(ray) {
            var tri = this.intersector.getTriangle();
            var l = this.faces.length;
            var f;
            for(var i = 0; i < l; i++){
                f = this.faces[i];
                tri.a = f.a;
                tri.b = f.b;
                tri.c = f.c;
                if (this.intersector.intersectsRay(ray)) return true;
            }
            return false;
        },
        perforateFace: function(f, size) {
            var centroid = f.getCentroid();
            var d = 1 - size;
            var a2 = f.a.interpolateTo(centroid, d);
            var b2 = f.b.interpolateTo(centroid, d);
            var c2 = f.c.interpolateTo(centroid, d);
            this.removeFace(f);
            this.addFace(f.a, b2, a2);
            this.addFace(f.a, f.b, b2);
            this.addFace(f.b, c2, b2);
            this.addFace(f.b, f.c, c2);
            this.addFace(f.c, a2, c2);
            this.addFace(f.c, f.a, a2);
            return new Triangle3D(a2, b2, c2);
        },
        /**
			 * Rotates the mesh in such a way so that its "forward" axis is aligned with
			 * the given direction. This version uses the positive Z-axis as default
			 * forward direction.
			 *
			 * @param dir, new target direction to point in
			 * @param [forward], optional vector, defaults to Vec3D.Z_AXIS
			 * @return itself
			 */ pointTowards: function(dir, forward) {
            forward = forward || Vec3D.Z_AXIS;
            return this.transform(Quaternion.getAlignmentQuat(dir, forward).toMatrix4x4(this.matrix), true);
        },
        removeFace: function(f) {
            var index = -1;
            var l = this.faces.length;
            for(var i = 0; i < l; i++)if (this.faces[i] == f) {
                index = i;
                break;
            }
            if (index > -1) this.faces.splice(index, 1);
        },
        rotateAroundAxis: function(axis, theta) {
            return this.transform(this.matrix.identity().rotateAroundAxis(axis, theta));
        },
        rotateX: function(theta) {
            return this.transform(this.matrix.identity().rotateX(theta));
        },
        rotateY: function(theta) {
            return this.transform(this.matrix.identity().rotateY(theta));
        },
        rotateZ: function(theta) {
            return this.transform(this.matrix.identity().rotateZ(theta));
        },
        saveAsOBJ: function(obj, saveNormals) {
            if (saveNormals === undefined) saveNormals = true;
            var vOffset = obj.getCurrVertexOffset() + 1, nOffset = obj.getCurrNormalOffset() + 1;
            obj.newObject(this.name);
            //vertices
            var v = 0, f = 0, vlen = this.vertices.length, flen = this.faces.length, face;
            for(v = 0; v < vlen; v++)obj.vertex(this.vertices[v]);
            //faces
            if (saveNormals) {
                //normals
                for(v = 0; v < vlen; v++)obj.normal(this.vertices[v].normal);
                for(f = 0; f < flen; f++){
                    face = this.faces[f];
                    obj.faceWithNormals(face.b.id + vOffset, face.a.id + vOffset, face.c.id + vOffset, face.b.id + nOffset, face.a.id + nOffset, face.c.id + nOffset);
                }
            } else for(f = 0; f < flen; f++){
                face = this.faces[f];
                obj.face(face.b.id + vOffset, face.a.id + vOffset, face.c.id + vOffset);
            }
        },
        saveAsSTL: function(a, b, c) {
            throw new Error("TriangleMesh.saveAsSTL() currently not implemented");
        },
        scale: function(scale) {
            return this.transform(this.matrix.identity().scaleSelf(scale));
        },
        setName: function(name) {
            this.name = name;
            return this;
        },
        toString: function() {
            return "TriangleMesh: " + this.name + " vertices: " + this.getNumVertices() + " faces: " + this.getNumFaces();
        },
        toWEMesh: function() {
            return new WETriangleMesh(this.name).addMesh(this);
        },
        /**
			* Applies the given matrix transform to all mesh vertices. If the
			* updateNormals flag is true, all face normals are updated automatically,
			* however vertex normals need a manual update.
			* @param mat
			* @param updateNormals
			* @return itself
			*/ transform: function(mat, updateNormals) {
            if (updateNormals === undefined) updateNormals = true;
            var l = this.vertices.length;
            for(var i = 0; i < l; i++){
                var v = this.vertices[i];
                v.set(mat.applyTo(v));
            }
            if (updateNormals) this.computeFaceNormals();
            return this;
        },
        translate: function(x, y, z) {
            if (arguments.length == 1) {
                y = x.y;
                z = x.z;
                x = x.x;
            }
            return this.transform(this.matrix.identity().translateSelf(x, y, z));
        },
        updateVertex: function(origVec3D, newPos) {
            var vertex = this.vertexMap.get(origVec3D);
            if (vertex !== undefined) {
                this.vertexMap.remove(vertex);
                vertex.set(newPos);
                this.vertexMap.put(newPos, vertex);
            }
            return this;
        }
    };
})();
(function(TriangleMesh) {
    //dependenecies
    var internals = require('../../internals');
    var Line3D = require('../Line3D');
    var Vec3D = require('../Vec3D');
    var WEVertex = require('./Vertex').WEVertex;
    var WEFace = require('./Face').WEFace;
    var WingedEdge = require('./WingedEdge');
    var MidpointSubdivision = require('./subdiv/MidpointSubdivision');
    //locals
    var proto;
    //constructor
    WETriangleMesh = function(name) {
        name = name || "untitled";
        TriangleMesh.call(this, name);
    };
    //passing these on to match java api
    WETriangleMesh.DEFAULT_NUM_FACES = TriangleMesh.DEFAULT_NUM_FACES;
    WETriangleMesh.DEFAULT_NUM_VERTICES = TriangleMesh.DEFAULT_NUM_VERTICES;
    internals.extend(WETriangleMesh, TriangleMesh);
    proto = WETriangleMesh.prototype;
    proto.addFace = function(a, b, c, norm, uvA, uvB, uvC) {
        if (arguments.length === 6) {
            //6-arg a,b,c,uvA,uvB,uvC pass everything up one
            uvC = uvB;
            uvB = uvA;
            uvA = norm;
            norm = undefined;
        }
        var va = this.__checkVertex(a), vb = this.__checkVertex(b), vc = this.__checkVertex(c), nc, t, f;
        if (va.id === vb.id || va.id === vc.id || vb.id === vc.id) console.log('Ignoring invalid face: ' + a + ',' + b + ',' + c);
        else {
            if (norm !== undefined && norm !== null) {
                nc = va.sub(vc).crossSelf(va.sub(vb));
                if (norm.dot(nc) < 0) {
                    t = va;
                    va = vb;
                    vb = t;
                }
            }
            f = new WEFace(va, vb, vc, uvA, uvB, uvC);
            this.faces.push(f);
            this.updateEdge(va, vb, f);
            this.updateEdge(vb, vc, f);
            this.updateEdge(vc, va, f);
        }
        return this;
    };
    proto.center = function(origin, callback) {
        TriangleMesh.prototype.center.call(this, origin, callback);
        this.rebuildIndex();
    };
    proto.clear = function() {
        TriangleMesh.prototype.clear.call(this);
        this.edgeMap = new internals.LinkedMap(edgeKeyGenerator);
        this.edges = this.edgeMap.getArray();
        return this;
    };
    proto.copy = function() {
        var m = new WETriangleMesh(this.name + "-copy");
        var i, l, f;
        l = this.faces.length;
        for(i = 0; i < l; i++){
            f = this.faces[i];
            m.addFace(f.a, f.b, f.c, f.normal, f.uvA, f.uvB, f.uvC);
        }
        return m;
    };
    proto._createVertex = function(vec3D, id) {
        var vertex = new WEVertex(vec3D, id);
        return vertex;
    };
    //TODO: numEdges currently not hooked up
    proto.getNumEdges = function() {
        return this.edgeMap.size();
    };
    proto.init = function(name) {
        TriangleMesh.prototype.init.call(this, name);
        //this.edgeMap.put(va.toString()+vb.toString(), {WingedEdge} );
        this.edgeMap = new internals.LinkedMap(edgeKeyGenerator);
        this.edges = this.edgeMap.getArray();
        this.__edgeCheck = new Line3D(new Vec3D(), new Vec3D());
        this.__uniqueEdgeID = 0;
    };
    proto.rebuildIndex = function() {
        //if vertices have moved / transformed a new vertexMap and edgeMap must be made
        //in order to have updated string keys of new positions
        //newVertexDictionary[{String}] = {Vertex}
        var newVertexMap = new internals.LinkedMap(vertexKeyGenerator);
        var newEdgeMap = new internals.LinkedMap(edgeKeyGenerator);
        var i = 0, arr = this.vertexMap.getArray();
        for(i = 0; i < arr.length; i++)newVertexMap.put(arr[i], arr[i]);
        arr = this.edgeMap.getArray();
        for(i = 0; i < arr.length; i++)newEdgeMap.put(arr[i], arr[i]);
        this.vertexMap = newVertexMap;
        this.vertices = newVertexMap.getArray();
        this.edgeMap = newEdgeMap;
        this.edges = newEdgeMap.getArray();
    };
    proto.removeEdge = function(edge) {
        edge.remove();
        var v = edge.a;
        if (v.edges.length === 0) this.vertexMap.remove(v);
        v = edge.b;
        if (v.edges.length === 0) this.vertexMap.remove(v);
        for(var i = 0; i < edge.faces.length; i++)this.removeFace(edge.faces[i]);
        var removed = this.edgeMap.remove(this.__edgeCheck.set(edge.a, edge.b));
        if (!removed) this.edgeMap.remove(this.__edgeCheck.set(edge.b, edge.a));
        if (removed !== edge) throw new Error("Can't remove edge");
    };
    proto.removeFace = function(face) {
        var i = this.faces.indexOf(face);
        if (i > -1) this.faces.splice(i, 1);
        i = 0;
        var edge;
        for(i = 0; i < face.edges.length; i++){
            edge = face.edges[i];
            edge.faces.splice(edge.faces.indexOf(face), 1);
            if (edge.faces.length === 0) this.removeEdge(edge);
        }
    };
    //FIXME (FIXME in original java source)
    //TODO UNIT TEST .splice
    proto.removeUnusedVertices = function() {
        internals.each(this.vertices, function(vertex, i) {
            var isUsed = false;
            internals.each(this.faces, function(f) {
                if (f.a == vertex || f.b == vertex || f.c == vertex) {
                    isUsed = true;
                    return;
                }
            });
            if (!isUsed) this.vertices.splice(i, 1);
        });
    };
    /**
		* @param {Vertex[] | Vertex{}} selection, array or object of Vertex's to remove
		*/ proto.removeVertices = function(selection) {
        internals.each(selection, function(vertex) {
            //WingedEdgeVertex
            internals.each(vertex.edges, function(edge) {
                internals.each(edge.faces, function(face) {
                    this.removeFace(face);
                });
            });
        });
    };
    //@param {Vec3D | WingedEdge} a or edge
    //@param {Vec3D | SubdivisionStrategy} b or strategy if edge supplied
    //@param {SubdivisionStrategy} [subDiv] or undefined
    proto.splitEdge = function(a, b, subDiv) {
        var edge, mid;
        if (arguments.length === 3) {
            edge = this.edgeMap.get(this.__edgeCheck.set(a, b));
            if (!edge) this.edgeMap.get(this.__edgeCheck.set(b, a));
        } else if (arguments.length == 2) {
            edge = a;
            subDiv = b;
        }
        mid = subDiv.computeSplitPoints(edge);
        this.splitFace(edge.faces[0], edge, mid);
        if (edge.faces.length > 1) this.splitFace(edge.faces[1], edge, mid);
        this.removeEdge(edge);
    };
    //@param {WEFace} face,
    //@param {WingedEdge} edge,
    //@param {Vec3D[]} midPoints
    proto.splitFace = function(face, edge, midPoints) {
        var p, i, ec, prev, num, mid;
        for(i = 0; i < 3; i++){
            ec = face.edges[i];
            if (!ec.equals(edge)) {
                if (ec.a.equals(edge.a) || ec.a.equals(edge.b)) p = ec.b;
                else p = ec.a;
                break;
            }
        }
        num = midPoints.length;
        for(i = 0; i < num; i++){
            mid = midPoints[i];
            if (i === 0) this.addFace(p, edge.a, mid, face.normal);
            else this.addFace(p, prev, mid, face.normal);
            if (i === num - 1) this.addFace(p, mid, edge.b, face.normal);
            prev = mid;
        }
    };
    //@param {SubdivisionStrategy | Number} subDiv or minLength
    //@param {Number} [minLength] if also supplying subDiv
    proto.subdivide = function(subDiv, minLength) {
        if (arguments.length === 1) {
            minLength = subDiv;
            subDiv = new MidpointSubdivision();
        }
        this.subdivideEdges(this.edges.slice(0), subDiv, minLength);
    };
    proto.subdivideEdges = function(origEdges, subDiv, minLength) {
        origEdges.sort(subDiv.getEdgeOrdering());
        minLength *= minLength;
        var i = 0, l = origEdges.length;
        for(i = 0; i < l; i++){
            var e = origEdges[i];
            if (this.edges.indexOf(e) > -1) {
                if (e.getLengthSquared() >= minLength) this.splitEdge(e, subDiv);
            }
        }
    };
    proto.subdivideFaceEdges = function(faces, subDiv, minLength) {
        var fedges = [], i, j, f, e, fl, el;
        fl = this.faces.length;
        for(i = 0; i < fl; i++){
            f = this.faces[i];
            el = f.edges.length;
            for(j = 0; j < el; j++){
                e = f.edges[j];
                if (fedges.indexOf(e) < 0) fedges.push(e);
            }
        }
        this.subdividEdges(fedges, subDiv, minLength);
    };
    proto.toString = function() {
        return "WETriangleMesh: " + this.name + " vertices: " + this.getNumVertices() + " faces: " + this.getNumFaces() + " edges:" + this.getNumEdges();
    };
    /**
		* Applies the given matrix transform to all mesh vertices. If the
		* updateNormals flag is true, all face normals are updated automatically,
		* however vertex normals still need a manual update.
		* @param {toxi.geom.Matrix4x4} matrix
		* @param {Boolean} [updateNormals]
		*/ proto.transform = function(matrix, updateNormals) {
        if (updateNormals === undefined || updateNormals === null) updateNormals = true;
        for(var i = 0, l = this.vertices.length; i < l; i++)matrix.applyToSelf(this.vertices[i]);
        this.rebuildIndex();
        if (updateNormals) this.computeFaceNormals();
        return this;
    };
    proto.updateEdge = function(va, vb, face) {
        //dictionary key is va.toString() + vb.toString()
        //because Line3D toString would be different than WingedEdge toString()
        this.__edgeCheck.set(va, vb);
        var e = this.edgeMap.get(this.__edgeCheck);
        if (!e) {
            //edge could be as b->a or a->b
            this.__edgeCheck.set(vb, va);
            e = this.edgeMap.get(this.__edgeCheck);
        }
        if (e !== undefined) e.addFace(face);
        else {
            e = new WingedEdge(va, vb, face, this.__uniqueEdgeID++);
            this.edgeMap.put(e, e);
            va.addEdge(e);
            vb.addEdge(e);
        }
        face.addEdge(e);
    };
})(TriangleMesh1);
(function(TriangleMesh) {
    var internals = require('../../internals'), mathUtils = require('../../math/mathUtils'), Interpolation2D = require('../../math/Interpolation2D'), Ray3D = require('../Ray3D'), TriangleIntersector = require('../TriangleIntersector'), Triangle3D = require('../Triangle3D'), IsectData3D = require('../IsectData3D'), Vec2D = require('../vectors').Vec2D, Vec3D = require('../vectors').Vec3D;
    /**
		* Constructs a new and initially flat terrain of the given size in the XZ
		* plane, centred around the world origin.
		*
		* @param {Number} width
		* @param {Number} depth
		* @param {toxi.geom.Vec2D | Number} scale
		*/ Terrain = function(width, depth, scale) {
        this.width = width;
        this._depth = depth;
        if (!internals.has.XY(scale)) scale = new Vec2D(scale, scale);
        this.setScale(scale);
        this.elevation = [];
        var i = 0, len = width * depth;
        for(i = 0; i < len; i++)this.elevation[i] = 0;
        this.__elevationLength = this.width * this._depth;
        this.vertices = [];
        var offset = new Vec3D(parseInt(this.width / 2, 10), 0, parseInt(this._depth / 2, 10)), scaleXZ = this.getScale().to3DXZ();
        i = 0;
        for(var z = 0; z < this._depth; z++)for(var x = 0; x < this.width; x++)this.vertices[i++] = new Vec3D(x, 0, z).subSelf(offset).scaleSelf(scaleXZ);
    };
    Terrain.prototype = {
        /**
			* @return number of grid cells along the Z axis.
			*/ getDepth: function() {
            return this._depth;
        },
        getElevation: function() {
            return this.elevation;
        },
        /**
			* @param {Number} x
			* @param {Number} z
			* @return the elevation at grid point
			*/ getHeightAtCell: function(x, z) {
            //console.log("["+x+","+z+"]");
            return this.elevation[this._getIndex(x, z)];
        },
        /**
			* Computes the elevation of the terrain at the given 2D world coordinate
			* (based on current terrain scale).
			*
			* @param {Number} x scaled world coord x
			* @param {Number} z scaled world coord z
			* @return {Number} interpolated elevation
			*/ getHeightAtPoint: function(x, z) {
            var xx = x / this._scale.x + this.width * 0.5, zz = z / this._scale.y + this._depth * 0.5, y = 0, flxx = ~~x, flzz = ~~zz;
            if (xx >= 0 & xx < this.width && zz >= 0 && zz < this._depth) {
                var x2 = ~~Math.min(xx + 1, this.width - 1), z2 = ~~Math.min(zz + 1, this._depth - 1);
                var a = this.getHeightAtCell(flxx, flzz), b = this.getHeightAtCell(x2, flzz), c = this.getHeightAtCell(flxx, z2), d = this.getHeightAtCell(x2, z2);
                y = Interpolation2D.bilinear(xx, zz, flxx, flzz, x2, z2, a, b, c, d);
            }
            return y;
        },
        /**
			* Computes the array index for the given cell coords & checks if they're in
			* bounds. If not an {@link IndexOutOfBoundsException} is thrown.
			* @param {Number} x
			* @param {Number} z
			* @return {Number} array index
			*/ _getIndex: function(x, z) {
            var idx = z * this.width + x;
            if (idx < 0 || idx > this.__elevationLength) throw new Error("the given terrain cell is invalid: " + x + ";" + z);
            return idx;
        },
        /**
			 * @return {Vec2D} the scale
			 */ getScale: function() {
            return this._scale;
        },
        getVertexAtCell: function(x, z) {
            return this.vertices[this._getIndex(x, z)];
        },
        /**
			 * @return {Number} number of grid cells along X axis
			 */ getWidth: function() {
            return this.width;
        },
        /**
			* Computes the 3D position (with elevation) and normal vector at the given
			* 2D location in the terrain. The position is in scaled world coordinates
			* based on the given terrain scale. The returned data is encapsulated in a
			* {@link toxi.geom.IsectData3D} instance.
			* @param {Number} x
			* @param {Number} z
			* @return {IsectData3D} intersection data parcel
			*/ intersectAtPoint: function(x, z) {
            var xx = x / this._scale.x + this.width * 0.5, zz = z / this._scale.y + this._depth * 0.5, isec = new IsectData3D();
            if (xx >= 0 && xx < this.width && zz >= 0 && zz < this._depth) {
                var x2 = ~~Math.min(xx + 1, this.width - 1), z2 = ~~Math.min(zz + 1, this._depth - 1), flxx = ~~xx, flzz = ~~zz, a = this.getVertexAtCell(flxx, flzz), b = this.getVertexAtCell(x2, flzz), c = this.getVertexAtCell(x2, z2), d = this.getVertexAtCell(flxx, z2), r = new Ray3D(new Vec3D(x, 10000, z), new Vec3D(0, -1, 0)), i = new TriangleIntersector(new Triangle3D(a, b, d));
                if (i.intersectsRay(r)) isec = i.getIntersectionData();
                else {
                    i.setTriangle(new Triangle3D(b, c, d));
                    i.intersectsRay(r);
                    isec = i.getIntersectionData();
                }
            }
            return isec;
        },
        /**
			* Sets the elevation of all cells to those of the given array values.
			* @param {Array} elevation array of height values
			* @return itself
			*/ setElevation: function(elevation) {
            if (this.__elevationLength == elevation.length) for(var i = 0, len = elevation.length; i < len; i++)this.vertices[i].y = this.elevation[i] = elevation[i];
            else throw new Error("the given elevation array size does not match terrain");
            return this;
        },
        /**
			* Sets the elevation for a single given grid cell.
			* @param {Number} x
			* @param {Number} z
			* @param {Number} h new elevation value
			* @return itself
			*/ setHeightAtCell: function(x, z, h) {
            var index = this._getIndex(x, z);
            this.elevation[index] = h;
            this.vertices[index].y = h;
            return this;
        },
        setScale: function(scale) {
            if (!internals.has.XY(scale)) scale = new Vec2D(scale, scale);
            this._scale = scale;
        },
        toMesh: function() {
            var opts = {
                mesh: undefined,
                minX: 0,
                minZ: 0,
                maxX: this.width,
                maxZ: this._depth
            };
            var v = this.vertices, w = this.width, d = this._depth;
            if (arguments.length == 1 && typeof arguments[0] == 'object') {
                //options object
                var args = arguments[0];
                opts.mesh = args.mesh || new TriangleMesh("terrain");
                opts.minX = args.minX || opts.minX;
                opts.minZ = args.minZ || opts.minZ;
                opts.maxX = args.maxX || opts.maxX;
                opts.maxZ = args.maxZ || opts.maxZ;
            } else if (arguments.length >= 5) {
                opts.mesh = arguments[0];
                opts.minX = arguments[1];
                opts.minZ = arguments[2];
                opts.maxX = arguments[3];
                opts.maxZ = arguments[4];
            }
            opts.mesh = opts.mesh || new TriangleMesh("terrain");
            opts.minX = mathUtils.clip(opts.minX, 0, w - 1);
            opts.maxX = mathUtils.clip(opts.maxX, 0, w);
            opts.minZ = mathUtils.clip(opts.minZ, 0, d - 1);
            opts.maxZ = mathUtils.clip(opts.maxZ, 0, d);
            opts.minX++;
            opts.minZ++;
            for(var z = opts.minZ, idx = opts.minX * w; z < opts.maxZ; z++, idx += w)for(var x = opts.minX; x < opts.maxX; x++){
                opts.mesh.addFace(v[idx - w + x - 1], v[idx - w + x], v[idx + x - 1]);
                opts.mesh.addFace(v[idx - w + x], v[idx + x], v[idx + x - 1]);
            }
            return opts.mesh;
        }
    };
})(TriangleMesh1);
(function(TriangleMesh) {
    var Vec3D = require('../Vec3D'), Vec2D = require('../Vec2D');
    /**
		 * @class An extensible builder class for {@link TriangleMesh}es based on 3D surface
		 * functions using spherical coordinates. In order to create mesh, you'll need
		 * to supply a {@link SurfaceFunction} implementation to the builder.
		 * @member toxi
		 */ SurfaceMeshBuilder = function(func) {
        this.func = func;
    };
    SurfaceMeshBuilder.prototype = {
        /*
				create a mesh from a surface,
				parameter options:
					1 - Object options
					1 - Number resolution
					3 - TriangleMesh mesh, Number resolution, Number size
					4 - TriangleMesh mesh, Number resolution, Number size, boolean isClosed
			*/ createMesh: function() {
            var opts = {
                mesh: undefined,
                resolution: 0,
                size: 1,
                isClosed: true
            };
            if (arguments.length == 1) {
                if (typeof arguments[0] == 'object') {
                    var arg = arguments[0];
                    //if a mesh was provided as an option, use it, otherwise make one
                    opts.mesh = arg.mesh;
                    opts.resolution = arg.res || arg.resoultion || 0;
                    if (arg.size !== undefined) opts.size = arg.size;
                    if (arg.isClosed !== undefined) opts.isClosed = arg.isClosed;
                } else opts.resolution = arguments[0];
            } else if (arguments.length > 2) {
                opts.mesh = arguments[0];
                opts.resolution = arguments[1];
                opts.size = arguments[2];
                if (arguments.length == 4) opts.isClosed = arguments[3];
            }
            var mesh = opts.mesh;
            if (mesh === undefined || mesh === null) mesh = new TriangleMesh();
            var a = new Vec3D(), b = new Vec3D(), pa = new Vec3D(), pb = new Vec3D(), a0 = new Vec3D(), b0 = new Vec3D(), phiRes = this.func.getPhiResolutionLimit(opts.resolution), phiRange = this.func.getPhiRange(), thetaRes = this.func.getThetaResolutionLimit(opts.resolution), thetaRange = this.func.getThetaRange(), pres = 1 / phiRes, tres = 1 / thetaRes, ires = 1 / opts.resolution, pauv = new Vec2D(), pbuv = new Vec2D(), auv = new Vec2D(), buv = new Vec2D();
            for(var p = 0; p < phiRes; p++){
                var phi = p * phiRange * ires;
                var phiNext = (p + 1) * phiRange * ires;
                for(var t = 0; t <= thetaRes; t++){
                    var theta = t * thetaRange * ires;
                    var func = this.func;
                    a = func.computeVertexFor(a, phiNext, theta).scaleSelf(opts.size);
                    auv.set(t * tres, 1 - (p + 1) * pres);
                    b = func.computeVertexFor(b, phi, theta).scaleSelf(opts.size);
                    buv.set(t * tres, 1 - p * pres);
                    if (b.equalsWithTolerance(a, 0.0001)) b.set(a);
                    if (t > 0) {
                        if (t == thetaRes && opts.isClosed) {
                            a.set(a0);
                            b.set(b0);
                        }
                        mesh.addFace(pa, pb, a, pauv.copy(), pbuv.copy(), auv.copy());
                        mesh.addFace(pb, b, a, pbuv.copy(), buv.copy(), auv.copy());
                    } else {
                        a0.set(a);
                        b0.set(b);
                    }
                    pa.set(a);
                    pb.set(b);
                    pauv.set(auv);
                    pbuv.set(buv);
                }
            }
            return mesh;
        },
        /**
			@return the function
			*/ getFunction: function() {
            return this.func;
        },
        setFunction: function(func) {
            this.func = func;
        }
    };
})(TriangleMesh1);
exports.TriangleMesh = TriangleMesh1;
exports.WETriangleMesh = WETriangleMesh;
exports.Terrain = Terrain;
exports.SurfaceMeshBuilder = SurfaceMeshBuilder;

},{"../../internals":"iIw4Q","../../math/mathUtils":"bF4PI","../Matrix4x4":"c1T7H","./Face":"7Jhmh","../Vec3D":"2Czl7","../Triangle3D":"lw0Ec","../TriangleIntersector":"eWfuW","../Quaternion":"adHTo","./Vertex":"fUOZY","../AABB":"6ZidC","../Sphere":"bxMAT","../Line3D":"b5COq","./WingedEdge":"c8tGU","./subdiv/MidpointSubdivision":"cujiL","../../math/Interpolation2D":"9ejMm","../Ray3D":"6rIwI","../IsectData3D":"2LfTk","../vectors":"aHZPH","../Vec2D":"hVtPc"}],"c1T7H":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils'), internals = require('../internals'), Vec3D = require('./Vec3D');
/**
 * @description Implements a simple row-major 4x4 matrix class, all matrix operations are
 * applied to new instances. Use {@link #transpose()} to convert from
 * column-major formats...
 * @exports Matrix4x4 as toxi.Matrix4x4
 * @constructor
 */ var Matrix4x4 = function(v11, v12, v13, v14, v21, v22, v23, v24, v31, v32, v33, v34, v41, v42, v43, v44) {
    this.temp = [];
    this.matrix = [];
    var self = this;
    if (arguments.length === 0) {
        this.matrix[0] = [
            1,
            0,
            0,
            0
        ];
        this.matrix[1] = [
            0,
            1,
            0,
            0
        ];
        this.matrix[2] = [
            0,
            0,
            1,
            0
        ];
        this.matrix[3] = [
            0,
            0,
            0,
            1
        ];
    } else if (typeof v11 == 'number') {
        var m1 = [
            v11,
            v12,
            v13,
            v14
        ];
        var m2 = [
            v21,
            v22,
            v23,
            v24
        ];
        var m3 = [
            v31,
            v32,
            v33,
            v34
        ];
        var m4 = [
            v41,
            v42,
            v43,
            v44
        ];
        this.matrix = [
            m1,
            m2,
            m3,
            m4
        ];
    } else if (internals.is.Array(v11)) {
        var array = v11;
        if (array.length != 9 && array.length != 16) throw new Error("Matrix4x4: Array length must == 9 or 16");
        if (array.length == 16) {
            this.matrix = [];
            this.matrix[0] = array.slice(0, 4);
            this.matrix[1] = array.slice(4, 8);
            this.matrix[2] = array.slice(8, 12);
            this.matrix[3] = array.slice(12);
        } else {
            this.matrix[0] = array.slice(0, 3);
            this.matrix[0][3] = NaN;
            this.matrix[1] = array.slice(3, 6);
            this.matrix[1][3] = NaN;
            this.matrix[2] = array.slice(6, 9);
            this.matrix[2][3] = NaN;
            this.matrix[3] = [
                NaN,
                NaN,
                NaN,
                NaN
            ];
        }
    } else if (internals.is.Matrix4x4(v11)) {
        //else it should've been a Matrix4x4 that was passed in
        var m = v11, i = 0, j = 0, lenM, lenMM;
        if (m.matrix.length == 16) for(i = 0; i < 4; i++)this.matrix[i] = [
            m.matrix[i][0],
            m.matrix[i][1],
            m.matrix[i][2],
            m.matrix[i][3]
        ];
        else if (m.matrix.length == 4) {
            lenM = m.matrix.length;
            for(i = 0; i < lenM; i++){
                lenMM = m.matrix[i].length;
                self.matrix[i] = [];
                for(j = 0; j < lenMM; j++)self.matrix[i][j] = m.matrix[i][j];
            }
        }
    } else console.error("Matrix4x4: incorrect parameters used to construct new instance");
};
Matrix4x4.prototype = {
    add: function(rhs) {
        var result = new Matrix4x4(this);
        return result.addSelf(rhs);
    },
    addSelf: function(m) {
        for(var i = 0; i < 4; i++){
            var mi = this.matrix[i];
            var rhsm = m.matrix[i];
            mi[0] += rhsm[0];
            mi[1] += rhsm[1];
            mi[2] += rhsm[2];
            mi[3] += rhsm[3];
        }
        return this;
    },
    /**
     * Creates a copy of the given vector, transformed by this matrix.
     *
     * @param v
     * @return transformed vector
     */ applyTo: function(v) {
        return this.applyToSelf(new Vec3D(v));
    },
    applyToSelf: function(v) {
        for(var i = 0; i < 4; i++){
            var m = this.matrix[i];
            this.temp[i] = v.x * m[0] + v.y * m[1] + v.z * m[2] + m[3];
        }
        v.set(this.temp[0], this.temp[1], this.temp[2]).scaleSelf(1 / this.temp[3]);
        return v;
    },
    copy: function() {
        return new Matrix4x4(this);
    },
    getInverted: function() {
        return new Matrix4x4(this).invert();
    },
    getRotatedAroundAxis: function(axis, theta) {
        return new Matrix4x4(this).rotateAroundAxis(axis, theta);
    },
    getRotatedX: function(theta) {
        return new Matrix4x4(this).rotateX(theta);
    },
    getRotatedY: function(theta) {
        return new Matrix4x4(this).rotateY(theta);
    },
    getRotatedZ: function(theta) {
        return new Matrix4x4(this).rotateZ(theta);
    },
    getTransposed: function() {
        return new Matrix4x4(this).transpose();
    },
    identity: function() {
        var m = this.matrix[0];
        m[1] = m[2] = m[3] = 0;
        m = this.matrix[1];
        m[0] = m[2] = m[3] = 0;
        m = this.matrix[2];
        m[0] = m[1] = m[3] = 0;
        m = this.matrix[3];
        m[0] = m[1] = m[2] = 0;
        this.matrix[0][0] = 1;
        this.matrix[1][1] = 1;
        this.matrix[2][2] = 1;
        this.matrix[3][3] = 1;
        return this;
    },
    /**
     * Matrix Inversion using Cramer's Method Computes Adjoint matrix divided by
     * determinant Code modified from
     * http://www.intel.com/design/pentiumiii/sml/24504301.pdf
     *
     * @return itself
     */ invert: function() {
        var tmp = [], src = [], dst = [], mat = this.toArray(), i = 0;
        for(i = 0; i < 4; i++){
            var i4 = i << 2;
            src[i] = mat[i4];
            src[i + 4] = mat[i4 + 1];
            src[i + 8] = mat[i4 + 2];
            src[i + 12] = mat[i4 + 3];
        }
        // calculate pairs for first 8 elements (cofactors)
        tmp[0] = src[10] * src[15];
        tmp[1] = src[11] * src[14];
        tmp[2] = src[9] * src[15];
        tmp[3] = src[11] * src[13];
        tmp[4] = src[9] * src[14];
        tmp[5] = src[10] * src[13];
        tmp[6] = src[8] * src[15];
        tmp[7] = src[11] * src[12];
        tmp[8] = src[8] * src[14];
        tmp[9] = src[10] * src[12];
        tmp[10] = src[8] * src[13];
        tmp[11] = src[9] * src[12];
        // calculate first 8 elements (cofactors)
        var src0 = src[0], src1 = src[1], src2 = src[2], src3 = src[3], src4 = src[4], src5 = src[5], src6 = src[6], src7 = src[7];
        dst[0] = tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;
        dst[0] -= tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;
        dst[1] = tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;
        dst[1] -= tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;
        dst[2] = tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;
        dst[2] -= tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;
        dst[3] = tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;
        dst[3] -= tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;
        dst[4] = tmp[1] * src1 + tmp[2] * src2 + tmp[5] * src3;
        dst[4] -= tmp[0] * src1 + tmp[3] * src2 + tmp[4] * src3;
        dst[5] = tmp[0] * src0 + tmp[7] * src2 + tmp[8] * src3;
        dst[5] -= tmp[1] * src0 + tmp[6] * src2 + tmp[9] * src3;
        dst[6] = tmp[3] * src0 + tmp[6] * src1 + tmp[11] * src3;
        dst[6] -= tmp[2] * src0 + tmp[7] * src1 + tmp[10] * src3;
        dst[7] = tmp[4] * src0 + tmp[9] * src1 + tmp[10] * src2;
        dst[7] -= tmp[5] * src0 + tmp[8] * src1 + tmp[11] * src2;
        // calculate pairs for second 8 elements (cofactors)
        tmp[0] = src2 * src7;
        tmp[1] = src3 * src6;
        tmp[2] = src1 * src7;
        tmp[3] = src3 * src5;
        tmp[4] = src1 * src6;
        tmp[5] = src2 * src5;
        tmp[6] = src0 * src7;
        tmp[7] = src3 * src4;
        tmp[8] = src0 * src6;
        tmp[9] = src2 * src4;
        tmp[10] = src0 * src5;
        tmp[11] = src1 * src4;
        // calculate second 8 elements (cofactors)
        src0 = src[8];
        src1 = src[9];
        src2 = src[10];
        src3 = src[11];
        src4 = src[12];
        src5 = src[13];
        src6 = src[14];
        src7 = src[15];
        dst[8] = tmp[0] * src5 + tmp[3] * src6 + tmp[4] * src7;
        dst[8] -= tmp[1] * src5 + tmp[2] * src6 + tmp[5] * src7;
        dst[9] = tmp[1] * src4 + tmp[6] * src6 + tmp[9] * src7;
        dst[9] -= tmp[0] * src4 + tmp[7] * src6 + tmp[8] * src7;
        dst[10] = tmp[2] * src4 + tmp[7] * src5 + tmp[10] * src7;
        dst[10] -= tmp[3] * src4 + tmp[6] * src5 + tmp[11] * src7;
        dst[11] = tmp[5] * src4 + tmp[8] * src5 + tmp[11] * src6;
        dst[11] -= tmp[4] * src4 + tmp[9] * src5 + tmp[10] * src6;
        dst[12] = tmp[2] * src2 + tmp[5] * src3 + tmp[1] * src1;
        dst[12] -= tmp[4] * src3 + tmp[0] * src1 + tmp[3] * src2;
        dst[13] = tmp[8] * src3 + tmp[0] * src0 + tmp[7] * src2;
        dst[13] -= tmp[6] * src2 + tmp[9] * src3 + tmp[1] * src0;
        dst[14] = tmp[6] * src1 + tmp[11] * src3 + tmp[3] * src0;
        dst[14] -= tmp[10] * src3 + tmp[2] * src0 + tmp[7] * src1;
        dst[15] = tmp[10] * src2 + tmp[4] * src0 + tmp[9] * src1;
        dst[15] -= tmp[8] * src1 + tmp[11] * src2 + tmp[5] * src0;
        var det = 1 / (src[0] * dst[0] + src[1] * dst[1] + src[2] * dst[2] + src[3] * dst[3]);
        for(i = 0, k = 0; i < 4; i++){
            var m = this.matrix[i];
            for(var j = 0; j < 4; j++)m[j] = dst[k++] * det;
        }
        return this;
    },
    multiply: function(a) {
        if (typeof a == "number") return new Matrix4x4(this).multiply(a);
        //otherwise it should be a Matrix4x4
        return new Matrix4x4(this).multiplySelf(a);
    },
    multiplySelf: function(a) {
        var i = 0, m;
        if (typeof a == "number") {
            for(i = 0; i < 4; i++){
                m = this.matrix[i];
                m[0] *= a;
                m[1] *= a;
                m[2] *= a;
                m[3] *= a;
            }
            return this;
        }
        //otherwise it should be a matrix4x4
        var mm0 = a.matrix[0], mm1 = a.matrix[1], mm2 = a.matrix[2], mm3 = a.matrix[3];
        for(i = 0; i < 4; i++){
            m = this.matrix[i];
            for(var j = 0; j < 4; j++)this.temp[j] = m[0] * mm0[j] + m[1] * mm1[j] + m[2] * mm2[j] + m[3] * mm3[j];
            m[0] = this.temp[0];
            m[1] = this.temp[1];
            m[2] = this.temp[2];
            m[3] = this.temp[3];
        }
        return this;
    },
    /**
     * Applies rotation about arbitrary axis to matrix
     *
     * @param axis
     * @param theta
     * @return rotation applied to this matrix
     */ rotateAroundAxis: function(axis, theta) {
        var x, y, z, s, c, t, tx, ty;
        x = axis.x;
        y = axis.y;
        z = axis.z;
        s = Math.sin(theta);
        c = Math.cos(theta);
        t = 1 - c;
        tx = t * x;
        ty = t * y;
        _TEMP.set(tx * x + c, tx * y + s * z, tx * z - s * y, 0, tx * y - s * z, ty * y + c, ty * z + s * x, 0, tx * z + s * y, ty * z - s * x, t * z * z + c, 0, 0, 0, 0, 1);
        return this.multiplySelf(_TEMP);
    },
    /**
     * Applies rotation about X to this matrix.
     *
     * @param theta
     *            rotation angle in radians
     * @return itself
     */ rotateX: function(theta) {
        _TEMP.identity();
        _TEMP.matrix[1][1] = _TEMP.matrix[2][2] = Math.cos(theta);
        _TEMP.matrix[2][1] = Math.sin(theta);
        _TEMP.matrix[1][2] = -_TEMP.matrix[2][1];
        return this.multiplySelf(_TEMP);
    },
    /**
     * Applies rotation about Y to this matrix.
     *
     * @param theta
     *            rotation angle in radians
     * @return itself
     */ rotateY: function(theta) {
        _TEMP.identity();
        _TEMP.matrix[0][0] = _TEMP.matrix[2][2] = Math.cos(theta);
        _TEMP.matrix[0][2] = Math.sin(theta);
        _TEMP.matrix[2][0] = -_TEMP.matrix[0][2];
        return this.multiplySelf(_TEMP);
    },
    // Apply Rotation about Z to Matrix
    rotateZ: function(theta) {
        _TEMP.identity();
        _TEMP.matrix[0][0] = _TEMP.matrix[1][1] = Math.cos(theta);
        _TEMP.matrix[1][0] = Math.sin(theta);
        _TEMP.matrix[0][1] = -_TEMP.matrix[1][0];
        return this.multiplySelf(_TEMP);
    },
    scale: function(a, b, c) {
        return new Matrix4x4(this).scaleSelf(a, b, c);
    },
    scaleSelf: function(a, b, c) {
        if (internals.has.XYZ(a)) {
            b = a.y;
            c = a.z;
            a = a.x;
        } else if (b === undefined || c === undefined) {
            b = a;
            c = a;
        }
        _TEMP.identity();
        _TEMP.matrix[0][0] = a;
        _TEMP.matrix[1][1] = b;
        _TEMP.matrix[2][2] = c;
        return this.multiplySelf(_TEMP);
    },
    set: function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        var mat;
        if (typeof a == "number") {
            mat = this.matrix[0];
            mat[0] = a;
            mat[1] = b;
            mat[2] = c;
            mat[3] = d;
            mat = this.matrix[1];
            mat[0] = e;
            mat[1] = f;
            mat[2] = g;
            mat[3] = h;
            mat = this.matrix[2];
            mat[0] = i;
            mat[1] = j;
            mat[2] = k;
            mat[3] = l;
            mat = this.matrix[3];
            mat[0] = m;
            mat[1] = n;
            mat[2] = o;
            mat[3] = p;
        } else //it must be a matrix4x4
        for(var it_n = 0; it_n < 4; it_n++){
            mat = this.matrix[it_n];
            var mat_n = mat.matrix[it_n];
            mat[0] = mat_n[0];
            mat[1] = mat_n[1];
            mat[2] = mat_n[2];
            mat[3] = mat_n[3];
        }
        return this;
    },
    setFrustrum: function(left, right, top, bottom, near, far) {
        var rl = right - left, tb = top - bottom, fn = far - near;
        return this.set(2 * near / rl, 0, (left + right) / rl, 0, 0, 2 * near / tb, (top + bottom) / tb, 0, 0, 0, -(near + far) / fn, -2 * near * far / fn, 0, 0, -1, 0);
    },
    setOrtho: function(left, right, top, bottom, near, far) {
        var mat = [
            2 / (right - left),
            0,
            0,
            (left + right) / (right - left),
            0,
            2 / (top - bottom),
            0,
            (top + bottom) / (top - bottom),
            0,
            0,
            -2 / (far - near),
            (far + near) / (far - near),
            0,
            0,
            0,
            1
        ];
        return this.set.apply(this, mat);
    },
    setPerspective: function(fov, aspect, near, far) {
        var y = near * Math.tan(0.5 * mathUtils.radians(fov)), x = aspect * y;
        return this.setFrustrum(-x, x, y, -y, near, far);
    },
    setPosition: function(x, y, z) {
        this.matrix[0][3] = x;
        this.matrix[1][3] = y;
        this.matrix[2][3] = z;
        return this;
    },
    setScale: function(sX, sY, sZ) {
        this.matrix[0][0] = sX;
        this.matrix[1][1] = sY;
        this.matrix[2][2] = sZ;
        return this;
    },
    sub: function(m) {
        return new Matrix4x4(this).subSelf(m);
    },
    subSelf: function(mat) {
        for(var i = 0; i < 4; i++){
            var m = this.matrix[i];
            var n = mat.matrix[i];
            m[0] -= n[0];
            m[1] -= n[1];
            m[2] -= n[2];
            m[3] -= n[3];
        }
        return this;
    },
    /**
     * Copies all matrix elements into an linear array.
     *
     * @param result
     *            array (or null to create a new one)
     * @return matrix as 16 element array
     */ toArray: function(result) {
        if (result === undefined) result = [];
        for(var i = 0, k = 0; i < 4; i++){
            var m = this.matrix[i];
            for(var j = 0; j < 4; j++)result[k++] = m[j];
        }
        return result;
    },
    toFloatArray: function(result) {
        return new Float32Array(this.toArray(result));
    },
    /*
     * (non-Javadoc)
     *
     * @see java.lang.Object#toString()
     */ toString: function() {
        return "| " + this.matrix[0][0] + " " + this.matrix[0][1] + " " + this.matrix[0][2] + " " + this.matrix[0][3] + " |\n" + "| " + this.matrix[1][0] + " " + this.matrix[1][1] + " " + this.matrix[1][2] + " " + this.matrix[1][3] + " |\n" + "| " + this.matrix[2][0] + " " + this.matrix[2][1] + " " + this.matrix[2][2] + " " + this.matrix[2][3] + " |\n" + "| " + this.matrix[3][0] + " " + this.matrix[3][1] + " " + this.matrix[3][2] + " " + this.matrix[3][3] + " |";
    },
    toTransposedFloatArray: function(result) {
        if (result === undefined) result = [];
        for(var i = 0, k = 0; i < 4; i++)for(var j = 0; j < 4; j++)result[k++] = this.matrix[j][i];
        return result;
    },
    translate: function(dx, dy, dz) {
        return new Matrix4x4(this).translateSelf(dx, dy, dz);
    },
    translateSelf: function(dx, dy, dz) {
        if (internals.has.XYZ(dx)) {
            dy = dx.y;
            dz = dx.z;
            dx = dx.x;
        }
        _TEMP.identity();
        _TEMP.setPosition(dx, dy, dz);
        return this.multiplySelf(_TEMP);
    },
    /**
     * Converts the matrix (in-place) between column-major to row-major order
     * (and vice versa).
     *
     * @return itself
     */ transpose: function() {
        return this.set(this.matrix[0][0], this.matrix[1][0], this.matrix[2][0], this.matrix[3][0], this.matrix[0][1], this.matrix[1][1], this.matrix[2][1], this.matrix[3][1], this.matrix[0][2], this.matrix[1][2], this.matrix[2][2], this.matrix[3][2], this.matrix[0][3], this.matrix[1][3], this.matrix[2][3], this.matrix[3][3]);
    }
};
//private temp matrix
var _TEMP = new Matrix4x4();
module.exports = Matrix4x4;

},{"../math/mathUtils":"bF4PI","../internals":"iIw4Q","./Vec3D":"2Czl7"}],"7Jhmh":[function(require,module,exports) {
//these 2 modules get defined
var Face, WEFace;
(function() {
    var Triangle3D = require('../Triangle3D');
    Face = function(a, b, c, uvA, uvB, uvC) {
        this.a = a;
        this.b = b;
        this.c = c;
        var aminusc = this.a.sub(this.c);
        var aminusb = this.a.sub(this.b);
        var cross = aminusc.crossSelf(aminusb);
        this.normal = cross.normalize();
        this.a.addFaceNormal(this.normal);
        this.b.addFaceNormal(this.normal);
        this.c.addFaceNormal(this.normal);
        if (uvA !== undefined) {
            this.uvA = uvA;
            this.uvB = uvB;
            this.uvC = uvC;
        }
    };
    Face.prototype = {
        computeNormal: function() {
            this.normal = this.a.sub(this.c).crossSelf(this.a.sub(this.b)).normalize();
        },
        flipVertexOrder: function() {
            var t = this.a;
            this.a = this.b;
            this.b = t;
            this.normal.invert();
        },
        getCentroid: function() {
            return this.a.add(this.b).addSelf(this.c).scale(1 / 3);
        },
        getClass: function() {
            return "Face";
        },
        getVertices: function(verts) {
            if (verts !== undefined) {
                verts[0] = this.a;
                verts[1] = this.b;
                verts[2] = this.c;
            } else verts = [
                this.a,
                this.b,
                this.c
            ];
            return verts;
        },
        toString: function() {
            return this.getClass() + " " + this.a + ", " + this.b + ", " + this.c;
        },
        /**
			 * Creates a generic {@link Triangle3D} instance using this face's vertices.
			 * The new instance is made up of copies of the original vertices and
			 * manipulating them will not impact the originals.
			 *
			 * @return triangle copy of this mesh face
			 */ toTriangle: function() {
            return new Triangle3D(this.a.copy(), this.b.copy(), this.c.copy());
        }
    };
})();
(function() {
    var internals = require('../../internals');
    var proto;
    //@param {WEVertex} a
    //@param {WEVertex} b
    //@param {WEVertex} c
    //@param {Vec2D} [uvA]
    //@param {Vec2D} [uvB]
    //@param {Vec2D} [uvC]
    WEFace = function(a, b, c, uvA, uvB, uvC) {
        Face.call(this, a, b, c, uvA, uvB, uvC);
        this.edges = [];
    };
    internals.extend(WEFace, Face);
    proto = WEFace.prototype;
    //@param {WingedEdge} edge
    proto.addEdge = function(edge) {
        this.edges.push(edge);
    };
    proto.getEdges = function() {
        return this.edges;
    };
    //@param {WEVertex[]} [verts]
    proto.getVertices = function(verts) {
        if (verts !== undefined) {
            verts[0] = this.a;
            verts[1] = this.b;
            verts[2] = this.c;
        } else verts = [
            this.a,
            this.b,
            this.c
        ];
        return verts;
    };
})();
Face.WEFace = WEFace;
module.exports = Face;

},{"../Triangle3D":"lw0Ec","../../internals":"iIw4Q"}],"lw0Ec":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils'), Vec3D = require('./Vec3D'), Line3D = require('./Line3D'), AABB = require('./AABB');
/**
 * @class
 * @member toxi
 * @param {toxi.Vec3D} a
 * @param {toxi.Vec3D} b
 * @param {toxi.Vec3D} c
 */ var Triangle3D = function(a, b, c) {
    this.a = a;
    this.b = b;
    this.c = c;
};
Triangle3D.createEquilateralFrom = function(a, b) {
    var c = a.interpolateTo(b, 0.5);
    var dir = b.sub(a);
    var n = a.cross(dir.normalize());
    c.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));
    return new Triangle3D(a, b, c);
};
Triangle3D.isClockwiseInXY = function(a, b, c) {
    var determ = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);
    return determ < 0;
};
Triangle3D.isClockwiseInXZ = function(a, b, c) {
    var determ = (b.x - a.x) * (c.z - a.z) - (c.x - a.x) * (b.z - a.z);
    return determ < 0;
};
Triangle3D.isClockwiseInYZ = function(a, b, c) {
    var determ = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);
    return determ < 0;
};
Triangle3D.prototype = {
    closestPointOnSurface: function(p) {
        var ab = this.b.sub(this.a);
        var ac = this.c.sub(this.a);
        var bc = this.c.sub(this.b);
        var pa = p.sub(this.a);
        var pb = p.sub(this.b);
        var pc = p.sub(this.c);
        var ap = a.sub(this.p);
        var bp = b.sub(this.p);
        var cp = c.sub(this.p);
        // Compute parametric position s for projection P' of P on AB,
        // P' = A + s*AB, s = snom/(snom+sdenom)
        var snom = pa.dot(ab);
        // Compute parametric position t for projection P' of P on AC,
        // P' = A + t*AC, s = tnom/(tnom+tdenom)
        var tnom = pa.dot(ac);
        if (snom <= 0 && tnom <= 0) return this.a; // Vertex region early out
        var sdenom = pb.dot(this.a.sub(this.b));
        var tdenom = pc.dot(this.a.sub(this.c));
        // Compute parametric position u for projection P' of P on BC,
        // P' = B + u*BC, u = unom/(unom+udenom)
        var unom = pb.dot(bc);
        var udenom = pc.dot(this.b.sub(this.c));
        if (sdenom <= 0 && unom <= 0) return this.b; // Vertex region early out
        if (tdenom <= 0 && udenom <= 0) return this.c; // Vertex region early out
        // P is outside (or on) AB if the triple scalar product [N PA PB] <= 0
        var n = ab.cross(ac);
        var vc = n.dot(ap.crossSelf(bp));
        // If P outside AB and within feature region of AB,
        // return projection of P onto AB
        if (vc <= 0 && snom >= 0 && sdenom >= 0) // return a + snom / (snom + sdenom) * ab;
        return this.a.add(ab.scaleSelf(snom / (snom + sdenom)));
        // P is outside (or on) BC if the triple scalar product [N PB PC] <= 0
        var va = n.dot(bp.crossSelf(cp));
        // If P outside BC and within feature region of BC,
        // return projection of P onto BC
        if (va <= 0 && unom >= 0 && udenom >= 0) // return b + unom / (unom + udenom) * bc;
        return this.b.add(bc.scaleSelf(unom / (unom + udenom)));
        // P is outside (or on) CA if the triple scalar product [N PC PA] <= 0
        var vb = n.dot(cp.crossSelf(ap));
        // If P outside CA and within feature region of CA,
        // return projection of P onto CA
        if (vb <= 0 && tnom >= 0 && tdenom >= 0) // return a + tnom / (tnom + tdenom) * ac;
        return this.a.add(ac.scaleSelf(tnom / (tnom + tdenom)));
        // P must project inside face region. Compute Q using barycentric
        // coordinates
        var u = va / (va + vb + vc);
        var v = vb / (va + vb + vc);
        var w = 1 - u - v; // = vc / (va + vb + vc)
        // return u * a + v * b + w * c;
        return this.a.scale(u).addSelf(this.b.scale(v)).addSelf(this.c.scale(w));
    },
    computeCentroid: function() {
        this.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1 / 3);
        return this.centroid;
    },
    computeNormal: function() {
        this.normal = this.a.sub(this.c).crossSelf(this.a.sub(this.b)).normalize();
        return this.normal;
    },
    containsPoint: function(p) {
        if (p.equals(this.a) || p.equals(this.b) || p.equals(this.c)) return true;
        var v1 = p.sub(this.a).normalize();
        var v2 = p.sub(this.b).normalize();
        var v3 = p.sub(this.c).normalize();
        var total_angles = Math.acos(v1.dot(v2));
        total_angles += Math.acos(v2.dot(v3));
        total_angles += Math.acos(v3.dot(v1));
        return mathUtils.abs(total_angles - mathUtils.TWO_PI) <= 0.005;
    },
    flipVertexOrder: function() {
        var t = this.a;
        this.a = this.c;
        this.c = this.t;
        return this;
    },
    fromBarycentric: function(p) {
        return new Vec3D(this.a.x * p.x + this.b.x * p.y + this.c.x * p.z, this.a.y * p.x + this.b.y * p.y + this.c.y * p.z, this.a.z * p.x + this.b.z * p.y + this.c.z * p.z);
    },
    getBoundingBox: function() {
        var min = Vec3D.min(Vec3D.min(this.a, this.b), this.c);
        var max = Vec3D.max(Vec3D.max(this.a, this.b), this.c);
        return AABB.fromMinMax(min, max);
    },
    getClosestPointTo: function(p) {
        var edge = new Line3D(this.a, this.b);
        var Rab = edge.closestPointTo(p);
        var Rbc = edge.set(this.b, this.c).closestPointTo(p);
        var Rca = edge.set(this.c, this.a).closestPointTo(p);
        var dAB = p.sub(Rab).magSquared();
        var dBC = p.sub(Rbc).magSquared();
        var dCA = p.sub(Rca).magSquared();
        var min = dAB;
        var result = Rab;
        if (dBC < min) {
            min = dBC;
            result = Rbc;
        }
        if (dCA < min) result = Rca;
        return result;
    },
    isClockwiseInXY: function() {
        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);
    },
    isClockwiseInXZ: function() {
        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);
    },
    isClockwiseInYZ: function() {
        return Triangle3D.isClockwiseInXY(this.a, this.b, this.c);
    },
    set: function(a2, b2, c2) {
        this.a = a2;
        this.b = b2;
        this.c = c2;
    },
    toBarycentric: function(p) {
        var e = b.sub(this.a).cross(this.c.sub(this.a));
        var n = e.getNormalized();
        // Compute twice area of triangle ABC
        var areaABC = n.dot(e);
        // Compute lambda1
        var areaPBC = n.dot(this.b.sub(p).cross(this.c.sub(p)));
        var l1 = areaPBC / areaABC;
        // Compute lambda2
        var areaPCA = n.dot(this.c.sub(p).cross(this.a.sub(p)));
        var l2 = areaPCA / areaABC;
        // Compute lambda3
        var l3 = 1 - l1 - l2;
        return new Vec3D(l1, l2, l3);
    },
    toString: function() {
        return "Triangle: " + this.a + "," + this.b + "," + this.c;
    }
};
module.exports = Triangle3D;

},{"../math/mathUtils":"bF4PI","./Vec3D":"2Czl7","./Line3D":"b5COq","./AABB":"6ZidC"}],"b5COq":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils'), Ray3D = require('./Ray3D');
/**
 @class
 @member toxi
 */ var Line3D = function(vec_a, vec_b) {
    this.a = vec_a;
    this.b = vec_b;
};
Line3D.prototype = {
    constructor: Line3D,
    closestLineTo: function(l) {
        var p43 = l.a.sub(l.b);
        if (p43.isZeroVector()) return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);
        var p21 = this.b.sub(this.a);
        if (p21.isZeroVector()) return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);
        var p13 = this.a.sub(l.a);
        var d1343 = p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;
        var d4321 = p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;
        var d1321 = p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;
        var d4343 = p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;
        var d2121 = p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;
        var denom = d2121 * d4343 - d4321 * d4321;
        if (Math.abs(denom) < mathUtils.EPS) return new Line3D.LineIntersection(Line3D.LineIntersection.Type.NON_INTERSECTING);
        var numer = d1343 * d4321 - d1321 * d4343;
        var mua = numer / denom;
        var mub = (d1343 + d4321 * mua) / d4343;
        var pa = this.a.add(p21.scaleSelf(mua));
        var pb = l.a.add(p43.scaleSelf(mub));
        return new Line3D.LineIntersection(Line3D.LineIntersection.Type.INTERSECTING, new Line3D(pa, pb), mua, mub);
    },
    /**
    * Computes the closest point on this line to the given one.
    *
    * @param p
    *            point to check against
    * @return closest point on the line
    */ closestPointTo: function(p) {
        var v = this.b.sub(this.a);
        var t = p.sub(this.a).dot(v) / v.magSquared();
        // Check to see if t is beyond the extents of the line segment
        if (t < 0) return this.a.copy();
        else if (t > 1) return this.b.copy();
        // Return the point between 'a' and 'b'
        return this.a.add(v.scaleSelf(t));
    },
    copy: function() {
        return new Line3D(this.a.copy(), this.b.copy());
    },
    equals: function(obj) {
        if (this == obj) return true;
        if (typeof obj != Line3D) return false;
        return (this.a.equals(obj.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));
    },
    getDirection: function() {
        return this.b.sub(this.a).normalize();
    },
    getLength: function() {
        return this.a.distanceTo(this.b);
    },
    getLengthSquared: function() {
        return this.a.distanceToSquared(this.b);
    },
    getMidPoint: function() {
        return this.a.add(this.b).scaleSelf(0.5);
    },
    getNormal: function() {
        return this.b.cross(this.a);
    },
    hasEndPoint: function(p) {
        return this.a.equals(p) || this.b.equals(p);
    },
    offsetAndGrowBy: function(offset, scale, ref) {
        var m = this.getMidPoint(), d = this.getDirection(), n = this.a.cross(d).normalize();
        if (ref !== undefined && m.sub(ref).dot(n) < 0) n.invert();
        n.normalizeTo(offset);
        this.a.addSelf(n);
        this.b.addSelf(n);
        d.scaleSelf(scale);
        this.a.subSelf(d);
        this.b.addSelf(d);
        return this;
    },
    set: function(vec_a, vec_b) {
        this.a = vec_a;
        this.b = vec_b;
        return this;
    },
    splitIntoSegments: function(segments, stepLength, addFirst) {
        return Line3D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);
    },
    toRay3D: function() {
        return new Ray3D(this.a.copy(), this.getDirection());
    },
    toString: function() {
        return this.a.toString() + " -> " + this.b.toString();
    }
};
/**
    * Splits the line between A and B into segments of the given length,
    * starting at point A. The tweened points are added to the given result
    * list. The last point added is B itself and hence it is likely that the
    * last segment has a shorter length than the step length requested. The
    * first point (A) can be omitted and not be added to the list if so
    * desired.
    *
    * @param a
    *            start point
    * @param b
    *            end point (always added to results)
    * @param stepLength
    *            desired distance between points
    * @param segments
    *            existing array list for results (or a new list, if null)
    * @param addFirst
    *            false, if A is NOT to be added to results
    * @return list of result vectors
    */ Line3D.splitIntoSegments = function(vec_a, vec_b, stepLength, segments, addFirst) {
    if (segments === undefined) segments = [];
    if (addFirst) segments.push(vec_a.copy());
    var dist = vec_a.distanceTo(vec_b);
    if (dist > stepLength) {
        var pos = vec_a.copy();
        var step = vec_b.sub(vec_a).limit(stepLength);
        while(dist > stepLength){
            pos.addSelf(step);
            segments.push(pos.copy());
            dist -= stepLength;
        }
    }
    segments.push(vec_b.copy());
    return segments;
};
Line3D.LineIntersection = function(type, line, mua, mub) {
    this.type = type;
    if (mua === undefined) mua = 0;
    if (mub === undefined) mub = 0;
    this.line = line;
    this.coeff = [
        mua,
        mub
    ];
};
Line3D.LineIntersection.prototype = {
    getCoefficient: function() {
        return this.coeff;
    },
    getLength: function() {
        if (this.line === undefined) return undefined;
        return this.line.getLength();
    },
    getLine: function() {
        if (this.line === undefined) return undefined;
        return this.line.copy();
    },
    getType: function() {
        return this.type;
    },
    isIntersectionInside: function() {
        return this.type == Line3D.LineIntersection.Type.INTERSECTING && this.coeff[0] >= 0 && this.coeff[0] <= 1 && this.coeff[1] >= 0 && this.coeff[1] <= 1;
    },
    toString: function() {
        return "type: " + this.type + " line: " + this.line;
    }
};
Line3D.LineIntersection.Type = {
    NON_INTERSECTING: 0,
    INTERSECTING: 1
};
module.exports = Line3D;

},{"../math/mathUtils":"bF4PI","./Ray3D":"6rIwI"}],"6rIwI":[function(require,module,exports) {
var extend = require('../internals').extend, Vec3D = require('./Vec3D'), Line3D = require('./Line3D');
/**
 * @class
 * @member toxi
 */ var Ray3D = function(a, b, c, d) {
    var o, dir;
    if (arguments.length == 4) {
        o = new Vec3D(a, b, c);
        dir = d;
    } else if (arguments.length == 2) {
        o = a;
        dir = b;
    } else {
        o = new Vec3D();
        dir = Vec3D.Y_AXIS.copy();
    }
    Vec3D.apply(this, [
        o
    ]);
    this.dir = dir;
};
extend(Ray3D, Vec3D);
/**
	Returns a copy of the ray's direction vector.
	@return vector
*/ Ray3D.prototype.getDirection = function() {
    return this.dir.copy();
};
/**
	Calculates the distance between the given point and the infinite line
	coinciding with this ray.
	@param p
*/ Ray3D.prototype.getDistanceToPoint = function(p) {
    var sp = p.sub(this);
    return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));
};
/**
	Returns the point at the given distance on the ray. The distance can be
	any real number.
	@param dist
	@return vector
*/ Ray3D.prototype.getPointAtDistance = function(dist) {
    return this.add(this.dir.scale(dist));
};
/**
  Uses a normalized copy of the given vector as the ray direction.
  @param d new direction
  @return itself
*/ Ray3D.prototype.setDirection = function(d) {
    this.dir.set(d).normalize();
    return this;
};
/**
  Converts the ray into a 3D Line segment with its start point coinciding
  with the ray origin and its other end point at the given distance along
  the ray.

  @param dist end point distance
  @return line segment
*/ Ray3D.prototype.toLine3DWithPointAtDistance = function(dist) {
    Line3D = require('./Line3D');
    return new Line3D(this, this.getPointAtDistance(dist));
};
Ray3D.prototype.toString = function() {
    return "origin: " + this.parent.toString.call(this) + " dir: " + this.dir;
};
module.exports = Ray3D;

},{"../internals":"iIw4Q","./Vec3D":"2Czl7","./Line3D":"b5COq"}],"eWfuW":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils');
var Triangle3D = require('./Triangle3D');
var Vec3D = require('./Vec3D');
var IsectData3D = require('./IsectData3D');
/**
	 * @param {Triangle3D} [t]
	 */ var TriangleIntersector = function(t) {
    this.triangle = t || new Triangle3D();
    this.isectData = new IsectData3D();
};
TriangleIntersector.prototype = {
    getIntersectionData: function() {
        return this.isectData;
    },
    getTriangle: function() {
        return this.triangle;
    },
    /**
		 * @param {Ray3D} ray
		 * @returns {Boolean}
		 */ intersectsRay: function(ray) {
        this.isectData.isIntersection = false;
        var n = this.triangle.computeNormal(), dotprod = n.dot(ray.dir);
        if (dotprod < 0) {
            var rt = ray.sub(this.triangle.a), t = -(n.x * rt.x + n.y * rt.y + n.z * rt.z) / (n.x * ray.dir.x + n.y * ray.dir.y + n.z * ray.dir.z);
            if (t >= mathUtils.EPS) {
                var pos = ray.getPointAtDistance(t);
                //check if pos is inside triangle
                if (this.triangle.containsPoint(pos)) {
                    this.isectData.isIntersection = true;
                    this.isectData.pos = pos;
                    this.isectData.normal = n;
                    this.isectData.dist = t;
                    this.isectData.dir = this.isectData.pos.sub(ray).normalize();
                }
            }
        }
        return this.isectData.isIntersection;
    },
    /**
		 * @param {Triangle3D} tri
		 * @returns {TriangleIntersector}
		 */ setTriangle: function(tri) {
        this.triangle = tri;
        return this;
    }
};
module.exports = TriangleIntersector;

},{"../math/mathUtils":"bF4PI","./Triangle3D":"lw0Ec","./Vec3D":"2Czl7","./IsectData3D":"2LfTk"}],"2LfTk":[function(require,module,exports) {
var Vec3D = require('./Vec3D');
/**
 * @class
 * @member toxi
 */ var IsectData3D = function(isec) {
    if (isec !== undefined) {
        this.isIntersection = isec.isIntersection;
        this.dist = isec.dist;
        this.pos = isec.pos.copy();
        this.dir = isec.dir.copy();
        this.normal = isec.normal.copy();
    } else this.clear();
};
IsectData3D.prototype = {
    clear: function() {
        this.isIntersection = false;
        this.dist = 0;
        this.pos = new Vec3D();
        this.dir = new Vec3D();
        this.normal = new Vec3D();
    },
    toString: function() {
        var s = "isec: " + this.isIntersection;
        if (this.isIntersection) s += " at:" + this.pos + " dist:" + this.dist + " normal:" + this.normal;
        return s;
    }
};
module.exports = IsectData3D;

},{"./Vec3D":"2Czl7"}],"adHTo":[function(require,module,exports) {
var mathUtils = require('../math/mathUtils'), Matrix4x4 = require('./Matrix4x4');
/**
 * @class
 * @member toxi
 */ var Quaternion = function(qw, vx, y, z) {
    if (arguments.length == 4) {
        this.w = qw;
        this.x = vx;
        this.y = y;
        this.z = z;
    } else if (arguments.length == 2) {
        this.x = vx.x;
        this.y = vx.y;
        this.z = vx.z;
        this.w = qw;
    } else if (arguments.length == 1) {
        this.w = q.w;
        this.x = q.x;
        this.y = q.y;
        this.z = q.z;
    }
};
Quaternion.prototype = {
    add: function(q) {
        return new Quaternion(this.x + q.x, this.y + q.y, this.z + q.z, this.w + q.w);
    },
    addSelf: function(q) {
        this.x += q.x;
        this.y += q.y;
        this.z += q.z;
        return this;
    },
    copy: function() {
        return new Quaternion(this.w, this.x, this.y, this.z);
    },
    dot: function(q) {
        return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
    },
    getConjugate: function() {
        var q = new Quaternion();
        q.x = -this.x;
        q.y = -this.y;
        q.z = -this.z;
        q.w = w;
        return q;
    },
    identity: function() {
        this.w = 1;
        this.x = 0;
        this.y = 0;
        this.z = 0;
        return this;
    },
    interpolateTo: function(target, t, is) {
        return arguments.length == 3 ? this.copy().interpolateTo(target, is.interpolate(0, 1, t)) : this.copy().interpolateToSelf(target, t);
    },
    interpolateToSelf: function(target, t, is) {
        if (arguments.length == 3) t = is.interpolate(0, 1, t);
        var scale, invscale, dot = mathUtils.clip(this.dot(target), -1, 1);
        if (1 - dot >= mathUtils.EPS) {
            var theta = Math.acos(dot);
            var invsintheta = 1 / Math.sin(theta);
            scale = Math.sin(theta * (1 - t)) * invsintheta;
            invscale = Math.sin(theta * t) * invsintheta;
        } else {
            scale = 1 - t;
            invscale = t;
        }
        if (dot < 0) {
            this.w = scale * this.w - invscale * target.w;
            this.x = scale * this.x - invscale * target.x;
            this.y = scale * this.y - invscale * target.y;
            this.z = scale * this.z - invscale * target.z;
        } else {
            this.w = scale * w + invscale * target.w;
            this.x = scale * x + invscale * target.x;
            this.y = scale * y + invscale * target.y;
            this.z = scale * z + invscale * target.z;
        }
        return this;
    },
    magnitude: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    },
    multiply: function(q2) {
        var res = new Quaternion();
        res.w = this.w * q2.w - x * q2.x - y * q2.y - z * q2.z;
        res.x = this.w * q2.x + x * q2.w + y * q2.z - z * q2.y;
        res.y = this.w * q2.y + y * q2.w + z * q2.x - x * q2.z;
        res.z = this.w * q2.z + z * q2.w + x * q2.y - y * q2.x;
        return res;
    },
    normalize: function() {
        var mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        if (mag > mathUtils.EPS) {
            mag = 1 / mag;
            this.x *= mag;
            this.y *= mag;
            this.z *= mag;
            this.w *= mag;
        }
        return this;
    },
    scale: function(t) {
        return new Quaternion(this.x * t, this.y * t, this.z * t, this.w * t);
    },
    scaleSelf: function(t) {
        this.x *= t;
        this.y *= t;
        this.z *= t;
        this.w *= t;
        return this;
    },
    set: function(w, x, y, z) {
        if (arguments.length == 4) {
            this.w = w;
            this.x = x;
            this.y = y;
            this.z = z;
        } else if (arguments.length == 2) {
            this.w = w;
            this.x = v.x;
            this.y = v.y;
            this.z = v.z;
        } else {
            this.w = q.w;
            this.x = q.x;
            this.y = q.y;
            this.z = q.z;
        }
        return this;
    },
    sub: function(q) {
        return new Quaternion(this.x - q.x, this.y - q.y, this.z - q.z, this.w - q.w);
    },
    subSelf: function(q) {
        this.x -= q.x;
        this.y -= q.y;
        this.z -= q.z;
        this.w -= q.w;
        return this;
    },
    toArray: function() {
        return [
            this.w,
            this.x,
            this.y,
            this.z
        ];
    },
    toAxisAngle: function() {
        var res = [];
        var sa = Math.sqrt(1 - this.w * this.w);
        if (sa < mathUtils.EPS) sa = 1;
        else sa = 1 / sa;
        res[0] = Math.acos(this.w) * 2;
        res[1] = this.x * sa;
        res[2] = this.y * sa;
        res[3] = this.z * sa;
        return res;
    },
    toMatrix4x4: function(result) {
        if (result === undefined) result = new Matrix4x4();
        var x2 = this.x + this.x;
        var y2 = this.y + this.y;
        var z2 = this.z + this.z;
        var xx = this.x * x2;
        var xy = this.x * y2;
        var xz = this.x * z2;
        var yy = this.y * y2;
        var yz = this.y * z2;
        var zz = this.z * z2;
        var wx = this.w * x2;
        var wy = this.w * y2;
        var wz = this.w * z2;
        var st = x2 + ',' + y2 + ',' + z2 + ',' + xx + ',' + xy + ',' + xz + ',' + yy + ',' + yz + ',' + zz + ',' + wx + ',' + wy + ',' + wz;
        return result.set(1 - (yy + zz), xy - wz, xz + wy, 0, xy + wz, 1 - (xx + zz), yz - wx, 0, xz - wy, yz + wx, 1 - (xx + yy), 0, 0, 0, 0, 1);
    },
    toString: function() {
        return "{axis: [" + this.x + "," + this.y + "," + this.z + "], w: " + this.w + "}";
    }
};
Quaternion.DOT_THRESHOLD = 0.9995;
Quaternion.createFromAxisAngle = function(axis, angle) {
    angle *= 0.5;
    var sin = mathUtils.sin(angle), cos = mathUtils.cos(angle), q = new Quaternion(cos, axis.getNormalizedTo(sin));
    return q;
};
Quaternion.createFromEuler = function(pitch, yaw, roll) {
    pitch *= 0.5;
    yaw *= 0.5;
    roll *= 0.5;
    var sinPitch = mathUtils.sin(pitch), cosPitch = mathUtils.cos(pitch), sinYaw = mathUtils.sin(yaw), cosYaw = mathUtils.cos(yaw), sinRoll = mathUtils.sin(roll), cosRoll = mathUtils.cos(roll);
    var cosPitchCosYaw = cosPitch * cosYaw, sinPitchSinYaw = sinPitch * sinYaw;
    var q = new Quaternion();
    q.x = sinRoll * cosPitchCosYaw - cosRoll * sinPitchSinYaw;
    q.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;
    q.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;
    q.w = cosRoll * cosPitchCosYaw + sinRoll * sinPitchSinYaw;
    return q;
};
Quaternion.createFromMatrix = function(m) {
    var s = 0;
    var q = [];
    var trace = m.matrix[0][0] + m.matrix[1][1] + m.matrix[2][2];
    if (trace > 0) {
        s = Math.sqrt(trace + 1);
        q[3] = s * 0.5;
        s = 0.5 / s;
        q[0] = m.matrix[1][2] - m.matrix[2][1] * s;
        q[1] = m.matrix[2][0] - m.matrix[0][2] * s;
        q[2] = m.matrix[0][1] - m.matrix[1][0] * s;
    } else {
        var nxt = [
            1,
            2,
            0
        ];
        var i = 0, j = 0, k = 0;
        if (m.matrix[1][1] > m.matrix[0][0]) i = 1;
        if (m.matrix[2][2] > m.matrix[i][i]) i = 2;
        j = nxt[i];
        k = nxt[j];
        s = Math.sqrt(m.matrix[i][i] - (m.matrix[j][j] + m.matrix[k][k]) + 1);
        q[i] = s * 0.5;
        s = 0.5 / s;
        q[3] = (m.matrix[j][k] - m.matrix[k][j]) * s;
        q[j] = (m.matrix[i][j] + m.matrix[j][i]) * s;
        q[k] = (m.matrix[i][k] + m.matrix[k][i]) * s;
    }
    return new Quaternion(q[3], q[0], q[1], q[2]);
};
Quaternion.getAlignmentQuat = function(dir, forward) {
    var target = dir.getNormalized(), axis = forward.cross(target), length = axis.magnitude() + 0.0001, angle = Math.atan2(length, forward.dot(target));
    return this.createFromAxisAngle(axis, angle);
};
module.exports = Quaternion;

},{"../math/mathUtils":"bF4PI","./Matrix4x4":"c1T7H"}],"fUOZY":[function(require,module,exports) {
//WEVertex becomes a property on Vertex
var Vertex, WEVertex;
(function() {
    var extend = require('../../internals').extend, Vec3D = require('../Vec3D'), proto;
    Vertex = function(v, id) {
        Vec3D.call(this, v);
        this.id = id;
        this.normal = new Vec3D();
    };
    extend(Vertex, Vec3D);
    proto = Vertex.prototype;
    proto.addFaceNormal = function(n) {
        this.normal.addSelf(n);
    };
    proto.clearNormal = function() {
        this.normal.clear();
    };
    proto.computeNormal = function() {
        this.normal.normalize();
    };
    proto.toString = function() {
        return this.id + ": p: " + this.parent.toString.call(this) + " n:" + this.normal.toString();
    };
})();
(function() {
    var extend = require('../../internals').extend, proto;
    WEVertex = function(vec3d, id) {
        Vertex.call(this, vec3d, id);
        this.edges = [];
    };
    extend(WEVertex, Vertex);
    proto = WEVertex.prototype;
    //@param {WingedEdge} edge to add
    proto.addEdge = function(edge) {
        this.edges.push(edge);
    };
    //@param {Vec3D} dir
    //@param {Number} tolerance
    //@return {WingedEdge} closest
    proto.getNeighborInDirection = function(dir, tolerance) {
        var closest, delta = 1 - tolerance;
        var neighbors = this.getNeighbors();
        var d;
        for(var i = 0, l = neighbors.length; i < l; i++){
            d = neighbors[i].sub(this).normalize().dot(dir);
            if (d > delta) {
                closest = neighbors[i];
                delta = d;
            }
        }
        return closest;
    };
    //@return {WingedEdge[]} neighbors
    proto.getNeighbors = function() {
        var neighbors = [];
        for(var i = 0, l = this.edges.length; i < l; i++)neighbors.push(this.edges[i].getOtherEndFor(this));
        return neighbors;
    };
    proto.removeEdge = function(e) {
        this.edges.splice(this.edges.indexOf(e), 1);
    };
    proto.toString = function() {
        return this.id + " {" + this.x + "," + this.y + "," + this.z + "}";
    };
    return WEVertex;
})();
Vertex.WEVertex = WEVertex;
module.exports = Vertex;

},{"../../internals":"iIw4Q","../Vec3D":"2Czl7"}],"bxMAT":[function(require,module,exports) {
//2 modules defined
var Sphere1, SphereFunction;
(function() {
    var internals = require('../internals');
    var meshCommon = require('./mesh/meshCommon');
    var Vec3D = require('./Vec3D');
    /**
		 * @module toxi.geom.Sphere
		 * @augments toxi.geom.Vec3D
		 */ Sphere1 = function(a, b) {
        if (a === undefined) {
            Vec3D.apply(this, [
                new Vec3D()
            ]);
            this.radius = 1;
        } else if (internals.has.XYZ(a)) {
            Vec3D.apply(this, [
                a
            ]);
            if (internals.is.Sphere(a)) this.radius = a.radius;
            else this.radius = b;
        } else {
            Vec3D.apply(this, [
                new Vec3D()
            ]);
            this.radius = a;
        }
    };
    internals.extend(Sphere1, Vec3D);
    Sphere1.prototype.containsPoint = function(p) {
        var d = this.sub(p).magSquared();
        return d <= this.radius * this.radius;
    };
    /**
		 * Alternative to {@link SphereIntersectorReflector}. Computes primary &
		 * secondary intersection points of this sphere with the given ray. If no
		 * intersection is found the method returns null. In all other cases, the
		 * returned array will contain the distance to the primary intersection
		 * point (i.e. the closest in the direction of the ray) as its first index
		 * and the other one as its second. If any of distance values is negative,
		 * the intersection point lies in the opposite ray direction (might be
		 * useful to know). To get the actual intersection point coordinates, simply
		 * pass the returned values to {@link Ray3D#getPointAtDistance(float)}.
		 * @param ray
		 * @return 2-element float array of intersection points or null if ray
		 * doesn't intersect sphere at all.
		 */ Sphere1.prototype.intersectRay = function(ray) {
        var result, a, b, t, q = ray.sub(this), distSquared = q.magSquared(), v = -q.dot(ray.getDirection()), d = this.radius * this.radius - (distSquared - v * v);
        if (d >= 0) {
            d = Math.sqrt(d);
            a = v + d;
            b = v - d;
            if (!(a < 0 && b < 0)) {
                if (a > 0 && b > 0) {
                    if (a > b) {
                        t = a;
                        a = b;
                        b = t;
                    }
                } else if (b > 0) {
                    t = a;
                    a = b;
                    b = t;
                }
            }
            result = [
                a,
                b
            ];
        }
        return result;
    };
    /**
		 * Considers the current vector as centre of a collision sphere with radius
		 * r and checks if the triangle abc intersects with this sphere. The Vec3D p
		 * The point on abc closest to the sphere center is returned via the
		 * supplied result vector argument.
		 * @param t
		 *			triangle to check for intersection
		 * @param result
		 *			a non-null vector for storing the result
		 * @return true, if sphere intersects triangle ABC
		 */ Sphere1.prototype.intersectSphereTriangle = function(t, result) {
        // Find Vec3D P on triangle ABC closest to sphere center
        result.set(t.closestPointOnSurface(this));
        // Sphere and triangle intersect if the (squared) distance from sphere
        // center to Vec3D p is less than the (squared) sphere radius
        var v = result.sub(this);
        return v.magSquared() <= this.radius * this.radius;
    };
    /**
		 * Calculates the normal vector on the sphere in the direction of the
		 * current point.
		 * @param q
		 * @return a unit normal vector to the tangent plane of the ellipsoid in the
		 * point.
		 */ Sphere1.prototype.tangentPlaneNormalAt = function(q) {
        return this.sub(q).normalize();
    };
    Sphere1.prototype.toMesh = function() {
        //this fn requires SurfaceMeshBuilder, loading it here to avoid circular dependency
        //var SurfaceMeshBuilder = require('./mesh/SurfaceMeshBuilder');
        //if one argument is passed it can either be a Number for resolution, or an options object
        //if 2 parameters are passed it must be a TriangleMesh and then a Number for resolution
        var opts = {
            mesh: undefined,
            resolution: 0
        };
        if (arguments.length === 1) {
            if (typeof arguments[0] == 'object') {
                opts.mesh = arguments[0].mesh;
                opts.resolution = arguments[0].res || arguments[0].resolution;
            } else opts.resolution = arguments[0];
        } else {
            opts.mesh = arguments[0];
            opts.resolution = arguments[1];
        }
        var builder = new meshCommon.SurfaceMeshBuilder(new SphereFunction(this));
        return builder.createMesh(opts.mesh, opts.resolution, 1);
    };
})();
(function(Sphere) {
    //SphereFunction
    var mathUtils = require('../math/mathUtils'), Vec3D = require('./Vec3D'), internals = require('../internals');
    /**
		 * @class This implementation of a {@link SurfaceFunction} samples a given
		 * {@link Sphere} instance when called by the {@link SurfaceMeshBuilder}.
		 * @member toxi
		 */ SphereFunction = function(sphere_or_radius) {
        if (sphere_or_radius === undefined) this.sphere = new Sphere(new Vec3D(), 1);
        if (internals.is.Sphere(sphere_or_radius)) this.sphere = sphere_or_radius;
        else this.sphere = new Sphere(new Vec3D(), sphere_or_radius);
        this.phiRange = mathUtils.PI;
        this.thetaRange = mathUtils.TWO_PI;
    };
    SphereFunction.prototype = {
        computeVertexFor: function(p, phi, theta) {
            phi -= mathUtils.HALF_PI;
            var cosPhi = mathUtils.cos(phi);
            var cosTheta = mathUtils.cos(theta);
            var sinPhi = mathUtils.sin(phi);
            var sinTheta = mathUtils.sin(theta);
            var t = mathUtils.sign(cosPhi) * mathUtils.abs(cosPhi);
            p.x = t * mathUtils.sign(cosTheta) * mathUtils.abs(cosTheta);
            p.y = mathUtils.sign(sinPhi) * mathUtils.abs(sinPhi);
            p.z = t * mathUtils.sign(sinTheta) * mathUtils.abs(sinTheta);
            return p.scaleSelf(this.sphere.radius).addSelf(this.sphere);
        },
        getPhiRange: function() {
            return this.phiRange;
        },
        getPhiResolutionLimit: function(res) {
            return res;
        },
        getThetaRange: function() {
            return this.thetaRange;
        },
        getThetaResolutionLimit: function(res) {
            return res;
        },
        setMaxPhi: function(max) {
            this.phiRange = mathUtils.min(max / 2, mathUtils.PI);
        },
        setMaxTheta: function(max) {
            this.thetaRange = mathUtils.min(max, mathUtils.TWO_PI);
        }
    };
})(Sphere1);
Sphere1.SphereFunction = SphereFunction;
module.exports = Sphere1;

},{"../internals":"iIw4Q","./mesh/meshCommon":"1kzZS","./Vec3D":"2Czl7","../math/mathUtils":"bF4PI"}],"c8tGU":[function(require,module,exports) {
var internals = require('../../internals');
var Line3D = require('../Line3D');
var WingedEdge, proto;
//@param {WEVertex} va
//@param {WEVertex} vb
//@param {WEFace} face
//@param {Number} id
WingedEdge = function(va, vb, face, id) {
    Line3D.call(this, va, vb);
    this.id = id;
    this.faces = [];
    this.addFace(face);
};
internals.extend(WingedEdge, Line3D);
proto = WingedEdge.prototype;
//@param {WEFace} face
//@return {WingedEdge} this
proto.addFace = function(face) {
    this.faces.push(face);
    return this;
};
//@return {WEFace[]} faces
proto.getFaces = function() {
    return this.faces;
};
//@param {WEVertex} wevert
//@return {WingedEdge}
proto.getOtherEndFor = function(wevert) {
    if (this.a === wevert) return this.b;
    if (this.b === wevert) return this.a;
};
proto.remove = function() {
    var self = this;
    var rm = function(edges) {
        edges.splice(edges.indexOf(self), 1);
    };
    for(var i = 0, l = this.faces.length; i < l; i++)rm(this.faces[i].edges);
    rm(this.a.edges);
    rm(this.b.edges);
};
proto.toString = function() {
    return "id: " + this.id + " " + Line3D.prototype.toString.call(this) + " f: " + this.faces.length;
};
module.exports = WingedEdge;

},{"../../internals":"iIw4Q","../Line3D":"b5COq"}],"cujiL":[function(require,module,exports) {
var internals = require('../../../internals');
var SubdivisionStrategy = require('./SubdivisionStrategy');
var MidpointSubdivison = function() {
    SubdivisionStrategy.call(this);
};
internals.extend(MidpointSubdivison, SubdivisionStrategy);
MidpointSubdivison.prototype.computeSplitPoints = function(edge) {
    var mid = [];
    mid.push(edge.getMidPoint());
    return mid;
};
module.exports = MidpointSubdivison;

},{"../../../internals":"iIw4Q","./SubdivisionStrategy":"6R3AY"}],"6R3AY":[function(require,module,exports) {
var EdgeLengthComparator = require('./EdgeLengthComparator');
var SubdivisionStrategy, proto;
SubdivisionStrategy = function() {
    this._order = SubdivisionStrategy.DEFAULT_ORDERING;
};
SubdivisionStrategy.DEFAULT_ORDERING = new EdgeLengthComparator();
proto = SubdivisionStrategy.prototype;
proto.getEdgeOrdering = function() {
    return this._order.compare;
};
proto.setEdgeOrdering = function(order) {
    this._order = order;
};
module.exports = SubdivisionStrategy;

},{"./EdgeLengthComparator":"iUd9r"}],"iUd9r":[function(require,module,exports) {
var EdgeLengthComparator = function() {
};
EdgeLengthComparator.prototype.compare = function(edge1, edge2) {
    return -parseInt(edge1.getLengthSquared() - edge2.getLengthSquared(), 10);
};
module.exports = EdgeLengthComparator;

},{}],"9ejMm":[function(require,module,exports) {
var internals = require('../internals');
/**
    * @class Implementations of 2D interpolation functions (currently only bilinear).
    * @member toxi
    * @static
    */ var Interpolation2D = {
};
/**
    * @param {Number} x
    *            x coord of point to filter (or Vec2D p)
    * @param {Number} y
    *            y coord of point to filter (or Vec2D p1)
    * @param {Number} x1
    *            x coord of top-left corner (or Vec2D p2)
    * @param {Number} y1
    *            y coord of top-left corner
    * @param {Number} x2
    *            x coord of bottom-right corner
    * @param {Number} y2
    *            y coord of bottom-right corner
    * @param {Number} tl
    *            top-left value
    * @param {Number} tr
    *            top-right value (do not use if first 3 are Vec2D)
    * @param {Number} bl
    *            bottom-left value (do not use if first 3 are Vec2D)
    * @param {Number} br
    *            bottom-right value (do not use if first 3 are Vec2D)
    * @return {Number} interpolated value
    */ Interpolation2D.bilinear = function(_x, _y, _x1, _y1, _x2, _y2, _tl, _tr, _bl, _br) {
    var x, y, x1, y1, x2, y2, tl, tr, bl, br;
    if (internals.has.XY(_x)) {
        x = _x.x;
        y = _x.y;
        x1 = _y.x;
        y1 = _y.y;
        x2 = _x1.x;
        y2 = _x1.y;
        tl = _y1;
        tr = _x2;
        bl = _y2;
        br = _tl;
    } else {
        x = _x;
        y = _y;
        x1 = _x1;
        y1 = _y1;
        x2 = _x2;
        y2 = _y2;
        tl = _tl;
        tr = _tr;
        bl = _bl;
        br = _br;
    }
    var denom = 1 / ((x2 - x1) * (y2 - y1));
    var dx1 = (x - x1) * denom;
    var dx2 = (x2 - x) * denom;
    var dy1 = y - y1;
    var dy2 = y2 - y;
    return tl * dx2 * dy2 + tr * dx1 * dy2 + bl * dx2 * dy1 + br * dx1 * dy1;
};
module.exports = Interpolation2D;

},{"../internals":"iIw4Q"}],"059x1":[function(require,module,exports) {
exports.TriangleMesh = require('./mesh/TriangleMesh');
exports.BezierPatch = require('./mesh/BezierPatch');
exports.BoxSelector = require('./mesh/BoxSelector');
exports.DefaultSelector = require('./mesh/DefaultSelector');
exports.Face = require('./mesh/Face');
//exports.LaplacianSmooth = require('./mesh/LaplacianSmooth');
exports.OBJWriter = require('./mesh/OBJWriter');
exports.PlaneSelector = require('./mesh/PlaneSelector');
exports.SphereFunction = require('./mesh/SphereFunction');
exports.SphericalHarmonics = require('./mesh/SphericalHarmonics');
exports.SurfaceMeshBuilder = require('./mesh/SurfaceMeshBuilder');
exports.SuperEllipsoid = require('./mesh/SuperEllipsoid');
exports.Terrain = require('./mesh/Terrain');
exports.TriangleMesh = require('./mesh/TriangleMesh');
exports.Vertex = require('./mesh/Vertex');
exports.VertexSelector = require('./mesh/VertexSelector');
exports.WETriangleMesh = require('./mesh/WETriangleMesh'); //exports.subdiv = require('./mesh/subdiv');

},{"./mesh/TriangleMesh":"b6pcq","./mesh/BezierPatch":"7RJsS","./mesh/BoxSelector":"fPYbg","./mesh/DefaultSelector":"jTlX1","./mesh/Face":"7Jhmh","./mesh/OBJWriter":"2PLMJ","./mesh/PlaneSelector":"5UosO","./mesh/SphereFunction":"lznvS","./mesh/SphericalHarmonics":"hlvi0","./mesh/SurfaceMeshBuilder":"3cwd2","./mesh/SuperEllipsoid":"hJfMK","./mesh/Terrain":"kWsI4","./mesh/Vertex":"fUOZY","./mesh/VertexSelector":"hxywo","./mesh/WETriangleMesh":"aEsj3"}],"b6pcq":[function(require,module,exports) {
module.exports = require('./meshCommon').TriangleMesh;

},{"./meshCommon":"1kzZS"}],"7RJsS":[function(require,module,exports) {
var Vec3D = require('../Vec3D'), TriangleMesh = require('./TriangleMesh'), is = require('../../internals/is');
/**
 * @class 4x4 bezier patch implementation with tesselation support (dynamic resolution)
 * for generating triangle mesh representations.
 * @member toxi
 */ var BezierPatch = function(points) {
    if (is.Array(points)) this.points = points;
    else {
        this.points = [];
        for(var i = 0; i < 4; i++){
            this.points[i] = this.points[i] || [];
            for(var j = 0; j < 4; j++)this.points[i][j] = new Vec3D();
        }
    }
};
BezierPatch.prototype = {
    computePointAt: function(u, v) {
        return BezierPatch.computePointAt(u, v, this.points);
    },
    set: function(x, y, p) {
        this.points[y][x].set(p);
        return this;
    },
    toMesh: function(mesh_or_res, _res) {
        var mesh, res;
        if (_res === undefined) {
            mesh = new TriangleMesh();
            res = mesh_or_res;
        } else {
            mesh = mesh_or_res;
            res = _res;
        }
        var curr = new Array(res + 1), prev = new Array(res + 1);
        var r1 = 1 / res;
        for(var y = 0; y <= res; y++){
            for(var x = 0; x <= res; x++){
                var p = this.computePointAt(x * r1, y * r1, this.points);
                if (x > 0 && y > 0) {
                    mesh.addFace(p, curr[x - 1], prev[x - 1]);
                    mesh.addFace(p, prev[x - 1], prev[x]);
                }
                curr[x] = p;
            }
            var tmp = prev;
            prev = curr;
            curr = tmp;
        }
        return mesh;
    }
};
/**
Computes a single point on the bezier surface given by the 2d array of
control points. The desired point's coordinates have to be specified in
UV space (range 0.0 .. 1.0). The implementation does not check or enforce
the correct range of these coords and will not return valid points if the
range is exceeded.
@param u positive normalized U coordinate on the bezier surface
@param v positive normalized V coordinate on the bezier surface
@param points 4x4 array defining the patch's control points
@return point on surface
*/ BezierPatch.computePointAt = function(u, v, points) {
    var u1 = 1 - u;
    var u1squared = u1 * u1 * 3 * u, u1cubed = u1 * u1 * u1, usquared = u * u, v1 = 1 - v, vsquared = v * v * 3, v1squared = v1 * v1 * 3, v1cubed = v1 * v1 * v1, vcubed = v * v * v, u1usq = u1 * usquared * 3, usqu = u * usquared, v1vsq = v1 * vsquared, v1sqv = v1squared * v;
    var p0 = points[0];
    var p1 = points[1];
    var p2 = points[2];
    var p3 = points[3];
    var x = u1cubed * (p0[0].x * v1cubed + p0[1].x * v1sqv + p0[2].x * v1vsq + p0[3].x * vcubed) + u1squared * (p1[0].x * v1cubed + p1[1].x * v1sqv + p1[2].x * v1vsq + p1[3].x * vcubed) + u1usq * (p2[0].x * v1cubed + p2[1].x * v1sqv + p2[2].x * v1vsq + p2[3].x * vcubed) + usqu * (p3[0].x * v1cubed + p3[1].x * v1sqv + p3[2].x * v1vsq + p3[3].x * vcubed);
    var y = u1cubed * (p0[0].y * v1cubed + p0[1].y * v1sqv + p0[2].y * v1vsq + p0[3].y * vcubed) + u1squared * (p1[0].y * v1cubed + p1[1].y * v1sqv + p1[2].y * v1vsq + p1[3].y * vcubed) + u1usq * (p2[0].y * v1cubed + p2[1].y * v1sqv + p2[2].y * v1vsq + p2[3].y * vcubed) + usqu * (p3[0].y * v1cubed + p3[1].y * v1sqv + p3[2].y * v1vsq + p3[3].y * vcubed);
    var z = u1cubed * (p0[0].z * v1cubed + p0[1].z * v1sqv + p0[2].z * v1vsq + p0[3].z * vcubed) + u1squared * (p1[0].z * v1cubed + p1[1].z * v1sqv + p1[2].z * v1vsq + p1[3].z * vcubed) + u1usq * (p2[0].z * v1cubed + p2[1].z * v1sqv + p2[2].z * v1vsq + p2[3].z * vcubed) + usqu * (p3[0].z * v1cubed + p3[1].z * v1sqv + p3[2].z * v1vsq + p3[3].z * vcubed);
    return new Vec3D(x, y, z);
};
module.exports = BezierPatch;

},{"../Vec3D":"2Czl7","./TriangleMesh":"b6pcq","../../internals/is":"4G2iR"}],"fPYbg":[function(require,module,exports) {
var extend = require('../../internals').extend, VertexSelector = require('./VertexSelector');
/**
 * @class
 * @member toxi
 * @augments toxi.VertexSelector
 */ var BoxSelector = function(mesh, box) {
    VertexSelector.apply(this, [
        mesh
    ]);
    this.box = box;
};
extend(BoxSelector, VertexSelector);
BoxSelector.prototype.selectVertices = function() {
    this.clearSelection();
    var verts = this.mesh.getVertices();
    var l = verts.length;
    for(var i = 0; i < l; i++){
        var v = verts[i];
        if (this.box.containsPoint(v)) this.selection.add(v);
    }
    return this;
};
module.exports = BoxSelector;

},{"../../internals":"iIw4Q","./VertexSelector":"hxywo"}],"hxywo":[function(require,module,exports) {
/**
 * @class
 * @member toxi
 */ var VertexSelector = function(mesh) {
    this.mesh = mesh;
    this.selection = [];
};
VertexSelector.prototype = {
    /**
     * Adds all vertices selected by the given selector to the current
     * selection. The other selector needs to be assigned to the same mesh
     * instance.
     * @param sel2 other selector
     * @return itself
     */ addSelection: function(sel2) {
        this.checkMeshIdentity(sel2.getMesh());
        this.selection = this.selection.concat(sel2.getSelection());
        return this;
    },
    /**
     * Utility function to check if the given mesh is the same instance as ours.
     * @param mesh2
     */ checkMeshIdentity: function(mesh2) {
        if (mesh2 != this.mesh) throw new Error("The given selector is not using the same mesh instance");
    },
    clearSelection: function() {
        this.selection = [];
        return this;
    },
    getMesh: function() {
        return this.mesh;
    },
    getSelection: function() {
        return this.selection;
    },
    /**
     * Creates a new selection of all vertices NOT currently selected.
     * @return itself
     */ invertSelection: function() {
        var newSel = [];
        var vertices = this.mesh.getVertices();
        var l = vertices.length;
        for(var i = 0; i < l; i++){
            var v = vertices[i];
            if (this.selection.indexOf(v) < 0) newSel.push(v);
        }
        this.selection = newSel;
        return this;
    },
    /**
     * Selects vertices identical or closest to the ones given in the list of
     * points.
     * @param points
     * @return itself
     */ selectSimilar: function(points) {
        var l = points.length;
        for(var i = 0; i < l; i++){
            var v = points[i];
            this.selection.push(this.mesh.getClosestVertexToPoint(v));
        }
        return this;
    },
    /**
     * Selects vertices using an implementation specific method. This is the
     * only method which needs to be implemented by any selector subclass.
     * @return itself
     */ selectVertices: function() {
        return this;
    },
    setMesh: function(mesh) {
        this.mesh = mesh;
        this.clearSelection();
    },
    size: function() {
        return this.selection.length;
    },
    /**
     * Removes all vertices selected by the given selector from the current
     * selection. The other selector needs to be assigned to the same mesh
     * instance.
     * @param sel2 other selector
     * @return itself
     */ subtractSelection: function(sel2) {
        this.checkMeshIdentity(sel2.getMesh());
        var removeThese = sel2.getSelection();
        var i, l = removeThese.length;
        for(i = 0; i < l; i++)this.selection.splice(this.selection.indexOf(removeThese[i]), 1);
        return this;
    }
};
module.exports = VertexSelector;

},{}],"jTlX1":[function(require,module,exports) {
var extend = require('../../internals').extend, VertexSelector = require('./VertexSelector');
/**
	 * @class
	 * @member toxi
	 * @augments toxi.VertexSelector
	 */ var DefaultSelector = function(mesh) {
    VertexSelector.call(this, mesh);
};
extend(DefaultSelector, VertexSelector);
DefaultSelector.prototype.selectVertices = function() {
    this.clearSelection();
    this.selection = this.selection.concat(this.mesh.getVertices());
    return this;
};
module.exports = DefaultSelector;

},{"../../internals":"iIw4Q","./VertexSelector":"hxywo"}],"2PLMJ":[function(require,module,exports) {
var internals = require('../../internals');
//faster than str += " "
var StringBuffer = function() {
    this.buffer = [];
};
StringBuffer.prototype.append = function(string) {
    this.buffer.push(string);
    return this;
};
StringBuffer.prototype.toString = function() {
    return this.buffer.join("");
};
var OBJWriter = function() {
    this.VERSION = "0.3";
    this.__stringBuffer = new StringBuffer();
    this.objStream = undefined;
    this.__filename = "objwriter.obj";
    this._numVerticesWritten = 0;
    this._numNormalsWritten = 0;
};
OBJWriter.prototype = {
    /**
		 * begin saving
		 * @param {WritableStream | String} [stream] stream can be a node.js WritableStream, or it can be a filename or undefined
		 */ beginSave: function(stream) {
        if (typeof stream == 'string') ;
        else if (internals.hasProperties(stream, stream.writable)) this.objStream = stream;
        this._handleBeginSave();
    },
    endSave: function() {
        if (this.objStream !== undefined) try {
            this.objStream.destroy();
        } catch (e) {
        }
    },
    face: function(a, b, c) {
        this.__stringBuffer.append("f " + a + " " + b + " " + c + "\n");
    },
    faceList: function() {
        this.__stringBuffer.append("s off \n");
    },
    faceWithNormals: function(a, b, c, na, nb, nc) {
        this.__stringBuffer.append("f " + a + "//" + na + " " + b + "//" + nb + " " + c + "//" + nc + "\n");
    },
    getCurrNormalOffset: function() {
        return this._numNormalsWritten;
    },
    getCurrVertexOffset: function() {
        return this._numVerticesWritten;
    },
    //not in java version
    getOutput: function() {
        return this.__stringBuffer.toString();
    },
    _handleBeginSave: function() {
        this.numVerticesWritten = 0;
        this.numNormalsWrittern = 0;
        this.__stringBuffer.append("# generated by OBJExport (js) v" + this.VERSION + '\n');
    },
    newObject: function(name) {
        this.__stringBuffer.append("o " + name + "\n");
    },
    normal: function(vecN) {
        this.__stringBuffer.append("vn " + vecN.x + " " + vecN.y + " " + vecN.z + "\n");
        this._numNormalsWritten++;
    },
    vertex: function(vecV) {
        this.__stringBuffer.append("v " + vecV.x + " " + vecV.y + " " + vecV.z + "\n");
        this._numVerticesWritten++;
    }
};
module.exports = OBJWriter;

},{"../../internals":"iIw4Q"}],"5UosO":[function(require,module,exports) {
var extend = require('../../internals').extend, VertexSelector = require('./VertexSelector');
/**
 * @class
 * @member toxi
 * @augments toxi.VertexSelector
 */ var PlaneSelector = function(mesh, plane, classifier, tolerance) {
    VertexSelector.apply(this, [
        mesh
    ]);
    this.plane = plane;
    this.classifier = classifier;
    this.tolerances = tolerance === undefined ? 0.0001 : tolerance;
};
extend(PlaneSelector, VertexSelector);
PlaneSelector.prototype.selectVertices = function() {
    this.clearSelection();
    var verts = this.mesh.getVertices();
    var l = verts.length;
    for(var i = 0; i < l; i++){
        var v = verts[i];
        if (this.plane.classifyPoint(v, this.tolerance) == this.classifier) this.selection.add(v);
    }
    return this;
};
module.exports = PlaneSelector;

},{"../../internals":"iIw4Q","./VertexSelector":"hxywo"}],"lznvS":[function(require,module,exports) {
module.exports = require('../Sphere').SphereFunction;

},{"../Sphere":"bxMAT"}],"hlvi0":[function(require,module,exports) {
var mathUtils = require('../../math/mathUtils');
/**
 * @class Spherical harmonics surface evaluator based on code by Paul Bourke:
 * http://local.wasp.uwa.edu.au/~pbourke/geometry/sphericalh/
 * @member toxi
 */ var SphericalHarmonics = function(m) {
    this.m = m;
};
SphericalHarmonics.prototype = {
    // toxiclibs - FIXME check where flipped vertex order is coming from sometimes
    computeVertexFor: function(p, phi, theta) {
        var r = 0;
        r += Math.pow(mathUtils.sin(this.m[0] * theta), this.m[1]);
        r += Math.pow(mathUtils.cos(this.m[2] * theta), this.m[3]);
        r += Math.pow(mathUtils.sin(this.m[4] * phi), this.m[5]);
        r += Math.pow(mathUtils.cos(this.m[6] * phi), this.m[7]);
        var sinTheta = mathUtils.sin(theta);
        p.x = r * sinTheta * mathUtils.cos(phi);
        p.y = r * mathUtils.cos(theta);
        p.z = r * sinTheta * mathUtils.sin(phi);
        return p;
    },
    getPhiRange: function() {
        return mathUtils.TWO_PI;
    },
    getPhiResolutionLimit: function(res) {
        return res;
    },
    getThetaRange: function() {
        return mathUtils.PI;
    },
    getThetaResolutionLimit: function(res) {
        return res;
    }
};
module.exports = SphericalHarmonics;

},{"../../math/mathUtils":"bF4PI"}],"3cwd2":[function(require,module,exports) {
module.exports = require('./meshCommon').SurfaceMeshBuilder;

},{"./meshCommon":"1kzZS"}],"hJfMK":[function(require,module,exports) {
var mathUtils = require('../../math/mathUtils');
var TriangleMesh = require('./TriangleMesh');
/**
 * @class
 * @member toxi
 */ var SuperEllipsoid = function(n1, n2) {
    this.p1 = n1;
    this.p2 = n2;
};
SuperEllipsoid.prototype = {
    computeVertexFor: function(p, phi, theta) {
        phi -= mathUtils.HALF_PI;
        var cosPhi = mathUtils.cos(phi), cosTheta = mathUtils.cos(theta), sinPhi = mathUtils.sin(phi), sinTheta = mathUtils.sin(theta);
        var t = mathUtils.sign(cosPhi) * Math.pow(mathUtils.abs(cosPhi), this.p1);
        p.x = t * mathUtils.sign(cosTheta) * Math.pow(Math.abs(cosTheta), this.p2);
        p.y = mathUtils.sign(sinPhi) * Math.pow(Math.abs(sinPhi), this.p1);
        p.z = t * mathUtils.sign(sinTheta) * Math.pow(mathUtils.abs(sinTheta), this.p2);
        return p;
    },
    getPhiRange: function() {
        return mathUtils.TWO_PI;
    },
    getPhiResolutionLimit: function(res) {
        return res / 2;
    },
    getThetaRange: function() {
        return mathUtils.TWO_PI;
    },
    getThetaResolutionLimit: function(res) {
        return res;
    }
};
module.exports = SuperEllipsoid;

},{"../../math/mathUtils":"bF4PI","./TriangleMesh":"b6pcq"}],"kWsI4":[function(require,module,exports) {
/**
 * Implementation of a 2D grid based heightfield with basic intersection
 * features and conversion to {@link TriangleMesh}. The terrain is always
 * located in the XZ plane with the positive Y axis as up vector.
 */ //toxi.geom.mesh.Terrain is in meshCommon to avoid circular dependencies
module.exports = require('./meshCommon').Terrain;

},{"./meshCommon":"1kzZS"}],"aEsj3":[function(require,module,exports) {
module.exports = require('./meshCommon').WETriangleMesh;

},{"./meshCommon":"1kzZS"}],"18WGa":[function(require,module,exports) {
/**
 * @class
 * Helper class for the spline3d classes in this package. Used to compute
 * subdivision points of the curve.
 * @member toxi
 * @param {Number} res number of subdivision steps between each control point of the spline3d
 */ var BernsteinPolynomial = function(res) {
    this.resolution = res;
    var b0 = [], b1 = [], b2 = [], b3 = [];
    var t = 0;
    var dt = 1 / (res - 1);
    for(var i = 0; i < res; i++){
        var t1 = 1 - t;
        var t12 = t1 * t1;
        var t2 = t * t;
        b0[i] = t1 * t12;
        b1[i] = 3 * t * t12;
        b2[i] = 3 * t2 * t1;
        b3[i] = t * t2;
        t += dt;
    }
    this.b0 = b0;
    this.b1 = b1;
    this.b2 = b2;
    this.b3 = b3;
};
module.exports = BernsteinPolynomial;

},{}],"7rYzr":[function(require,module,exports) {
module.exports = require('./Ellipse').Circle;

},{"./Ellipse":"9H9Du"}],"9H9Du":[function(require,module,exports) {
var extend = require('../internals/extend'), has = require('../internals/has'), is = require('../internals/is'), mathUtils = require('../math/mathUtils'), Vec2D = require('./Vec2D');
//declared in this module
var Ellipse, Circle;
/**
 * @class defines a 2D ellipse and provides several utility methods for it.
 * @member toxi
 * @augments Vec2D
 */ Ellipse = function(a, b, c, d) {
    this.radius = new Vec2D();
    if (arguments.length === 0) {
        Vec2D.apply(this, [
            0,
            0
        ]);
        this.setRadii(1, 1);
    } else if (has.XY(a)) {
        Vec2D.apply(this, [
            a.x,
            a.y
        ]);
        if (has.XY(b)) this.setRadii(b.x, b.y);
        else this.setRadii(b, c);
    } else if (d === undefined) {
        if (c === undefined) {
            Vec2D.call(this, 0, 0);
            this.setRadii(a, b);
        } else {
            Vec2D.call(this, a, b);
            this.setRadii(c, c);
        }
    } else {
        Vec2D.call(this, a, b);
        this.setRadii(c, d);
    }
};
extend(Ellipse, Vec2D);
Ellipse.prototype.containsPoint = function(p) {
    // Immediately reject points outside the containing rectangle
    if (mathUtils.abs(p.x - this.x) > this.radius.x || mathUtils.abs(p.y - this.y) > this.radius.y) return false;
    var foci = this.getFoci();
    return p.distanceTo(foci[0]) + p.distanceTo(foci[1]) < 2 * mathUtils.max(this.radius.x, this.radius.y);
};
/**
 * Computes the area covered by the ellipse.
 */ Ellipse.prototype.getArea = function() {
    return mathUtils.PI * this.radius.x * this.radius.y;
};
/**
 * Computes the approximate circumference of the ellipse, using this
 * equation: <code>2 * PI * sqrt(1/2 * (rx*rx+ry*ry))</code>.
 *
 * The precise value is an infinite series elliptical integral, but the
 * approximation comes sufficiently close. See Wikipedia for more details:
 *
 * http://en.wikipedia.org/wiki/Ellipse
 *
 * @return circumference
 */ Ellipse.prototype.getCircumference = function() {
    // wikipedia solution:
    // return (float) (MathUtils.PI * (3 * (radius.x + radius.y) - Math
    // .sqrt((3 * radius.x + radius.y) * (radius.x + 3 * radius.y))));
    return Math.sqrt(0.5 * this.radius.magSquared()) * mathUtils.TWO_PI;
};
/**
 * @return the focus
 */ Ellipse.prototype.getFoci = function() {
    if (this.radius.x > this.radius.y) return [
        this.sub(this.focus, 0),
        this.add(this.focus, 0)
    ];
    return [
        this.sub(0, this.focus),
        this.add(0, this.focus)
    ];
};
/**
 * @return the 2 radii of the ellipse as a Vec2D
 */ Ellipse.prototype.getRadii = function() {
    return this.radius.copy();
};
/**
 * Sets the radii of the ellipse to the new values.
 *
 * @param rx
 * @param ry
 * @return itself
 */ Ellipse.prototype.setRadii = function(rx, ry) {
    if (has.XY(rx)) {
        ry = rx.y;
        rx = rx.x;
    }
    this.radius.set(rx, ry);
    if (this.radius.x > this.radius.y) this.focus = Math.sqrt(this.radius.x * this.radius.x - this.radius.y * this.radius.y);
    else this.focus = Math.sqrt(this.radius.y * this.radius.y - this.radius.x * this.radius.x);
    return this;
};
/**
 * Creates a {@link Polygon2D} instance of the ellipse sampling it at the
 * given resolution.
 *
 * @param res
 *            number of steps
 * @return ellipse as polygon
 */ Ellipse.prototype.toPolygon2D = function(res) {
    var Polygon2D = require('./Polygon2D');
    var poly = new Polygon2D();
    var step = mathUtils.TWO_PI / res;
    for(var i = 0; i < res; i++){
        var v = Vec2D.fromTheta(i * step).scaleSelf(this.radius).addSelf(this);
        poly.add(v);
    }
    return poly;
};
exports = module.exports = Ellipse;
/**
 * Circle
 * @class This class overrides {@link Ellipse} to define a 2D circle and provides
 * several utility methods for it, including factory methods to construct
 * circles from points.
 * @member toxi
 * @augments Ellipse
 */ Circle = function(a, b, c) {
    if (arguments.length == 1) {
        if (is.Circle(a)) Ellipse.apply(this, [
            a,
            a.radius.x
        ]);
        else Ellipse.apply(this, [
            0,
            0,
            a
        ]);
    } else if (arguments.length == 2) Ellipse.apply(this, [
        a,
        b
    ]);
    else Ellipse.apply(this, [
        a,
        b,
        c,
        c
    ]);
};
extend(Circle, Ellipse);
/**
 * Factory method to construct a circle which has the two given points lying
 * on its perimeter. If the points are coincident, the circle will have a
 * radius of zero.
 *
 * @param p1
 * @param p2
 * @return new circle instance
 */ Circle.from2Points = function(p1, p2) {
    var m = p1.interpolateTo(p2, 0.5);
    var distanceTo = m.distanceTo(p1);
    return new Circle(m, distanceTo);
};
/**
 * Factory method to construct a circle which has the three given points
 * lying on its perimeter. The function returns null, if the 3 points are
 * co-linear (in which case it's impossible to find a circle).
 *
 * Based on CPP code by Paul Bourke:
 * http://local.wasp.uwa.edu.au/~pbourke/geometry/circlefrom3/
 *
 * @param p1
 * @param p2
 * @param p3
 * @return new circle instance or null
 */ Circle.from3Points = function(p1, p2, p3) {
    var circle, deltaA = p2.sub(p1), deltaB = p3.sub(p2), centroid, radius;
    if (mathUtils.abs(deltaA.x) <= 0.0000001 && mathUtils.abs(deltaB.y) <= 0.0000001) {
        centroid = new Vec2D(p2.x + p3.x, p1.y + p2.y).scaleSelf(0.5);
        radius = centroid.distanceTo(p1);
        circle = new Circle(centroid, radius);
    } else {
        var aSlope = deltaA.y / deltaA.x;
        var bSlope = deltaB.y / deltaB.x;
        if (mathUtils.abs(aSlope - bSlope) > 0.0000001 && aSlope !== 0) {
            var x = (aSlope * bSlope * (p1.y - p3.y) + bSlope * (p1.x + p2.x) - aSlope * (p2.x + p3.x)) / (2 * (bSlope - aSlope));
            var y = -(x - (p1.x + p2.x) / 2) / aSlope + (p1.y + p2.y) / 2;
            centroid = new Vec2D(x, y);
            radius = centroid.distanceTo(p1);
            circle = new Circle(centroid, radius);
        }
    }
    return circle;
};
Circle.newBoundingCircle = function(vertices) {
    var origin = new Vec2D();
    var maxD = 0;
    var i = 0;
    var l = vertices.length;
    for(; i < l; i++)origin.addSelf(vertices[i]);
    origin.scaleSelf(1 / vertices.length);
    for(i = 0; i < l; i++){
        var d = origin.distanceToSquared(vertices[i]);
        if (d > maxD) maxD = d;
    }
    return new Circle(origin, Math.sqrt(maxD));
};
Circle.prototype.containsPoint = function(p) {
    return this.distanceToSquared(p) <= this.radius.x * this.radius.x;
};
Circle.prototype.getCircumference = function() {
    return mathUtils.TWO_PI * this.radius.x;
};
Circle.prototype.getRadius = function() {
    return this.radius.x;
};
Circle.prototype.getTangentPoints = function(p) {
    var m = this.interpolateTo(p, 0.5);
    return this.intersectsCircle(new Circle(m, m.distanceTo(p)));
};
Circle.prototype.intersectsCircle = function(c) {
    var res, delta = c.sub(this), d = delta.magnitude(), r1 = this.radius.x, r2 = c.radius.x;
    if (d <= r1 + r2 && d >= Math.abs(r1 - r2)) {
        var a = (r1 * r1 - r2 * r2 + d * d) / (2 * d);
        d = 1 / d;
        var p = this.add(delta.scale(a * d));
        var h = Math.sqrt(r1 * r1 - a * a);
        delta.perpendicular().scaleSelf(h * d);
        var i1 = p.add(delta);
        var i2 = p.sub(delta);
        res = [
            i1,
            i2
        ];
    }
    return res;
};
Circle.prototype.setRadius = function(r) {
    this.setRadii(r, r);
    return this;
};
exports.Circle = Circle;

},{"../internals/extend":"2ldIH","../internals/has":"2hvR2","../internals/is":"4G2iR","../math/mathUtils":"bF4PI","./Vec2D":"hVtPc","./Polygon2D":"d9pnk"}],"d9pnk":[function(require,module,exports) {
var MathUtils = require('../math/mathUtils');
var Vec2D = require('./Vec2D');
var Line2D = require('./Line2D');
var Circle1 = require('./Circle');
var Rect1 = require('./Rect');
var TriangleMesh = require('./mesh/TriangleMesh');
var has = require('../internals/has');
var is = require('../internals/is');
/**
    * @class
    * @member toxi
    * @param {Array<Vec2D>|Vec2D...} [points] optionally provide points for the polygon
    */ var Polygon2D = function() {
    this.vertices = [];
    var i, l;
    if (arguments.length > 1) for(i = 0, l = arguments.length; i < l; i++)this.add(arguments[i].copy());
    else if (arguments.length == 1) {
        var arg = arguments[0];
        if (is.Array(arg)) for(i = 0, l = arg.length; i < l; i++)this.add(arg[i].copy());
    } //otherwise no args were passed, and thats ok
};
Polygon2D.prototype = {
    constructor: Polygon2D,
    add: function(p) {
        //accept an array also
        if (is.Array(p)) {
            for(var i = 0, l = p.length; i < l; i++)if (this.vertices.indexOf(p[i]) < 0) this.vertices.push(p[i]);
            return;
        }
        if (this.vertices.indexOf(p) < 0) this.vertices.push(p);
    },
    /**
        * centers the polygon so that its new centroid is at the given point
        * @param {Vec2D} [origin]
        * @return itself
        */ center: function(origin) {
        var centroid = this.getCentroid();
        var delta = origin !== undefined ? origin.sub(centroid) : centroid.invert();
        for(var i = 0, l = this.vertices.length; i < l; i++)this.vertices[i].addSelf(delta);
        return this;
    },
    containsPoint: function(p) {
        var num = this.vertices.length, i = 0, j = num - 1, oddNodes = false, px = p.x, py = p.y;
        for(i = 0; i < num; i++){
            var vi = this.vertices[i], vj = this.vertices[j];
            if (vi.y < py && vj.y >= py || vj.y < py && vi.y >= py) {
                if (vi.x + (py - vi.y) / (vj.y - vi.y) * (vj.x - vi.x) < px) oddNodes = !oddNodes;
            }
            j = i;
        }
        return oddNodes;
    },
    containsPolygon: function(poly) {
        for(var i = 0, num = poly.vertices.length; i < num; i++){
            if (!this.containsPoint(poly.vertices[i])) return false;
        }
        return true;
    },
    copy: function() {
        return new Polygon2D(this.vertices);
    },
    flipVertexOrder: function() {
        this.vertices.reverse();
        return this;
    },
    /**
        * Returns the vertex at the given index. This function follows Python
        * convention, in that if the index is negative, it is considered relative
        * to the list end. Therefore the vertex at index -1 is the last vertex in
        * the list.
        * @param {Number} i index
        * @return vertex
        */ get: function(i) {
        if (i < 0) i += this.vertices.length;
        return this.vertices[i];
    },
    /**
        * Computes the length of this polygon's apothem. This will only be valid if
        * the polygon is regular. More info: http://en.wikipedia.org/wiki/Apothem
        * @return apothem length
        */ getApothem: function() {
        return this.vertices[0].interpolateTo(this.vertices[1], 0.5).distanceTo(this.getCentroid());
    },
    getArea: function() {
        var area = 0, numPoints = this.vertices.length;
        for(var i = 0; i < numPoints; i++){
            var a = this.vertices[i], b = this.vertices[(i + 1) % numPoints];
            area += a.x * b.y;
            area -= a.y * b.x;
        }
        area *= 0.5;
        return area;
    },
    getBoundingCircle: function() {
        var Circle = require('./Circle');
        return Circle.newBoundingCircle(this.vertices);
    },
    getBounds: function() {
        var Rect = require('./Rect');
        return Rect.getBoundingRect(this.vertices);
    },
    getCentroid: function() {
        var res = new Vec2D(), numPoints = this.vertices.length;
        for(var i = 0; i < numPoints; i++){
            var a = this.vertices[i], b = this.vertices[(i + 1) % numPoints], factor = a.x * b.y - b.x * a.y;
            res.x += (a.x + b.x) * factor;
            res.y += (a.y + b.y) * factor;
        }
        return res.scale(1 / (this.getArea() * 6));
    },
    getCircumference: function() {
        var circ = 0;
        for(var i = 0, num = this.vertices.length; i < num; i++)circ += this.vertices[i].distanceTo(this.vertices[(i + 1) % num]);
        return circ;
    },
    getClosestPointTo: function(p) {
        var minD = Number.MAX_VALUE;
        var q, c, d;
        var edges = this.getEdges();
        for(var i = 0, len = edges.length; i < len; i++){
            c = edges[i].closestPointTo(p);
            d = c.distanceToSquared(p);
            if (d < minD) {
                q = c;
                minD = d;
            }
        }
        return q;
    },
    getClosestVertexTo: function(p) {
        var minD = Number.MAX_VALUE;
        var q, d, i = 0, len = this.vertices.length;
        for(; i < len; i++){
            d = this.vertices[i].distanceToSquared(p);
            if (d < minD) {
                q = this.vertices[i];
                minD = d;
            }
        }
        return q;
    },
    getEdges: function() {
        var num = this.vertices.length, edges = [];
        for(var i = 0; i < num; i++)edges[i] = new Line2D(this.vertices[i], this.vertices[(i + 1) % num]);
        return edges;
    },
    //@deprecated
    getNumPoints: function() {
        return this.getNumVertices();
    },
    getNumVertices: function() {
        return this.vertices.length;
    },
    getRandomPoint: function() {
        var edges = this.getEdges();
        var numEdges = edges.length;
        var ea = edges[MathUtils.random(numEdges)], eb;
        while(eb === undefined || eb.equals(ea))eb = edges[MathUtils.random(numEdges)];
        //pick a random point on edge A
        var p = ea.a.interpolateTo(ea.b, Math.random());
        //then randomly interpolate to another point on b
        return p.interpolateToSelf(eb.a.interpolateTo(eb.b, Math.random()), Math.random());
    },
    /**
        * Repeatedly inserts vertices as mid points of the longest edges until the
        * new vertex count is reached.
        * @param {Number} count new vertex count
        * @return itself
        */ increaseVertexCount: function(count) {
        var num = this.vertices.length, longestID = 0, maxD = 0, i = 0, d, m;
        while(num < count){
            //find longest edge
            longestID = 0;
            maxD = 0;
            for(i = 0; i < num; i++){
                d = this.vertices[i].distanceToSquared(this.vertices[(i + 1) % num]);
                if (d > maxD) {
                    longestID = i;
                    maxD = d;
                }
            }
            //insert mid point of longest segment
            m = this.vertices[longestID].add(this.vertices[(longestID + 1) % num]).scaleSelf(0.5);
            //push this into the array inbetween the 2 points
            this.vertices.splice(longestID + 1, 0, m);
            num++;
        }
        return this;
    },
    intersectsPolygon: function(poly) {
        if (!this.containsPolygon(poly)) {
            var edges = this.getEdges();
            var pedges = poly.getEdges();
            for(var i = 0, n = edges.length; i < n; i++)for(var j = 0, m = pedges.length, e = edges[i]; j < m; j++){
                if (e.intersectLine(pedges[j]).getType() == Line2D.LineIntersection.Type.INTERSECTING) return true;
            }
            return false;
        } else return true;
    },
    isClockwise: function() {
        return this.getArea() > 0;
    },
    /**
        * Checks if the polygon is convex.
        * @return true, if convex.
        */ isConvex: function() {
        var isPositive = false, num = this.vertices.length, prev, next, d0, d1, newIsP;
        for(var i = 0; i < num; i++){
            prev = i === 0 ? num - 1 : i - 1;
            next = i === num - 1 ? 0 : i + 1;
            d0 = this.vertices[i].sub(this.vertices[prev]);
            d1 = this.vertices[next].sub(this.vertices[i]);
            newIsP = d0.cross(d1) > 0;
            if (i === 0) isPositive = true;
            else if (isPositive != newIsP) return false;
        }
        return true;
    },
    /**
        * Given the sequentially connected points p1, p2, p3, this function returns
        * a bevel-offset replacement for point p2.
        *
        * Note: If vectors p1->p2 and p2->p3 are exactly 180 degrees opposed, or if
        * either segment is zero then no offset will be applied.
        *
        * @param x1
        * @param y1
        * @param x2
        * @param y2
        * @param x3
        * @param y3
        * @param distance
        * @param out
        *
        * @see http://alienryderflex.com/polygon_inset/
        */ _offsetCorner: function(x1, y1, x2, y2, x3, y3, distance, out) {
        var c1 = x2, d1 = y2, c2 = x2, d2 = y2;
        var dx1, dy1, dist1, dx2, dy2, dist2, insetX, insetY;
        dx1 = x2 - x1;
        dy1 = y2 - y1;
        dist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
        dx2 = x3 - x2;
        dy2 = y3 - y2;
        dist2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
        if (dist1 < MathUtils.EPS || dist2 < MathUtils.EPS) return;
        dist1 = distance / dist1;
        dist2 = distance / dist2;
        insetX = dy1 * dist1;
        insetY = -dx1 * dist1;
        x1 += insetX;
        c1 += insetX;
        y1 += insetY;
        d1 += insetY;
        insetX = dy2 * dist2;
        insetY = -dx2 * dist2;
        x3 += insetX;
        c2 += insetX;
        y3 += insetY;
        d2 += insetY;
        if (c1 === c2 && d1 === d2) {
            out.set(c1, d1);
            return;
        }
        var l1 = new Line2D(new Vec2D(x1, y1), new Vec2D(c1, d1)), l2 = new Line2D(new Vec2D(c2, d2), new Vec2D(x3, y3)), isec = l1.intersectLine(l2), ipos = isec.getPos();
        if (ipos !== null || ipos !== undefined) out.set(ipos);
    },
    /**
        * Moves each line segment of the polygon in/outward perpendicular by the
        * given distance. New line segments and polygon vertices are created by
        * computing the intersection points of the displaced segments. Choosing an
        * too large displacement amount will result in deformation/undefined
        * behavior with various self intersections. Should that happen, please try
        * to clean up the shape using the {@link #toOutline()} method.
        *
        * @param distance
        *            offset/inset distance (negative for inset)
        * @return itself
        */ offsetShape: function(distance) {
        var v = this.vertices;
        var num = v.length - 1;
        if (num > 1) {
            var startX = v[0].x, startY = v[0].y, c = v[num].x, d = v[num].y, e = startX, f = startY, a, b;
            for(var i = 0; i < num; i++){
                a = c;
                b = d;
                c = e;
                d = f;
                e = v[i + 1].x;
                f = v[i + 1].y;
                this._offsetCorner(a, b, c, d, e, f, distance, v[i]);
            }
            this._offsetCorner(c, d, e, f, startX, startY, distance, v[num]);
        }
        return this;
    },
    /**
        * Reduces the number of vertices in the polygon based on the given minimum
        * edge length. Only vertices with at least this distance between them will
        * be kept.
        *
        * @param minEdgeLen
        * @return itself
        */ reduceVertices: function(minEdgeLen) {
        minEdgeLen *= minEdgeLen;
        var vs = this.vertices, reduced = [], prev = vs[0], num = vs.length - 1, vec;
        reduced.push(prev);
        for(var i = 0; i < num; i++){
            vec = vs[i];
            if (prev.distanceToSquared(vec) >= minEdgeLen) {
                reduced.push(vec);
                prev = vec;
            }
        }
        if (vs[0].distanceToSquared(vs[num]) >= minEdgeLen) reduced.push(vs[num]);
        this.vertices = reduced;
        return this;
    },
    /**
        * Removes duplicate vertices from the polygon. Only successive points are
        * recognized as duplicates.
        * @param {Number} tolerance snap distance for finding duplicates
        * @return itself
        */ removeDuplicates: function(tolerance) {
        //if tolerance is 0, it will be faster to just use 'equals' method
        var equals = tolerance ? 'equalsWithTolerance' : 'equals';
        var p, prev, i = 0, num = this.vertices.length;
        var last;
        for(; i < num; i++){
            p = this.vertices[i];
            //if its the 'equals' method tolerance will just be ingored
            if (p[equals](prev, tolerance)) {
                //remove from array, step back counter
                this.vertices.splice(i, 1);
                i--;
                num--;
            } else prev = p;
        }
        num = this.vertices.length;
        if (num > 0) {
            last = this.vertices[num - 1];
            if (last[equals](this.vertices[0], tolerance)) this.vertices.splice(num - 1, 1);
        }
        return this;
    },
    rotate: function(theta) {
        for(var i = 0, num = this.vertices.length; i < num; i++)this.vertices[i].rotate(theta);
        return this;
    },
    scale: function(x, y) {
        if (arguments.length == 1) {
            var arg = arguments[0];
            if (has.XY(arg)) {
                x = arg.x;
                y = arg.y;
            } else {
                // uniform scale
                x = arg;
                y = arg;
            }
        } else if (arguments.length == 2) {
            x = arguments[0];
            y = arguments[1];
        } else throw "Invalid argument(s) passed.";
        for(var i = 0, num = this.vertices.length; i < num; i++)this.vertices[i].scaleSelf(x, y);
        return this;
    },
    scaleSize: function(x, y) {
        var centroid;
        if (arguments.length === 1) {
            var arg = arguments[0];
            if (has.XY(arg)) {
                x = arg.x;
                y = arg.y;
            } else {
                //uniform
                x = arg;
                y = arg;
            }
        } else if (arguments.length === 2) {
            x = arguments[0];
            y = arguments[1];
        } else throw new Error('Invalid argument(s) passed.');
        centroid = this.getCentroid();
        for(var i = 0, l = this.vertices.length; i < l; i++){
            var v = this.vertices[i];
            v.subSelf(centroid).scaleSelf(x, y).addSelf(centroid);
        }
        return this;
    },
    smooth: function(amount, baseWeight) {
        var centroid = this.getCentroid();
        var num = this.vertices.length;
        var filtered = [];
        for(var i = 0, j = num - 1, k = 1; i < num; i++){
            var a = this.vertices[i];
            var dir = this.vertices[j].sub(a).addSelf(this.vertices[k].sub(a)).addSelf(a.sub(centroid).scaleSelf(baseWeight));
            filtered.push(a.add(dir.scaleSelf(amount)));
            j++;
            if (j == num) j = 0;
            k++;
            if (k == num) k = 0;
        }
        this.vertices = filtered;
        return this;
    },
    toMesh: function(mesh, centroid2D, extrude) {
        mesh = mesh || new TriangleMesh();
        var num = this.vertices.length;
        centroid2D = centroid2D || this.getCentroid();
        var centroid = centroid2D.to3DXY();
        centroid.z = extrude;
        var bounds = this.getBounds(), boundScale = new Vec2D(1 / bounds.width, 1 / bounds.height), uvC = centroid2D.sub(bounds.getTopLeft()).scaleSelf(boundScale), a, b, uvA, uvB;
        for(var i = 1; i <= num; i++){
            a = this.vertices[i % num];
            b = this.vertices[i - 1];
            uvA = a.sub(bounds.getTopLeft()).scaleSelf(boundScale);
            uvB = b.sub(bounds.getTopLeft()).scaleSelf(boundScale);
            mesh.addFace(centroid, a.to3DXY(), b.to3DXY(), uvC, uvA, uvB);
        }
        return mesh;
    },
    toPolygon2D: function() {
        return this;
    },
    toString: function() {
        var s = "";
        for(var i = 0; i < this.vertices.length; i++){
            s += this.vertices[i];
            if (i < this.vertices.length - 1) s += ", ";
        }
        return s;
    },
    translate: function() {
        var x, y;
        if (arguments.length == 1 && has.XY(arguments[0])) {
            x = arguments[0].x;
            y = arguments[0].y;
        } else if (arguments.length == 2) {
            x = arguments[0];
            y = arguments[1];
        } else throw "Invalid argument(s) passed.";
        for(var i = 0, num = this.vertices.length; i < num; i++)this.vertices[i].addSelf(x, y);
        return this;
    }
};
/**
    * Constructs a new regular polygon from the given base line/edge.
    * @param {Vec2D} baseA left point of the base edge
    * @param {Vec2D} baseB right point of the base edge
    * @param {Number} res number of polygon vertices
    * @return polygon
    */ Polygon2D.fromBaseEdge = function(baseA, baseB, res) {
    var theta = -(MathUtils.PI - MathUtils.PI * (res - 2) / res), dir = baseB.sub(baseA), prev = baseB, poly = new Polygon2D(baseA, baseB), p;
    for(var i = 0; i < res - 1; i++){
        p = prev.add(dir.getRotated(theta * i));
        poly.add(p);
        prev = p;
    }
    return poly;
};
/**
    * Constructs a regular polygon from the given edge length and number of
    * vertices. This automatically computes the radius of the circle the
    * polygon is inscribed in.
    * More information: http://en.wikipedia.org/wiki/Regular_polygon#Radius
    *
    * @param {Number} len desired edge length
    * @param {Number} res number of vertices
    * @return polygon
    */ Polygon2D.fromEdgeLength = function(len, res) {
    var Circle = require('./Circle');
    return new Circle(Polygon2D.getRadiusForEdgeLength(len, res)).toPolygon2D(res);
};
/**
    * Computes the radius of the circle the regular polygon with the desired
    * edge length is inscribed in
    * @param {Number} len edge length
    * @param {Number} res number of polygon vertices
    * @return radius
    */ Polygon2D.getRadiusForEdgeLength = function(len, res) {
    return len / (2 * MathUtils.sin(MathUtils.PI / res));
};
module.exports = Polygon2D;

},{"../math/mathUtils":"bF4PI","./Vec2D":"hVtPc","./Line2D":"2HvSh","./Circle":"7rYzr","./Rect":"7QDy8","./mesh/TriangleMesh":"b6pcq","../internals/has":"2hvR2","../internals/is":"4G2iR"}],"2HvSh":[function(require,module,exports) {
var Ray2D1 = require('./Ray2D'), internals = require('../internals'), mathUtils = require('../math/mathUtils');
/**
 @class
 @member toxi
 */ var Line2D = function(a, b) {
    this.a = a;
    this.b = b;
};
Line2D.prototype = {
    constructor: Line2D,
    /**
     * Computes the dot product of these 2 vectors: line start -> point
     * and the perpendicular line direction if the result is negative.
     *
     * @param {Vec2D} p
     * @return classifier Number
     */ classifyPoint: function(p) {
        var normal = this.b.sub(this.a).perpendicular();
        var d = p.sub(this.a).dot(normal);
        return mathUtils.sign(d);
    },
    /**
    * Computes the closest point on this line to the point given.
    *
    * @param {Vec2D} p point to check against
    * @return closest point on the line
    */ closestPointTo: function(p) {
        var v = this.b.sub(this.a);
        var t = p.sub(this.a).dot(v) / v.magSquared();
        // Check to see if t is beyond the extents of the line segment
        if (t < 0) return this.a.copy();
        else if (t > 1) return this.b.copy();
        // Return the point between 'a' and 'b'
        return this.a.add(v.scaleSelf(t));
    },
    copy: function() {
        return new Line2D(this.a.copy(), this.b.copy());
    },
    distanceToPoint: function(p) {
        return this.closestPointTo(p).distanceTo(p);
    },
    distanceToPointSquared: function(p) {
        return this.closestPointTo(p).distanceToSquared(p);
    },
    equals: function(obj) {
        if (this == obj) return true;
        if (!internals.is.Line2D(obj)) return false;
        var l = obj;
        return (this.a.equals(l.a) || this.a.equals(l.b)) && (this.b.equals(l.b) || this.b.equals(l.a));
    },
    getDirection: function() {
        return this.b.sub(this.a).normalize();
    },
    getHeading: function() {
        return this.b.sub(this.a).heading();
    },
    getLength: function() {
        return this.a.distanceTo(this.b);
    },
    getLengthSquared: function() {
        return this.a.distanceToSquared(this.b);
    },
    getMidPoint: function() {
        return this.a.add(this.b).scaleSelf(0.5);
    },
    getNormal: function() {
        return this.b.sub(this.a).perpendicular();
    },
    getTheta: function() {
        return this.a.angleBetween(this.b, true);
    },
    hasEndPoint: function(p) {
        return this.a.equals(p) || this.b.equals(p);
    },
    /**
    * Computes intersection between this and the given line. The returned value
    * is a {@link LineIntersection} instance and contains both the type of
    * intersection as well as the intersection point (if existing).
    *
    * Based on: http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/
    *
    * @param l
    *            line to intersect with
    * @return intersection result
    */ intersectLine: function(l) {
        var Type = Line2D.LineIntersection.Type;
        var isec, denom = (l.b.y - l.a.y) * (this.b.x - this.a.x) - (l.b.x - l.a.x) * (this.b.y - this.a.y), na = (l.b.x - l.a.x) * (this.a.y - l.a.y) - (l.b.y - l.a.y) * (this.a.x - l.a.x), nb = (this.b.x - this.a.x) * (this.a.y - l.a.y) - (this.b.y - this.a.y) * (this.a.x - l.a.x);
        if (denom !== 0) {
            var ua = na / denom, ub = nb / denom, vecI = this.a.interpolateTo(this.b, ua);
            if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) isec = new Line2D.LineIntersection(Type.INTERSECTING, vecI, ua, ub);
            else isec = new Line2D.LineIntersection(Type.NON_INTERSECTING, vecI, ua, ub);
        } else if (na === 0 && nb === 0) {
            if (this.distanceToPoint(l.a) === 0) isec = new Line2D.LineIntersection(Type.COINCIDENT, undefined);
            else isec = new Line2D.LineIntersection(Type.COINCIDENT_NO_INTERSECT, undefined);
        } else isec = new Line2D.LineIntersection(Type.PARALLEL, undefined);
        return isec;
    },
    offsetAndGrowBy: function(offset, scale, ref) {
        var m = this.getMidPoint();
        var d = this.getDirection();
        var n = d.getPerpendicular();
        if (ref !== undefined && m.sub(ref).dot(n) < 0) n.invert();
        n.normalizeTo(offset);
        this.a.addSelf(n);
        this.b.addSelf(n);
        d.scaleSelf(scale);
        this.a.subSelf(d);
        this.b.addSelf(d);
        return this;
    },
    scale: function(scale) {
        var delta = (1 - scale) * 0.5;
        var newA = this.a.interpolateTo(this.b, delta);
        this.b.interpolateToSelf(this.a, delta);
        this.a.set(newA);
        return this;
    },
    set: function(a, b) {
        this.a = a;
        this.b = b;
        return this;
    },
    splitIntoSegments: function(segments, stepLength, addFirst) {
        return Line2D.splitIntoSegments(this.a, this.b, stepLength, segments, addFirst);
    },
    toRay2D: function() {
        var Ray2D = require('./Ray2D');
        return new Ray2D(this.a.copy(), this.b.sub(this.a).normalize());
    }
};
/**
 * Splits the line between A and B into segments of the given length,
 * starting at point A. The tweened points are added to the given result
 * list. The last point added is B itself and hence it is likely that the
 * last segment has a shorter length than the step length requested. The
 * first point (A) can be omitted and not be added to the list if so
 * desired.
 *
 * @param a start point
 * @param b end point (always added to results)
 * @param stepLength desired distance between points
 * @param segments existing array list for results (or a new list, if null)
 * @param addFirst false, if A is NOT to be added to results
 * @return list of result vectors
 */ Line2D.splitIntoSegments = function(a, b, stepLength, segments, addFirst) {
    if (segments === undefined) segments = [];
    if (addFirst) segments.push(a.copy());
    var dist = a.distanceTo(b);
    if (dist > stepLength) {
        var pos = a.copy();
        var step = b.sub(a).limit(stepLength);
        while(dist > stepLength){
            pos.addSelf(step);
            segments.push(pos.copy());
            dist -= stepLength;
        }
    }
    segments.push(b.copy());
    return segments;
};
/**
 * Internal class for LineIntersection
 * @param {Number} type one of the Line2D.LineIntersection.Type
 * @param {Vec2D} pos the intersected point
 * @param {Number} ua coefficient
 * @param {Number} ub coefficient
 */ Line2D.LineIntersection = function(type, pos, ua, ub) {
    this.type = type;
    this.pos = pos;
    this.coeff = [
        ua,
        ub
    ];
};
Line2D.LineIntersection.prototype = {
    getPos: function() {
        return this.pos ? this.pos.copy() : undefined;
    },
    getCoefficients: function() {
        return this.coeff;
    },
    getType: function() {
        return this.type;
    },
    toString: function() {
        return "type: " + this.type + " pos: " + this.pos;
    }
};
Line2D.LineIntersection.Type = {
    COINCIDENT: 0,
    COINCIDENT_NO_INTERSECT: 4,
    PARALLEL: 1,
    NON_INTERSECTING: 2,
    INTERSECTING: 3
};
module.exports = Line2D;

},{"./Ray2D":"k92SH","../internals":"iIw4Q","../math/mathUtils":"bF4PI"}],"k92SH":[function(require,module,exports) {
var extend = require('../internals').extend, Vec2D = require('./Vec2D'), Line2D1 = require('./Line2D');
/**
* Ray2D accepts 2 formats for its constructor
* Option 1:
* @param {Number} x,
* @param {Number} y,
* @param {toxi.geom.Vec2D} direction
*
* Option 2:
* @param {toxi.geom.Vec2D} position
* @param {toxi.geom.Vec2D} direction
*/ var Ray2D = function(a, b, d) {
    var o, dir;
    if (arguments.length == 3) {
        Vec2D.apply(this, [
            a,
            b
        ]);
        this.dir = d.getNormalized();
    } else if (arguments.length == 2) {
        Vec2D.apply(this, [
            a
        ]);
        this.dir = b.getNormalized();
    } else if (arguments.length === 0) {
        Vec2D.apply(this);
        this.dir = Vec2D.Y_AXIS.copy();
    }
};
extend(Ray2D, Vec2D);
Ray2D.prototype.getDirection = function() {
    return this.dir.copy();
};
/**
 * Calculates the distance between the given point and the infinite line
 * coinciding with this ray.
 */ Ray2D.prototype.getDistanceToPoint = function(p) {
    var sp = p.sub(this);
    return sp.distanceTo(this.dir.scale(sp.dot(this.dir)));
};
Ray2D.prototype.getPointAtDistance = function(dist) {
    return this.add(this.dir.scale(dist));
};
/**
 * Uses a normalized copy of the given vector as the ray direction.
 *
 * @param d new direction
 * @return itself
 */ Ray2D.prototype.setDirection = function(d) {
    this.dir.set(d).normalize();
    return this;
};
/**
 * Converts the ray into a 2D Line segment with its start point coinciding
 * with the ray origin and its other end point at the given distance along
 * the ray.
 *
 * @param dist end point distance
 * @return line segment
 */ Ray2D.prototype.toLine2DWithPointAtDistance = function(dist) {
    var Line2D = require('./Line2D');
    return new Line2D(this, this.getPointAtDistance(dist));
};
Ray2D.prototype.toString = function() {
    return "origin: " + Vec2D.prototype.toString.apply(this) + " dir: " + this.dir;
};
module.exports = Ray2D;

},{"../internals":"iIw4Q","./Vec2D":"hVtPc","./Line2D":"2HvSh"}],"7QDy8":[function(require,module,exports) {
var internals = require('../internals'), mathUtils = require('../math/mathUtils'), Vec2D = require('./Vec2D'), Line2D = require('./Line2D');
/**
     * @class
     * @member toxi
     * @param {Number} [x]
     * @param {Number} [y]
     * @param {Number} [width]
     * @param {Number} [height]
     */ var Rect = function(a, b, width, height) {
    if (arguments.length === 2) {
        if (!internals.has.XY(a)) throw new Error("Rect received incorrect parameters");
        else {
            this.x = a.x;
            this.y = a.y;
            this.width = b.x - this.x;
            this.height = b.y - this.y;
        }
    } else if (arguments.length == 4) {
        this.x = a;
        this.y = b;
        this.width = width;
        this.height = height;
    } else if (arguments.length === 1) {
        var o = arguments[0];
        if (internals.has.XYWidthHeight(o)) {
            this.x = o.x;
            this.y = o.y;
            this.width = o.width;
            this.height = o.height;
        }
    } else if (arguments.length > 0) throw new Error("Rect received incorrect parameters");
};
Rect.fromCenterExtent = function(center, extent) {
    return new Rect(center.sub(extent), center.add(extent));
};
Rect.getBoundingRect = function(points) {
    var first = points[0];
    var bounds = new Rect(first.x, first.y, 0, 0);
    for(var i = 1, num = points.length; i < num; i++)bounds.growToContainPoint(points[i]);
    return bounds;
};
Rect.prototype = {
    containsPoint: function(p) {
        var px = p.x;
        var py = p.y;
        if (px < this.x || px >= this.x + this.width) return false;
        if (py < this.y || py >= this.y + this.height) return false;
        return true;
    },
    copy: function() {
        return new Rect(this.x, this.y, this.width, this.height);
    },
    getArea: function() {
        return this.width * this.height;
    },
    getAspect: function() {
        return this.width / this.height;
    },
    getBottom: function() {
        return this.y + this.height;
    },
    getBottomRight: function() {
        return new Vec2D(this.x + this.width, this.y + this.height);
    },
    getCentroid: function() {
        return new Vec2D(this.x + this.width * 0.5, this.y + this.height * 0.5);
    },
    getDimensions: function() {
        return new Vec2D(this.width, this.height);
    },
    getEdge: function(id) {
        var edge;
        switch(id){
            case 0:
                edge = new Line2D(new Vec2D(this.x, this.y), new Vec2D(this.x + this.width, this.y));
                break;
            case 1:
                edge = new Line2D(new Vec2D(this.x + this.width, this.y), new Vec2D(this.x + this.width, this.y + this.height));
                break;
            case 2:
                edge = new Line2D(new Vec2D(this.x, this.y + this.height), new Vec2D(this.x + this.width, this.y + this.height));
                break;
            case 3:
                edge = new Line2D(new Vec2D(this.x, this.y), new Vec2D(this.x, this.y + this.height));
                break;
            default:
                throw new Error("edge ID needs to be 0...3");
        }
        return edge;
    },
    getLeft: function() {
        return this.x;
    },
    getRight: function() {
        return this.x + this.width;
    },
    getTop: function() {
        return this.y;
    },
    getTopLeft: function() {
        return new Vec2D(this.x, this.y);
    },
    growToContainPoint: function(p) {
        if (!this.containsPoint(p)) {
            if (p.x < this.x) {
                this.width = this.getRight() - p.x;
                this.x = p.x;
            } else if (p.x > this.getRight()) this.width = p.x - this.x;
            if (p.y < this.y) {
                this.height = this.getBottom() - p.y;
                this.y = p.y;
            } else if (p.y > this.getBottom()) this.height = p.y - this.y;
        }
        return this;
    },
    intersectsRay: function(ray, minDist, maxDist) {
        //returns Vec2D of point intersection
        var invDir = ray.getDirection().reciprocal();
        var signDirX = invDir.x < 0;
        var signDirY = invDir.y < 0;
        var min = this.getTopLeft();
        var max = this.getBottomRight();
        var bbox = signDirX ? max : min;
        var tmin = (bbox.x - ray.x) * invDir.x;
        bbox = signDirX ? min : max;
        var tmax = (bbox.x - ray.x) * invDir.x;
        bbox = signDirY ? max : min;
        var tymin = (bbox.y - ray.y) * invDir.y;
        bbox = signDirY ? min : max;
        var tymax = (bbox.y - ray.y) * invDir.y;
        if (tmin > tymax || tymin > tmax) return undefined;
        if (tymin > tmin) tmin = tymin;
        if (tymax < tmax) tmax = tymax;
        if (tmin < maxDist && tmax > minDist) return ray.getPointAtDistance(tmin);
        return undefined;
    },
    intersectsRect: function(r) {
        return !(this.x > r.x + r.width || this.x + this.width < r.x || this.y > r.y + r.height || this.y + this.height < r.y);
    },
    scale: function(s) {
        var c = this.getCentroid();
        this.width *= s;
        this.height *= s;
        this.x = c.x - this.width * 0.5;
        this.y = c.y - this.height * 0.5;
        return this;
    },
    set: function(x, y, width, height) {
        if (arguments.length === 1) {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
        } else if (arguments.length === 4) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        } else throw new Error("Rect set() received wrong parameters");
    },
    setDimensions: function(dim) {
        if (arguments.length == 2) dim = {
            x: arguments[0],
            y: arguments[1]
        };
        this.width = dim.x;
        this.height = dim.y;
        return this;
    },
    setPosition: function(pos) {
        this.x = pos.x;
        this.y = pos.y;
        return this;
    },
    toPolygon2D: function() {
        var Polygon2D = require('./Polygon2D');
        var poly = new Polygon2D();
        poly.add(new Vec2D(this.x, this.y));
        poly.add(new Vec2D(this.x + this.width, this.y));
        poly.add(new Vec2D(this.x + this.width, this.y + this.height));
        poly.add(new Vec2D(this.x, this.y + this.height));
        return poly;
    },
    toString: function() {
        return "rect: {x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + "}";
    },
    union: function(r) {
        var tmp = mathUtils.max(this.x + this.width, r.x + r.width);
        this.x = mathUtils.min(this.x, r.x);
        this.width = tmp - this.x;
        tmp = mathUtils.max(this.y + this.height, r.y + r.height);
        this.y = mathUtils.min(this.y, r.y);
        this.height = tmp - this.y;
        return this;
    }
};
module.exports = Rect;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","./Vec2D":"hVtPc","./Line2D":"2HvSh","./Polygon2D":"d9pnk"}],"kOPg8":[function(require,module,exports) {
/**
 @class CircleIntersector
 @member toxi
 */ var CircleIntersector = function(circle) {
    this.circle = circle;
    this.isec = undefined;
};
CircleIntersector.prototype = {
    getIntersectionData: function() {
        return this.isec;
    },
    intersectsRay: function(ray) {
        this.isec.clear();
        var q = circle.sub(ray), distSquared = q.magSquared(), v = q.dot(ray.getDirection()), r = circle.getRadius(), d = r * r - (distSquared - v * v);
        if (d >= 0) {
            this.isec.isIntersection = true;
            this.isec.dist = v - Math.sqrt(d);
            this.isec.pos = ray.getPointAtDistance(isec.dist);
            this.isec.normal = this.isec.pos.sub(this.circle).normalize();
        }
        return this.isec.isIntersection;
    }
};
module.exports = CircleIntersector;

},{}],"4JHEk":[function(require,module,exports) {
var extend = require('../internals').extend, Vec3D = require('./Vec3D'), TriangleMesh = require('./mesh/TriangleMesh');
/**
 * @class A geometric definition of a cone (and cylinder as a special case) with
 * support for mesh creation/representation. The class is currently still
 * incomplete in that it doesn't provide any other features than the
 * construction of a cone shaped mesh.
 * @augments toxi.Vec3D
 * @member toxi
 * @param pos
 *            centre position
 * @param dir
 *            direction vector
 * @param rNorth
 *            radius on the side in the forward direction
 * @param rSouth
 *            radius on the side in the opposite direction
 * @param len
 *            length of the cone
 */ function err(param) {
    throw Error("Missing parameter: " + param);
}
var Cone = function(pos1, dir1, rNorth, rSouth, len) {
    //if its a parameter object
    var self = this;
    if (typeof pos1 === 'object' && arguments.length === 1) process(pos1.pos || pos1.position || new Vec3D(), pos1.dir || pos1.direction || err("direction"), pos1.rNorth || pos1.radiusNorth || err("radiusNorth"), pos1.rSouth || pos1.radiusSouth || err("radiusSouth"), pos1.len || pos1.length || err("length"));
    else process(pos1, dir1, rNorth, rSouth, len);
    function process(pos, dir, radiusNorth, radiusSouth, length) {
        Vec3D.apply(self, [
            pos
        ]);
        self.dir = dir.getNormalized();
        self.radiusNorth = radiusNorth;
        self.radiusSouth = radiusSouth;
        self.length = length;
    }
};
extend(Cone, Vec3D);
Cone.prototype.toMesh = function(args) {
    var opts = {
        mesh: undefined,
        steps: NaN,
        thetaOffset: 0,
        topClosed: true,
        bottomClosed: true
    };
    if (arguments.length == 1) {
        if (typeof arguments[0] == 'object') {
            //##then it was a javascript option-object
            var optionsObject = arguments[0];
            opts.mesh = optionsObject.mesh;
            opts.steps = optionsObject.steps || optionsObject.resolution || optionsObject.res;
            opts.thetaOffset = optionsObject.thetaOffset || opts.thetaOffset;
            opts.topClosed = optionsObject.topClosed || opts.topClosed;
            opts.bottomClosed = optionsObject.bottomClosed || opts.bottomClosed;
        } else opts.steps = arguments[0];
    } else if (arguments.length == 2) {
        opts.steps = arguments[0];
        opts.thetaOffset = arguments[1];
    } else if (arguments.length == 5) {
        opts.mesh = arguments[0];
        opts.steps = arguments[1];
        opts.thetaOffset = arguments[2];
        opts.topClosed = arguments[3];
        opts.bottomClosed = arguments[4];
    }
    var c = this.add(0.01, 0.01, 0.01), n = c.cross(this.dir.getNormalized()).normalize(), halfAxis = this.dir.scale(this.length * 0.5), p = this.sub(halfAxis), q = this.add(halfAxis), south = [], north = [], phi = Math.PI * 2 / opts.steps;
    var i = 0, j = 1;
    for(i = 0; i < opts.steps; i++){
        var theta = i * phi + opts.thetaOffset;
        var nr = n.getRotatedAroundAxis(this.dir, theta);
        south[i] = nr.scale(this.radiusSouth).addSelf(p);
        north[i] = nr.scale(this.radiusNorth).addSelf(q);
    }
    var numV = opts.steps * 2 + 2, numF = opts.steps * 2 + (opts.topClosed ? opts.steps : 0) + (opts.bottomClosed ? opts.steps : 0), mesh = opts.mesh || new TriangleMesh("cone", numV, numF);
    for(i = 0; i < opts.steps; i++, j++){
        if (j == opts.steps) j = 0;
        mesh.addFace(south[i], north[i], south[j], undefined, undefined, undefined, undefined);
        mesh.addFace(south[j], north[i], north[j], undefined, undefined, undefined, undefined);
        if (opts.bottomClosed) mesh.addFace(p, south[i], south[j], undefined, undefined, undefined, undefined);
        if (opts.topClosed) mesh.addFace(north[i], q, north[j], undefined, undefined, undefined, undefined);
    }
    return mesh;
};
module.exports = Cone;

},{"../internals":"iIw4Q","./Vec3D":"2Czl7","./mesh/TriangleMesh":"b6pcq"}],"5vnhk":[function(require,module,exports) {
var Line2D = require('./Line2D');
var Polygon2D = require('./Polygon2D');
var ConvexPolygonClipper = function(polygonBounds) {
    this.setBounds(polygonBounds);
};
ConvexPolygonClipper.prototype = {
    constructor: ConvexPolygonClipper,
    clipPolygon: function(poly) {
        //make a shallow copy to a new array
        var points = poly.vertices.slice(0), //hold clipped points
        clipped, //the boundary edges of the clipping path
        boundsEdges = this.bounds.getEdges(), //the current Line2D of the edge to clip along
        clipEdge, i = 0, j = 0, _tmp, //point classification for testing
        sign, //vectors
        p, q;
        //add the first one as a double-entry
        points.push(points[0]);
        for(i = 0; i < boundsEdges.length; i++){
            clipEdge = boundsEdges[i];
            clipped = [];
            sign = clipEdge.classifyPoint(this.boundsCentroid);
            for(j = 0; j < points.length - 1; j++){
                p = points[j];
                q = points[j + 1];
                if (clipEdge.classifyPoint(p) === sign) {
                    if (clipEdge.classifyPoint(q) === sign) clipped.push(q.copy());
                    else clipped.push(this._getClippedPosOnEdge(clipEdge, p, q));
                    continue;
                }
                if (clipEdge.classifyPoint(q) === sign) {
                    clipped.push(this._getClippedPosOnEdge(clipEdge, p, q));
                    clipped.push(q.copy());
                }
            }
            //if points have been clipped, make sure the last entry is still the same
            //as the first entry
            if (clipped.length > 0 && clipped[0] !== clipped[clipped.length - 1]) clipped.push(clipped[0]);
            _tmp = points;
            points = clipped;
            clipped = _tmp;
        }
        return new Polygon2D(points).removeDuplicates(0.001);
    },
    getBounds: function() {
        return this.bounds;
    },
    _getClippedPosOnEdge: function(clipEdge, p, q) {
        return clipEdge.intersectLine(new Line2D(p, q)).getPos();
    },
    //unused but included to match, source
    _isKnownVertex: function(list, q) {
        for(var i = 0, l = list.length; i < l; i++){
            if (list[i].equalsWitTolerance(q, 0.001)) return true;
        }
        return false;
    },
    setBounds: function(bounds) {
        this.bounds = bounds;
        this.boundsCentroid = this.bounds.getCentroid();
    }
};
module.exports = ConvexPolygonClipper;

},{"./Line2D":"2HvSh","./Polygon2D":"d9pnk"}],"cOadS":[function(require,module,exports) {
var Vec2D = require('./Vec2D');
/**
 * @class
 * @member toxi
 */ var IsectData2D = function(isec) {
    if (isec !== undefined) {
        this.isIntersection = isec.isIntersection;
        this.dist = isec.dist;
        this.pos = isec.pos.copy();
        this.dir = isec.dir.copy();
        this.normal = isec.normal.copy();
    } else this.clear();
};
IsectData2D.prototype = {
    clear: function() {
        this.isIntersection = false;
        this.dist = 0;
        this.pos = new Vec2D();
        this.dir = new Vec2D();
        this.normal = new Vec2D();
    },
    toString: function() {
        var s = "isec: " + this.isIntersection;
        if (this.isIntersection) s += " at:" + this.pos + " dist:" + this.dist + " normal:" + this.normal;
        return s;
    }
};
module.exports = IsectData2D;

},{"./Vec2D":"hVtPc"}],"1r0YT":[function(require,module,exports) {
var Vec3D = require('./vectors').Vec3D, Line3D = require('./Line3D'), hasXYZ = require('../internals/has').XYZ, Iterator = require('../internals/Iterator');
/**
	* construct a LineStrip3D
	* @constructor
	* @param {Vec3D[]} [vertices] optional vertices to start with
	*/ var LineStrip3D = function(vertices) {
    this.vertices = vertices || [];
};
LineStrip3D.prototype = {
    constructor: LineStrip3D,
    /**
		* add a vector to the line-strip, it will always be a copy
		* @param {Vec3D | Number } x either a Vec3D or an x coordinate
		* @param {Number} [y]
		* @param {Number} [z]
		* @return itself
		*/ add: function(x, y, z) {
        if (hasXYZ(x)) //it was 1 param, it was a vector or object
        this.vertices.push(new Vec3D(x));
        else this.vertices.push(new Vec3D(x, y, z));
        return this;
    },
    get: function(i) {
        if (i < 0) i += this.vertices.length;
        return this.vertices[i];
    },
    /**
		* Computes a list of points along the spline which are uniformly separated
		* by the given step distance.
		*
		* @param {Number} step
		* @param {Boolean} [doAddFinalVertex] true by default
		* @return {Vec3D[]} point list
		*/ getDecimatedVertices: function(step, doAddFinalVertex) {
        if (doAddFinalVertex !== false) doAddFinalVertex = true;
        var uniform = [];
        if (this.vertices.length < 3) {
            if (this.vertices.length === 2) {
                new Line3D(this.vertices[0], this.vertices[1]).splitIntoSegments(uniform, step, true);
                if (!doAddFinalVertex) uniform.pop();
            } else return;
        }
        var arcLen = this.getEstimatedArcLength(), delta = step / arcLen, currIdx = 0, currT, t, p, q, frac, i;
        for(t = 0; t < 1; t += delta){
            currT = t * arcLen;
            while(currT >= this.arcLenIndex[currIdx])currIdx++;
            p = this.get(currIdx - 1);
            q = this.get(currIdx);
            frac = (currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]);
            i = p.interpolateTo(q, frac);
            uniform.push(i);
        }
        if (doAddFinalVertex) uniform.push(this.get(-1).copy());
        return uniform;
    },
    getEstimatedArcLength: function() {
        if (this.arcLenIndex === undefined || this.arcLenIndex.length !== this.vertices.length) this.arcLenIndex = [
            0
        ];
        var arcLen = 0, p, q;
        for(var i = 1, l = this.vertices.length; i < l; i++){
            p = this.vertices[i - 1];
            q = this.vertices[i];
            arcLen += p.distanceTo(q);
            //this will start at index 1
            this.arcLenIndex[i] = arcLen;
        }
        return arcLen;
    },
    getSegments: function() {
        var i = 1, num = this.vertices.length, segments = [];
        for(; i < num; i++)segments.push(new Line3D(this.get(i - 1), this.get(i)));
        return segments;
    },
    getVertices: function() {
        return vertices;
    },
    iterator: function() {
        return new Iterator(this.vertices);
    },
    setVertices: function(vertices) {
        this.vertices = vertices;
    }
};
module.exports = LineStrip3D;

},{"./vectors":"aHZPH","./Line3D":"b5COq","../internals/has":"2hvR2","../internals/Iterator":"ahYYm"}],"ftdlJ":[function(require,module,exports) {
var extend = require('../internals').extend, mathUtils = require('../math/mathUtils'), Ray3D = require('./Ray3D'), vectors = require('./vectors'), Vec3D = vectors.Vec3D, Vec2D = vectors.Vec2D, TriangleMesh = require('./mesh/TriangleMesh');
/**
    * @class
    * @member toxi
    * @augments Vec3D
    */ var Plane = function(tri_or_origin, norm) {
    var origin, normal;
    if (arguments.length === 0) {
        origin = new Vec3D();
        normal = Vec3D.Y_AXIS.copy();
    } else if (arguments.length == 1) {
        origin = arguments[0].computeCentroid();
        normal = arguments[0].computeNormal();
    } else {
        origin = arguments[0];
        normal = arguments[1].getNormalized();
    }
    Vec3D.apply(this, [
        origin
    ]);
    this.normal = normal;
};
extend(Plane, Vec3D);
Plane.Classifier = {
    FRONT: "front",
    BACK: "back",
    ON_PLANE: "on plane"
};
Plane.XY = new Plane(new Vec3D(), Vec3D.Z_AXIS);
Plane.XZ = new Plane(new Vec3D(), Vec3D.Y_AXIS);
Plane.YZ = new Plane(new Vec3D(), Vec3D.X_AXIS);
/**
    * Classifies the relative position of the given point to the plane using
    * the given tolerance.
    * @return One of the 3 classification types: FRONT, BACK, ON_PLANE
    */ Plane.prototype.classifyPoint = function(p, tolerance) {
    var d = this.sub(p).normalize().dot(this.normal);
    if (d < -tolerance) return Plane.Classifier.FRONT;
    else if (d > tolerance) return Plane.Classifier.BACK;
    return Plane.Classifier.ON_PLANE;
};
Plane.prototype.containsPoint = function(p) {
    return this.classifyPoint(p, mathUtils.EPS) == Plane.Classifier.ON_PLANE;
};
Plane.prototype.getDistanceToPoint = function(p) {
    var sn = this.normal.dot(p.sub(this)), sd = this.normal.magSquared(), isec = p.add(this.normal.scale(sn / sd));
    return isec.distanceTo(p);
};
Plane.prototype.getIntersectionWithRay = function(r) {
    var denom = this.normal.dot(r.getDirection()), u;
    if (denom > mathUtils.EPS) {
        u = this.normal.dot(this.sub(r)) / denom;
        return r.getPointAtDistance(u);
    } else return undefined;
};
Plane.prototype.getProjectedPoint = function(p) {
    var dir, proj;
    if (this.normal.dot(this.sub(p)) < 0) dir = this.normal.getInverted();
    else dir = this.normal;
    proj = new Ray3D(p, dir).getPointAtDistance(this.getDistanceToPoint(p));
    return proj;
};
/**
    * Calculates the distance of the vector to the given plane in the specified
    * direction. A plane is specified by a 3D point and a normal vector
    * perpendicular to the plane. Normalized directional vectors expected (for
    * rayDir and planeNormal).
    *
    * @param {Ray3D} ray intersection ray
    * @return {Number} distance to plane in world units, -1 if no intersection.
    */ Plane.prototype.intersectRayDistance = function(ray) {
    var d = this.normal.dot(this), numer = this.normal.dot(ray) + d, denom = this.normal.dot(ray.dir);
    //normal is orthogonal to vector, cant intersect
    if (mathUtils.abs(denom) < mathUtils.EPS) return -1;
    return -(numer / denom);
};
/**
    * Creates a TriangleMesh representation of the plane as a finite, squared
    * quad of the requested size, centred around the current plane point.
    * @param {TriangleMesh} mesh (optional)
    * @param size desired edge length
    * @return mesh
    */ Plane.prototype.toMesh = function(mesh, size) {
    if (arguments.length === 1 && typeof arguments[0] == 'number') {
        size = mesh;
        mesh = null;
    }
    mesh = mesh || new TriangleMesh("plane", 4, 2);
    var p = this.equalsWithTolerance(Vec3D.ZERO, 0.01) ? this.add(0.01, 0.01, 0.01) : this;
    size *= 0.5;
    var n = p.cross(this.normal).normalizeTo(size), m = n.cross(this.normal).normalizeTo(size), a = this.add(n).addSelf(m), b = this.add(n).subSelf(m), c = this.sub(n).subSelf(m), d = this.sub(n).addSelf(m);
    mesh.addFace(a, d, b, undefined, undefined, undefined, undefined);
    mesh.addFace(b, d, c, undefined, undefined, undefined, undefined);
    return mesh;
};
module.exports = Plane;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","./Ray3D":"6rIwI","./vectors":"aHZPH","./mesh/TriangleMesh":"b6pcq"}],"4HdDQ":[function(require,module,exports) {
var IsectData3D = require('./IsectData3D'), mathUtils = require('../math/mathUtils'), Ray3DIntersector;
/**
 * @class
 * @member toxi
 */ Ray3DIntersector = function(ray) {
    this.ray = ray;
    this.isec = new IsectData3D();
};
Ray3DIntersector.prototype = {
    getIntersectionData: function() {
        return this.isec;
    },
    intersectsRay: function(other) {
        var n = this.ray.dir.cross(other.dir);
        var sr = this.ray.sub(other);
        var absX = mathUtils.abs(n.x);
        var absY = mathUtils.abs(n.y);
        var absZ = mathUtils.abs(n.z);
        var t;
        if (absZ > absX && absZ > absY) t = (sr.x * other.dir.y - sr.y * other.dir.x) / n.z;
        else if (absX > absY) t = (sr.y * other.dir.z - sr.z * other.dir.y) / n.x;
        else t = (sr.z * other.dir.x - sr.x * other.dir.z) / n.y;
        this.isec.isIntersection = t <= mathUtils.EPS && !isFinite(t);
        this.isec.pos = this.ray.getPointAtDistance(-t);
        return this.isec.isIntersection;
    }
};
module.exports = Ray3DIntersector;

},{"./IsectData3D":"2LfTk","../math/mathUtils":"bF4PI"}],"f1xbM":[function(require,module,exports) {
var Vec2D = require('./Vec2D');
var is = require('../internals/is');
var BernsteinPolynomial = require('./BernsteinPolynomial');
/**
 * @class
 * @member toxi
 * @param {Vec2D[]} points array of Vec2D's
 * @param {BernsteinPolynomial} [bernsteinPoly]
 */ var Spline2D = function(points, bernsteinPoly, tightness) {
    if (arguments.length === 1 && !is.Array(points) && is.Object(points)) {
        //if its an options object
        bernsteinPoly = bernsteinPoly || points.bernsteinPoly;
        tightness = tightness || points.tightness;
        points = points.points;
    }
    var i = 0, l;
    this.pointList = [];
    if (typeof tightness !== 'number') tightness = Spline2D.DEFAULT_TIGHTNESS;
    this.setTightness(tightness);
    //this may be undefined
    this.bernstein = bernsteinPoly;
    if (points !== undefined) for(i = 0, l = points.length; i < l; i++)this.add(points[i].copy());
    this.coeffA = [];
    this.delta = [];
    this.bi = [];
    for(i = 0; i < this.numP; i++){
        this.coeffA[i] = new Vec2D();
        this.delta[i] = new Vec2D();
        this.bi[i] = 0;
    }
    this.bi = [];
};
Spline2D.prototype = {
    add: function(p) {
        this.pointList.push(p.copy());
        this.numP = this.pointList.length;
        return this;
    },
    computeVertices: function(res) {
        this.updateCoefficients();
        if (res < 1) res = 1;
        res++;
        if (this.bernstein === undefined || this.bernstein.resolution != res) this.bernstein = new BernsteinPolynomial(res);
        var bst = this.bernstein;
        this.findCPoints();
        var deltaP = new Vec2D();
        var deltaQ = new Vec2D();
        res--;
        var verticeCount = (this.numP - 1) * res + 1;
        if (typeof this.vertices == 'undefined' || this.vertices.length != verticeCount) this.vertices = Array.apply(null, Array(verticeCount)).map(function() {
            return new Vec2D();
        });
        var vertexIdx = 0;
        for(var i = 0; i < this.numP - 1; i++){
            var p = this.points[i];
            var q = this.points[i + 1];
            deltaP.x = this.delta[i].x + p.x;
            deltaP.y = this.delta[i].y + p.y;
            deltaQ.x = q.x - this.delta[i + 1].x;
            deltaQ.y = q.y - this.delta[i + 1].y;
            for(var k = 0; k < res; k++){
                var x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] + deltaQ.x * bst.b2[k] + q.x * bst.b3[k];
                var y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] + deltaQ.y * bst.b2[k] + q.y * bst.b3[k];
                this.vertices[vertexIdx].x = x;
                this.vertices[vertexIdx].y = y;
                vertexIdx++;
            }
        }
        this.vertices[vertexIdx].x = this.vertices[vertexIdx - 1].x;
        this.vertices[vertexIdx].y = this.vertices[vertexIdx - 1].y;
        return this.vertices;
    },
    findCPoints: function() {
        this.bi[1] = -0.25;
        var i, p0, p2, d0;
        p0 = this.pointList[0];
        p2 = this.pointList[2];
        d0 = this.delta[0];
        this.coeffA[1].x = (p2.x - p0.x - d0.x) * this.tightness;
        this.coeffA[1].y = (p2.y - p0.y - d0.y) * this.tightness;
        for(i = 2; i < this.numP - 1; i++){
            this.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);
            this.coeffA[i].x = -(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) * this.bi[i];
            this.coeffA[i].y = -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) * this.bi[i];
        }
        for(i = this.numP - 2; i > 0; i--){
            this.delta[i].x = this.coeffA[i].x + this.delta[i + 1].x * this.bi[i];
            this.delta[i].y = this.coeffA[i].y + this.delta[i + 1].y * this.bi[i];
        }
    },
    getDecimatedVertices: function(step, doAddFinalVertex) {
        if (doAddFinalVertex === undefined) doAddFinalVertex = true;
        if (this.vertices === undefined || this.vertices.length < 2) this.computeVertices(Spline2D.DEFAULT_RES);
        var arcLen = this.getEstimatedArcLength();
        var uniform = [];
        var delta = step / arcLen;
        var currIdx = 0;
        for(var t = 0; t < 1; t += delta){
            var currT = t * arcLen;
            while(currT >= this.arcLenIndex[currIdx])currIdx++;
            var p = this.vertices[currIdx - 1];
            var q = this.vertices[currIdx];
            var frac = (currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]);
            var i = p.interpolateTo(q, frac);
            uniform.push(i);
        }
        if (doAddFinalVertex) uniform.push(this.vertices[this.vertices.length - 1]);
        return uniform;
    },
    getEstimatedArcLength: function() {
        var len;
        var arcLen = 0;
        if (this.arcLenIndex === undefined || this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length) {
            this.arcLenIndex = [
                0
            ];
            len = this.vertices.length;
        } else len = this.arcLenIndex.length;
        for(var i = 1; i < len; i++){
            var p = this.vertices[i - 1];
            var q = this.vertices[i];
            arcLen += p.distanceTo(q);
            this.arcLenIndex[i] = arcLen;
        }
        return arcLen;
    },
    getNumPoints: function() {
        return this.numP;
    },
    getPointList: function() {
        return this.pointList;
    },
    getTightness: function() {
        return this.tightness;
    },
    setPointList: function(plist) {
        this.pointList = plist.slice(0);
        return this;
    },
    setTightness: function(tight) {
        this.tightness = tight;
        this.invTightness = 1 / this.tightness;
        return this;
    },
    updateCoefficients: function() {
        this.numP = this.pointList.length;
        if (this.points === undefined || this.points !== undefined && this.points.length != this.numP) {
            this.coeffA = [];
            this.delta = [];
            this.bi = [];
            for(var i = 0; i < this.numP; i++){
                this.coeffA[i] = new Vec2D();
                this.delta[i] = new Vec2D();
            }
            this.setTightness(this.tightness);
        }
        this.points = this.pointList.slice(0);
    }
};
Spline2D.DEFAULT_TIGHTNESS = 0.25;
Spline2D.DEFAULT_RES = 16;
module.exports = Spline2D;

},{"./Vec2D":"hVtPc","../internals/is":"4G2iR","./BernsteinPolynomial":"18WGa"}],"ddHro":[function(require,module,exports) {
var Vec3D = require('./Vec3D');
var is = require('../internals/is');
var BernsteinPolynomial = require('./BernsteinPolynomial');
/**
     * @class
     * @member toxi
     * @param {Vec3D[]} points array of Vec3D's
     * @param {BernsteinPolynomial} [bernsteinPoly]
     */ var Spline3D = function(points, bernsteinPoly, tightness) {
    if (arguments.length === 1 && !is.Array(points) && is.Object(points)) {
        //if its an options object
        bernsteinPoly = bernsteinPoly || points.bernsteinPoly;
        tightness = tightness || points.tightness;
        points = points.points;
    }
    var i = 0, l;
    this.pointList = [];
    if (typeof tightness !== 'number') tightness = Spline3D.DEFAULT_TIGHTNESS;
    this.setTightness(tightness);
    //this may be undefined
    this.bernstein = bernsteinPoly;
    if (points !== undefined) for(i = 0, l = points.length; i < l; i++)this.add(points[i].copy());
    this.coeffA = [];
    this.delta = [];
    this.bi = [];
    for(i = 0; i < this.numP; i++){
        this.coeffA[i] = new Vec3D();
        this.delta[i] = new Vec3D();
        this.bi[i] = 0;
    }
    this.bi = [];
};
Spline3D.prototype = {
    add: function(p) {
        this.pointList.push(p.copy());
        this.numP = this.pointList.length;
        return this;
    },
    computeVertices: function(res) {
        this.updateCoefficients();
        if (res < 1) res = 1;
        res++;
        if (this.bernstein === undefined || this.bernstein.resolution != res) this.bernstein = new BernsteinPolynomial(res);
        var bst = this.bernstein;
        this.vertices = [];
        this.findCPoints();
        var deltaP = new Vec3D();
        var deltaQ = new Vec3D();
        res--;
        for(var i = 0; i < this.numP - 1; i++){
            var p = this.points[i];
            var q = this.points[i + 1];
            deltaP.set(this.delta[i]).addSelf(p);
            deltaQ.set(q).subSelf(this.delta[i + 1]);
            for(var k = 0; k < res; k++){
                var x = p.x * bst.b0[k] + deltaP.x * bst.b1[k] + deltaQ.x * bst.b2[k] + q.x * bst.b3[k];
                var y = p.y * bst.b0[k] + deltaP.y * bst.b1[k] + deltaQ.y * bst.b2[k] + q.y * bst.b3[k];
                var z = p.z * bst.b0[k] + deltaP.z * bst.b1[k] + deltaQ.z * bst.b2[k] + q.z * bst.b3[k];
                this.vertices.push(new Vec3D(x, y, z));
            }
        }
        this.vertices.push(this.points[this.points.length - 1].copy());
        return this.vertices;
    },
    findCPoints: function() {
        this.bi[1] = -0.25;
        var i, p0, p2, d0;
        p0 = this.pointList[0];
        p2 = this.pointList[2];
        d0 = this.delta[0];
        this.coeffA[1].set((p2.x - p0.x - d0.x) * this.tightness, (p2.y - p0.y - d0.y) * this.tightness, (p2.z - p0.z - d0.z) * this.tightness //z
        );
        for(i = 2; i < this.numP - 1; i++){
            this.bi[i] = -1 / (this.invTightness + this.bi[i - 1]);
            this.coeffA[i].set(-(this.points[i + 1].x - this.points[i - 1].x - this.coeffA[i - 1].x) * this.bi[i], -(this.points[i + 1].y - this.points[i - 1].y - this.coeffA[i - 1].y) * this.bi[i], -(this.points[i + 1].z - this.points[i - 1].z - this.coeffA[i - 1].z) * this.bi[i]);
        }
        for(i = this.numP - 2; i > 0; i--)this.delta[i].set(this.coeffA[i].x + this.delta[i + 1].x * this.bi[i], this.coeffA[i].y + this.delta[i + 1].y * this.bi[i], this.coeffA[i].z + this.delta[i + 1].z * this.bi[i]);
    },
    getDecimatedVertices: function(step, doAddFinalVertex) {
        if (doAddFinalVertex === undefined) doAddFinalVertex = true;
        if (this.vertices === undefined || this.vertices.length < 2) this.computeVertices(Spline3D.DEFAULT_RES);
        var arcLen = this.getEstimatedArcLength();
        var uniform = [];
        var delta = step / arcLen;
        var currIdx = 0;
        for(var t = 0; t < 1; t += delta){
            var currT = t * arcLen;
            while(currT >= this.arcLenIndex[currIdx])currIdx++;
            var p = this.vertices[currIdx - 1];
            var q = this.vertices[currIdx];
            var frac = (currT - this.arcLenIndex[currIdx - 1]) / (this.arcLenIndex[currIdx] - this.arcLenIndex[currIdx - 1]);
            var i = p.interpolateTo(q, frac);
            uniform.push(i);
        }
        if (doAddFinalVertex) uniform.push(this.vertices[this.vertices.length - 1]);
        return uniform;
    },
    getEstimatedArcLength: function() {
        var len;
        var arcLen = 0;
        if (this.arcLenIndex === undefined || this.arcLenIndex !== undefined && this.arcLenIndex.length != this.vertices.length) {
            this.arcLenIndex = [
                0
            ];
            len = this.vertices.length;
        } else len = this.arcLenIndex.length;
        for(var i = 1; i < len; i++){
            var p = this.vertices[i - 1];
            var q = this.vertices[i];
            arcLen += p.distanceTo(q);
            this.arcLenIndex[i] = arcLen;
        }
        return arcLen;
    },
    getNumPoints: function() {
        return this.numP;
    },
    getPointList: function() {
        return this.pointList;
    },
    getTightness: function() {
        return this.tightness;
    },
    setPointList: function(plist) {
        this.pointList = plist.slice(0);
        return this;
    },
    setTightness: function(tight) {
        this.tightness = tight;
        this.invTightness = 1 / this.tightness;
        return this;
    },
    updateCoefficients: function() {
        this.numP = this.pointList.length;
        if (this.points === undefined || this.points !== undefined && this.points.length != this.numP) {
            this.coeffA = [];
            this.delta = [];
            this.bi = [];
            for(var i = 0; i < this.numP; i++){
                this.coeffA[i] = new Vec3D();
                this.delta[i] = new Vec3D();
            }
            this.setTightness(this.tightness);
        }
        this.points = this.pointList.slice(0);
    }
};
Spline3D.DEFAULT_TIGHTNESS = 0.25;
Spline3D.DEFAULT_RES = 16;
module.exports = Spline3D;

},{"./Vec3D":"2Czl7","../internals/is":"4G2iR","./BernsteinPolynomial":"18WGa"}],"1wGsx":[function(require,module,exports) {
/**
	* A version of the Sutherland-Hodgeman algorithm to clip 2D polygons optimized
	* for rectangular clipping regions.
	* More information: http://en.wikipedia.org/wiki/Sutherland-Hodgman_algorithm
	*/ var Polygon2D = require('./Polygon2D'), Vec2D = require('./vectors').Vec2D;
//function for finding clipped position on each edge
//faster than a switch
var clippedPos = {
    0: function(b, p1, p2) {
        var x = p1.x + (b.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y);
        return new Vec2D(x, b.y);
    },
    1: function(b, p1, p2) {
        var bx = b.x + b.width;
        var y = p1.y + (bx - p1.x) * (p2.y - p1.y) / (p2.x - p1.x);
        return new Vec2D(bx, y);
    },
    2: function(b, p1, p2) {
        var by = b.y + b.height;
        var x = p1.x + (by - p1.y) * (p2.x - p1.x) / (p2.y - p1.y);
        return new Vec2D(x, by);
    },
    3: function(b, p1, p2) {
        var y = p1.y + (b.x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x);
        return new Vec2D(b.x, y);
    }
};
/**
	 * method for getting the position on the edge
	 * @private
	 * @param {Rect} bounds
	 * @param {Number} edgeID
	 * @param {Vec2D} p1
	 * @param {Vec2D} p2
	 * @returns Vec2D
	 */ var getClippedPosOnEdge = function(bounds, edgeID, p1, p2) {
    return clippedPos[edgeID](bounds, p1, p2);
};
//tests for each edgeID whether the point is within the edge
var insideEdgeConditions = {
    0: function(bounds, p) {
        return p.y >= bounds.y;
    },
    1: function(bounds, p) {
        return p.x < bounds.x + bounds.width;
    },
    2: function(bounds, p) {
        return p.y < bounds.y + bounds.height;
    },
    3: function(bounds, p) {
        return p.x >= bounds.x;
    }
};
/**
	 * @private
	 * @param {Rect} bounds
	 * @param {Vec2D} p
	 * @param {Number} edgeID
	 * @return {Boolean}
	 */ var isInsideEdge = function(bounds, p, edgeID) {
    return insideEdgeConditions[edgeID](bounds, p);
};
/**
	 * SutherlandHodgemanClipper constructor
	 * @param {Rect} bounds
	 */ var SutherlandHodgemanClipper = function(bounds) {
    this.bounds = bounds;
};
SutherlandHodgemanClipper.prototype = {
    constructor: SutherlandHodgemanClipper,
    clipPolygon: function(poly) {
        var points = poly.vertices.slice(0), clipped, edgeID = 0, i = 0, num = points.length - 1, p, q; //next point in loop
        //duplicate the first point ref
        points.push(points[0]);
        for(; edgeID < 4; edgeID++){
            i = 0; //make sure the inner-loop starts over
            num = points.length - 1;
            clipped = []; //new clipped coords for this iteration
            for(; i < num; i++){
                p = points[i];
                q = points[i + 1];
                if (isInsideEdge(this.bounds, p, edgeID)) {
                    if (isInsideEdge(this.bounds, q, edgeID)) clipped.push(q.copy());
                    else clipped.push(getClippedPosOnEdge(this.bounds, edgeID, p, q));
                    continue;
                }
                if (isInsideEdge(this.bounds, q, edgeID)) {
                    clipped.push(getClippedPosOnEdge(this.bounds, edgeID, p, q));
                    clipped.push(q.copy());
                }
            }
            if (clipped.length > 0 && clipped[0] !== clipped[clipped.length - 1]) clipped.push(clipped[0]);
            points = clipped;
        }
        return new Polygon2D(points).removeDuplicates(0.001);
    },
    getBounds: function() {
        return this.bounds;
    },
    //protected + unused in java
    isKnownVertex: function(list, q) {
        for(var i = 0, l = list.length; i < l; i++){
            if (list[i].equalsWithTolerance(q, 0.0001)) return true;
        }
        return false;
    },
    setBounds: function(bounds) {
        this.bounds = bounds;
    }
};
module.exports = SutherlandHodgemanClipper;

},{"./Polygon2D":"d9pnk","./vectors":"aHZPH"}],"kZrbk":[function(require,module,exports) {
var Vec2D = require('./Vec2D'), Line2D = require('./Line2D'), Rect = require('./Rect'), Circle = require('./Circle'), Polygon2D = require('./Polygon2D'), mathUtils = require('../math/mathUtils');
/**
 * @class
 * @member toxi
 * @param {toxi.Vec2D} a
 * @param {toxi.Vec2D} b
 * @param {toxi.Vec2D} c
 */ var Triangle2D = function(_a, _b, _c) {
    if (arguments.length === 3) {
        this.a = _a.copy();
        this.b = _b.copy();
        this.c = _c.copy();
    }
};
Triangle2D.createEquilateralFrom = function(a, b) {
    var c = a.interpolateTo(b, 0.5), dir = a.sub(b), n = dir.getPerpendicular();
    c.addSelf(n.normalizeTo(dir.magnitude() * mathUtils.SQRT3 / 2));
    return new Triangle2D(a, b, c);
};
Triangle2D.isClockwise = function(a, b, c) {
    var determ = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);
    return determ < 0;
};
Triangle2D.prototype = {
    adjustTriangleSizeBy: function(offAB, offBC, offCA) {
        if (arguments.length == 1) {
            offBC = offAB;
            offCA = offAB;
        }
        this.computeCentroid();
        var ab = new Line2D(this.a.copy(), this.b.copy()).offsetAndGrowBy(offAB, 100000, this.centroid);
        var bc = new Line2D(this.b.copy(), this.c.copy()).offsetAndGrowBy(offBC, 100000, this.centroid);
        var ca = new Line2D(this.c.copy(), this.a.copy()).offsetAndGrowBy(offCA, 100000, this.centroid);
        this.a = ab.intersectLine(ca).getPos();
        this.b = ab.intersectLine(bc).getPos();
        this.c = bc.intersectLine(ca).getPos();
        this.computeCentroid();
        return this;
    },
    computeCentroid: function() {
        this.centroid = this.a.add(this.b).addSelf(this.c).scaleSelf(1 / 3);
        return this.centroid;
    },
    /**
     * Checks if point vector is inside the triangle created by the points a, b
     * and c. These points will create a plane and the point checked will have
     * to be on this plane in the region between a,b,c.
     * 
     * Note: The triangle must be defined in clockwise order a,b,c
     * 
     * @return true, if point is in triangle.
     */ containsPoint: function(_p) {
        var v1 = _p.sub(this.a).normalize(), v2 = _p.sub(this.b).normalize(), v3 = _p.sub(this.c).normalize(), totalAngles = Math.acos(v1.dot(v2));
        totalAngles += Math.acos(v2.dot(v3));
        totalAngles += Math.acos(v3.dot(v1));
        return mathUtils.abs(totalAngles - mathUtils.TWO_PI) <= 0.01;
    },
    copy: function() {
        return new Triangle2D(this.a.copy(), this.b.copy(), this.c.copy());
    },
    flipVertexOrder: function() {
        var t = this.a;
        this.a = this.c;
        this.c = t;
        return this;
    },
    getArea: function() {
        return this.b.sub(this.a).cross(this.c.sub(this.a)) * 0.5;
    },
    getBounds: function() {
        return new Rect(Vec2D.min(Vec2D.min(this.a, this.b), this.c), Vec2D.max(Vec2D.max(this.a, this.b), this.c));
    },
    getCircumCircle: function() {
        var cr = this.a.bisect(this.b).cross(this.b.bisect(this.c)), circa = new Vec2D(cr.x / cr.z, cr.y / cr.z), sa = this.a.distanceTo(this.b), sb = this.b.distanceTo(this.c), sc = this.c.distanceTo(this.a);
        var radius = sa * sb * sc / Math.sqrt((sa + sb + sc) * (-sa + sb + sc) * (sa - sb + sc) * (sa + sb - sc));
        return new Circle(circa, radius);
    },
    getCircumference: function() {
        return this.a.distanceTo(this.b) + this.b.distanceTo(this.c) + this.c.distanceTo(this.a);
    },
    getClosestPointTo: function(_p) {
        var edge = new Line2D(this.a, this.b), Rab = edge.closestPointTo(_p), Rbc = edge.set(this.b, this.c).closestPointTo(_p), Rca = edge.set(this.c, this.a).closestPointTo(_p), dAB = _p.sub(Rab).magSquared(), dBC = _p.sub(Rbc).magSquared(), dCA = _p.sub(Rca).magSquared(), min = dAB, result = Rab;
        if (dBC < min) {
            min = dBC;
            result = Rbc;
        }
        if (dCA < min) result = Rca;
        return result;
    },
    intersectsTriangle: function(tri) {
        if (this.containsPoint(tri.a) || this.containsPoint(tri.b) || this.containsPoint(tri.c)) return true;
        if (tri.containsPoint(this.a) || tri.containsPoint(this.b) || tri.containsPoint(this.c)) return true;
        var ea = [
            new Line2D(this.a, this.b),
            new Line2D(this.b, this.c),
            new Line2D(this.c, this.a)
        ];
        var eb = [
            new Line2D(tri.a, tri.b),
            new Line2D(tri.b, tri.c),
            new Line2D(tri.c, tri.a)
        ];
        for(var i = 0, eaLen = ea.length; i < eaLen; i++){
            var la = ea[i];
            for(var j = 0, ebLen = eb.length; j < ebLen; j++){
                var lb = eb[j];
                var type = la.intersectLine(lb).getType();
                if (type != Line2D.LineIntersection.Type.NON_INTERSECTING && type != Line2D.LineIntersection.Type.PARALLEL) return true;
            }
        }
        return false;
    },
    isClockwise: function() {
        return Triangle2D.isClockwise(this.a, this.b, this.c);
    },
    set: function(a2, b2, c2) {
        this.a = a2;
        this.b = b2;
        this.c = c2;
    },
    toPolygon2D: function() {
        var poly = new Polygon2D();
        poly.add(this.a.copy());
        poly.add(this.b.copy());
        poly.add(this.c.copy());
        return poly;
    },
    toString: function() {
        return "Triangle2D: " + this.a + "," + this.b + "," + this.c;
    }
};
module.exports = Triangle2D;

},{"./Vec2D":"hVtPc","./Line2D":"2HvSh","./Rect":"7QDy8","./Circle":"7rYzr","./Polygon2D":"d9pnk","../math/mathUtils":"bF4PI"}],"jg3e0":[function(require,module,exports) {
var extend = require('../internals').extend, mathUtils = require('../math/mathUtils'), Vec3D = require('./Vec3D'), AxisAlignedCylinder = require('./AxisAlignedCylinder');
/**
 @module toxi/XAxisCylinder
 @constructor 
 X-axis aligned Cylinder
 @member toxi
 @author Kyle Phillips
 @augments AxisAlignedCylinder
 */ var XAxisCylinder = function(pos, radius, length) {
    AxisAlignedCylinder.apply(this, [
        pos,
        radius,
        length
    ]);
};
extend(XAxisCylinder, AxisAlignedCylinder);
XAxisCylinder.prototype.containsPoint = function(p) {
    if (mathUtils.abs(p.x - this.pos.x) < this.length * 0.5) {
        var dy = p.y - this.pos.y;
        var dz = p.z - this.pos.z;
        if (Math.abs(dz * dz + dy * dy) < this.radiusSquared) return true;
    }
    return false;
};
XAxisCylinder.prototype.getMajorAxis = function() {
    return Vec3D.Axis.X;
};
module.exports = XAxisCylinder;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","./Vec3D":"2Czl7","./AxisAlignedCylinder":"kVHfV"}],"kVHfV":[function(require,module,exports) {
var Cone = require('./Cone');
/** 
 @member toxi
 @constructor
 @description An Abstract (don't use this directly) Axis-aligned Cylinder class
 */ var AxisAlignedCylinder = function(pos, radius, length) {
    this.pos = pos === undefined ? undefined : pos.copy();
    this.setRadius(radius);
    this.setLength(length);
};
AxisAlignedCylinder.prototype = {
    /**
	Checks if the given point is inside the cylinder. 
	@param p
	@return true, if inside
	*/ containsPoint: function(p) {
        throw Error("AxisAlignedCylinder.containsPoint(): not implmented");
    },
    /**
	@return the length
	*/ getLength: function() {
        return this.length;
    },
    /**
	@return the cylinder's orientation axis
	*/ getMajorAxis: function() {
        throw Error("AxisAlignedCylinder.getMajorAxis(): not implemented");
    },
    /**
	Returns the cylinder's position (centroid).
	@return the pos
	*/ getPosition: function() {
        return this.pos.copy();
    },
    /**
	@return the cylinder radius
	*/ getRadius: function() {
        return this.radius;
    },
    /**
	@param length the length to set
	*/ setLength: function(length) {
        this.length = length;
    },
    /**
	@param pos the pos to set
	*/ setPosition: function(pos) {
        this.pos.set(pos);
    },
    setRadius: function(radius) {
        this.radius = radius;
        this.radiusSquared = radius * radius;
    },
    /**
	Builds a TriangleMesh representation of the cylinder at a default
	resolution 30 degrees. 
	@return mesh instance
	*/ toMesh: function(a, b, c) {
        var opts = {
            mesh: undefined,
            steps: 12,
            thetaOffset: 0
        };
        if (arguments.length == 1 && typeof arguments[0] == 'object') for(var prop in arguments[0])opts[prop] = arguments[0][prop];
        else if (arguments.length == 2) {
            opts.steps = arguments[0];
            opts.thetaOffset = arguments[1];
        }
        var cone = new Cone(this.pos, this.getMajorAxis().getVector(), this.radius, this.radius, this.length);
        return cone.toMesh(opts.mesh, opts.steps, opts.thetaOffset, true, true);
    }
};
module.exports = AxisAlignedCylinder;

},{"./Cone":"4JHEk"}],"dXziX":[function(require,module,exports) {
var extend = require('../internals').extend, mathUtils = require('../math/mathUtils'), Vec3D = require('./Vec3D'), AxisAlignedCylinder = require('./AxisAlignedCylinder');
/**
 @member toxi
 @class Y-axis aligned Cylinder
 */ var YAxisCylinder = function(pos, radius, length) {
    AxisAlignedCylinder.apply(this, [
        pos,
        radius,
        length
    ]);
};
extend(YAxisCylinder, AxisAlignedCylinder);
YAxisCylinder.prototype.containsPoint = function(p) {
    if (mathUtils.abs(p.y - this.pos.y) < this.length * 0.5) {
        var dx = p.x - this.pos.x;
        var dz = p.z - this.pos.z;
        if (Math.abs(dz * dz + dx * dx) < this.radiusSquared) return true;
    }
    return false;
};
YAxisCylinder.prototype.getMajorAxis = function() {
    return Vec3D.Axis.Y;
};
module.exports = YAxisCylinder;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","./Vec3D":"2Czl7","./AxisAlignedCylinder":"kVHfV"}],"aMhRa":[function(require,module,exports) {
var extend = require('../internals').extend, mathUtils = require('../math/mathUtils'), Vec3D = require('./Vec3D'), AxisAlignedCylinder = require('./AxisAlignedCylinder');
/**
 @member toxi
 @constructor Z-axis aligned Cylinder
 */ var ZAxisCylinder = function(pos, radius, length) {
    AxisAlignedCylinder.apply(this, [
        pos,
        radius,
        length
    ]);
};
extend(ZAxisCylinder, AxisAlignedCylinder);
ZAxisCylinder.prototype.containsPoint = function(p) {
    if (mathUtils.abs(p.z - this.pos.z) < this.length * 0.5) {
        var dx = p.x - this.pos.x;
        var dy = p.y - this.pos.y;
        if (Math.abs(dx * dx + dy * dy) < this.radiusSquared) return true;
    }
    return false;
};
ZAxisCylinder.prototype.getMajorAxis = function() {
    return Vec3D.Axis.Z;
};
module.exports = ZAxisCylinder;

},{"../internals":"iIw4Q","../math/mathUtils":"bF4PI","./Vec3D":"2Czl7","./AxisAlignedCylinder":"kVHfV"}],"jwzX6":[function(require,module,exports) {
module.exports = {
    BezierInterpolation: require('./math/BezierInterpolation'),
    CircularInterpolation: require('./math/CircularInterpolation'),
    CosineInterpolation: require('./math/CosineInterpolation'),
    DecimatedInterpolation: require('./math/DecimatedInterpolation'),
    ExponentialInterpolation: require('./math/ExponentialInterpolation'),
    Interpolation2D: require('./math/Interpolation2D'),
    LinearInterpolation: require('./math/LinearInterpolation'),
    mathUtils: require('./math/mathUtils'),
    //providing upper-cased version to be more obvious for people coming from java
    MathUtils: require('./math/mathUtils'),
    ScaleMap: require('./math/ScaleMap'),
    SigmoidInterpolation: require('./math/SigmoidInterpolation'),
    SinCosLUT: require('./math/SinCosLUT'),
    ThresholdInterpolation: require('./math/ThresholdInterpolation'),
    ZoomLensInterpolation: require('./math/ZoomLensInterpolation')
};
module.exports.noise = require('./math/noise');
module.exports.waves = require('./math/waves');

},{"./math/BezierInterpolation":"eS7Ko","./math/CircularInterpolation":"7OOgl","./math/CosineInterpolation":"kc4UL","./math/DecimatedInterpolation":"9joJM","./math/ExponentialInterpolation":"5LBiL","./math/Interpolation2D":"9ejMm","./math/LinearInterpolation":"fp5tv","./math/mathUtils":"bF4PI","./math/ScaleMap":"3UZGr","./math/SigmoidInterpolation":"dx8Ys","./math/SinCosLUT":"1GGbh","./math/ThresholdInterpolation":"eVORT","./math/ZoomLensInterpolation":"8PmAQ","./math/noise":"b50Qa","./math/waves":"hHsg8"}],"eS7Ko":[function(require,module,exports) {
/**
    * @class Bezier curve interpolation with configurable coefficients. The curve
    * parameters need to be normalized offsets relative to the start and end values
    * passed to the {@link #interpolate(float, float, float)} method, but can
    * exceed the normal 0 .. 1.0 interval. Use symmetrical offsets to create a
    * symmetrical curve, e.g. this will create a curve with 2 dips reaching the
    * minimum and maximum values at 25% and 75% of the interval...
    * @member toxi
    *
    * @example
    * <p>
    * <code>BezierInterpolation b=new BezierInterpolation(3,-3);</code>
    * </p>
    *
    * The curve will be a straight line with this configuration:
    *
    * <p>
    * <code>BezierInterpolation b=new BezierInterpolation(1f/3,-1f/3);</code>
    * </p>
    */ var BezierInterpolation = function(h1, h2) {
    this.c1 = h1;
    this.c2 = h2;
};
BezierInterpolation.interpolate = function(a, b, t, c1, c2) {
    var tSquared = t * t;
    var invT = 1 - t;
    var invTSquared = invT * invT;
    return a * invTSquared * invT + 3 * (c1 * (b - a) + a) * t * invTSquared + 3 * (c2 * (b - a) + b) * tSquared * invT + b * tSquared * t;
};
BezierInterpolation.prototype = {
    interpolate: function(a, b, t) {
        var tSquared = t * t;
        var invT = 1 - t;
        var invTSquared = invT * invT;
        return a * invTSquared * invT + 3 * (this.c1 * (b - a) + a) * t * invTSquared + 3 * (this.c2 * (b - a) + b) * tSquared * invT + b * tSquared * t;
    },
    setCoefficients: function(a, b) {
        this.c1 = a;
        this.c2 = b;
    }
};
module.exports = BezierInterpolation;

},{}],"7OOgl":[function(require,module,exports) {
/**
    * @class Implementation of the circular interpolation function.
    *
    * i = a-(b-a) * (sqrt(1 - (1 - f) * (1 - f) ))
    * @description The interpolation slope can be flipped to have its steepest ascent
    * towards the end value, rather than at the beginning in the default
    * configuration.
    * @member toxi
    *
    * @param isFlipped
    *            true, if slope is inverted
    */ var CircularInterpolation = function(isFlipped) {
    if (isFlipped === undefined) this.isFlipped = false;
};
CircularInterpolation.interpolate = function(a, b, f, isFlipped) {
    if (!!isFlipped) return a - (b - a) * (Math.sqrt(1 - f * f) - 1);
    else {
        f = 1 - f;
        return a + (b - a) * Math.sqrt(1 - f * f);
    }
};
CircularInterpolation.prototype.interpolate = function(a, b, f) {
    if (this.isFlipped) return a - (b - a) * (Math.sqrt(1 - f * f) - 1);
    else {
        f = 1 - f;
        return a + (b - a) * Math.sqrt(1 - f * f);
    }
};
CircularInterpolation.prototype.setFlipped = function(isFlipped) {
    this.isFlipped = isFlipped;
};
module.exports = CircularInterpolation;

},{}],"kc4UL":[function(require,module,exports) {
/**
    * @class Implementation of the cosine interpolation function:
    * i = b+(a-b)*(0.5+0.5*cos(f*PI))
    * @member toxi
    */ var CosineInterpolation = function() {
};
CosineInterpolation.interpolate = function(a, b, f) {
    return b + (a - b) * (0.5 + 0.5 * Math.cos(f * Math.PI));
};
CosineInterpolation.prototype.interpolate = CosineInterpolation.interpolate;
module.exports = CosineInterpolation;

},{}],"9joJM":[function(require,module,exports) {
var LinearInterpolation = require('./LinearInterpolation');
/**
    * @class Delivers a number of decimated/stepped values for a given interval. E.g. by
    * using 5 steps the interpolation factor is decimated to: 0, 20, 40, 60, 80 and
    * 100%. By default {@link LinearInterpolation} is used, however any other
    * {@link InterpolateStrategy} can be specified via the constructor.
    * @member toxi
    */ var DecimatedInterpolation = function(steps, strategy) {
    if (steps === undefined) throw new Error("steps was not passed to constructor");
    this.numSteps = steps;
    this.strategy = strategy || new LinearInterpolation();
};
DecimatedInterpolation.prototype = {
    interpolate: function(a, b, f) {
        var fd = Math.floor(f * this.numSteps) / this.numSteps;
        return this.strategy.interpolate(a, b, fd);
    }
};
module.exports = DecimatedInterpolation;

},{"./LinearInterpolation":"fp5tv"}],"5LBiL":[function(require,module,exports) {
/**
    * @class Exponential curve interpolation with adjustable exponent. Use exp in the
    * following ranges to achieve these effects:
    * <ul>
    * <li>0.0 &lt; x &lt; 1.0 : ease in (steep changes towards b)</li>
    * <li>1.0 : same as {@link LinearInterpolation}</li>
    * <li>&gt; 1.0 : ease-out (steep changes from a)</li>
    * </ul>
    * @member toxi
    */ var ExponentialInterpolation = function(exp) {
    this.exponent = exp === undefined ? 2 : exp;
};
ExponentialInterpolation.interpolate = function(a, b, f, exponent) {
    return a + (b - a) * Math.pow(f, exponent);
};
ExponentialInterpolation.prototype.interpolate = function(a, b, f) {
    return a + (b - a) * Math.pow(f, this.exponent);
};
module.exports = ExponentialInterpolation;

},{}],"dx8Ys":[function(require,module,exports) {
/**
    * @class Initializes the s-curve with default sharpness = 2
    * @member toxi
    */ var SigmoidInterpolation = function(s) {
    if (s === undefined) s = 2;
    this.setSharpness(s);
};
var interpolate = function(a, b, f, sharpness) {
    f = (f * 2 - 1) * sharpness;
    f = 1 / (1 + Math.exp(-f));
    return a + (b - a) * f;
};
SigmoidInterpolation.prototype = {
    getSharpness: function() {
        return this.sharpness;
    },
    interpolate: function(a, b, f) {
        return interpolate(a, b, f, this.sharpPremult);
    },
    setSharpness: function(s) {
        this.sharpness = s;
        this.sharpPremult = 5 * s;
    }
};
SigmoidInterpolation.interpolate = interpolate;
module.exports = SigmoidInterpolation;

},{}],"1GGbh":[function(require,module,exports) {
var mathUtils = require('./mathUtils');
/**
    * @class Lookup table for fast sine & cosine computations. Tables with varying
    * precisions can be created to which input angles will be rounded to. The
    * sin/cos methods can be used with both positive and negative input angles as
    * with the normal Math.sin()/Math.cos() versions.
    * @member toxi
    */ var SinCosLUT = function(precision) {
    if (!precision) precision = SinCosLUT.DEFAULT_PRECISION;
    this.precision = precision;
    this.period = 360 / this.precision;
    this.quadrant = this.period >> 2;
    this.deg2rad = Math.PI / 180 * this.precision;
    this.rad2deg = 180 / Math.PI / this.precision;
    this.sinLUT = [];
    for(var i = 0; i < this.period; i++)this.sinLUT[i] = Math.sin(i * this.deg2rad);
};
SinCosLUT.prototype = {
    /**
        * Calculate cosine for the passed in angle in radians.
        *
        * @param theta
        * @return cosine value for theta
        */ cos: function(theta) {
        while(theta < 0)theta += mathUtils.TWO_PI;
        return this.sinLUT[(theta * this.rad2deg + this.quadrant) % this.period];
    },
    getPeriod: function() {
        return this.period;
    },
    getPrecision: function() {
        return this.precision;
    },
    getSinLUT: function() {
        return this.sinLUT;
    },
    /**
        * Calculates sine for the passed angle in radians.
        *
        * @param theta
        * @return sine value for theta
        */ sin: function(theta) {
        while(theta < 0)theta += mathUtils.TWO_PI;
        return this.sinLUT[theta * this.rad2deg % this.period];
    }
};
SinCosLUT.DEFAULT_PRECISION = 0.25;
SinCosLUT.DEFAULT_INSTANCE = undefined;
SinCosLUT.getDefaultInstance = function() {
    if (SinCosLUT.DEFAULT_INSTANCE === undefined) SinCosLUT.DEFAULT_INSTANCE = new SinCosLUT();
    return SinCosLUT.DEFAULT_INSTANCE;
};
module.exports = SinCosLUT;

},{"./mathUtils":"bF4PI"}],"eVORT":[function(require,module,exports) {
/**
    * @class Defines a single step/threshold function which returns the min value for all
    * factors &lt; threshold and the max value for all others.
    * @member toxi
    */ var ThresholdInterpolation = function(threshold) {
    this.threshold = threshold;
};
var interpolate = function(a, b, f, threshold) {
    return f < threshold ? a : b;
};
ThresholdInterpolation.prototype = {
    interpolate: function(a, b, f) {
        return f < this.threshold ? a : b;
    }
};
ThresholdInterpolation.interpolate = interpolate;
module.exports = ThresholdInterpolation;

},{}],"8PmAQ":[function(require,module,exports) {
var mathUtils = require('./mathUtils');
var CircularInterpolation = require('./CircularInterpolation');
/**
    * @class This class provides an adjustable zoom lens to either bundle or dilate values
    * around a focal point within a given interval. For a example use cases, please
    * have a look at the provided ScaleMapDataViz and ZoomLens examples.
    * @member toxi
    */ var ZoomLensInterpolation = function(lensPos, lensStrength) {
    this.leftImpl = new CircularInterpolation();
    this.rightImpl = new CircularInterpolation();
    this.lensPos = lensPos || 0.5;
    this.lensStrength = lensStrength || 1;
    this.absStrength = Math.abs(this.lensStrength);
    this.leftImpl.setFlipped(this.lensStrength > 0);
    this.rightImpl.setFlipped(this.lensStrength < 0);
};
ZoomLensInterpolation.prototype = {
    interpolate: function(min, max, t) {
        var val = min + (max - min) * t;
        if (t < this.lensPos) val += (this.leftImpl.interpolate(min, min + (max - min) * this.lensPos, t / this.lensPos) - val) * this.absStrength;
        else val += (this.rightImpl.interpolate(min + (max - min) * this.lensPos, max, (t - this.lensPos) / (1 - this.lensPos)) - val) * this.absStrength;
        return val;
    },
    setLensPos: function(pos, smooth) {
        this.lensPos += (mathUtils.clipNormalized(pos) - this.lensPos) * smooth;
    },
    setLensStrength: function(str, smooth) {
        this.lensStrength += (mathUtils.clip(str, -1, 1) - this.lensStrength) * smooth;
        this.absStrength = mathUtils.abs(this.lensStrength);
        this.leftImpl.setFlipped(this.lensStrength > 0);
        this.rightImpl.setFlipped(this.lensStrength < 0);
    }
};
module.exports = ZoomLensInterpolation;

},{"./mathUtils":"bF4PI","./CircularInterpolation":"7OOgl"}],"b50Qa":[function(require,module,exports) {
/** module toxi/math/noise 
	@api public
*/ module.exports = {
    PerlinNoise: require('./noise/PerlinNoise'),
    simplexNoise: require('./noise/simplexNoise')
};

},{"./noise/PerlinNoise":"38sOL","./noise/simplexNoise":"4itDx"}],"38sOL":[function(require,module,exports) {
var SinCosLUT = require('../SinCosLUT'), hasTypedArrays = require('../../internals/has').typedArrays();
/*
Using David Bau's seedrandom.js for PerlinNoise#noiseSeed functionality
 seedrandom.js version 2.0.
 Author: David Bau 4/2/2011
 http://davidbau.com/encode/seedrandom-min.js

 LICENSE (BSD):

 Copyright 2010 David Bau, all rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright
			notice, this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright
			notice, this list of conditions and the following disclaimer in the
			documentation and/or other materials provided with the distribution.

	3. Neither the name of this module nor the names of its contributors may
			be used to endorse or promote products derived from this software
			without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/ /**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow
 * @param {number=} startdenom
 * @api private
 */ var internalMath = {
};
internalMath.pow = Math.pow; //used by seed generator
internalMath.random = Math.random; //start with the default random generator
(function(pool, math, width, chunks, significance, overflow, startdenom) {
    /*
	seedrandom()
	This is the seedrandom function described above.
*/ math['seedrandom'] = function seedrandom(seed, use_entropy) {
        var key = [];
        var arc4;
        // Flatten the seed string or build one from local entropy if needed.
        seed = mixkey(flatten(use_entropy ? [
            seed,
            pool
        ] : arguments.length ? seed : [
            new Date().getTime(),
            pool,
            window
        ], 3), key);
        // Use the seed to initialize an ARC4 generator.
        arc4 = new ARC4(key);
        // Mix the randomness into accumulated entropy.
        mixkey(arc4.S, pool);
        // Override Math.random
        // This function returns a random double in [0, 1) that contains
        // randomness in every bit of the mantissa of the IEEE 754 value.
        math['random'] = function random() {
            var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48
            var d = startdenom; //   and denominator d = 2 ^ 48.
            var x = 0; //   and no 'extra last byte'.
            while(n < significance){
                n = (n + x) * width; //   shifting numerator and
                d *= width; //   denominator and generating a
                x = arc4.g(1); //   new least-significant-byte.
            }
            while(n >= overflow){
                n /= 2; //   last byte, shift everything
                d /= 2; //   right using integer math until
                x >>>= 1; //   we have exactly the desired bits.
            }
            return (n + x) / d; // Form the number within [0, 1).
        };
        // Return the seed that was used
        return seed;
    };
    /** @constructor */ function ARC4(key) {
        var t1, u1, me = this, keylen = key.length;
        var i1 = 0, j1 = me.i = me.j = me.m = 0;
        me.S = [];
        me.c = [];
        // The empty key [] is treated as [0].
        if (!keylen) key = [
            keylen++
        ];
        // Set up S using the standard key scheduling algorithm.
        while(i1 < width)me.S[i1] = i1++;
        for(i1 = 0; i1 < width; i1++){
            t1 = me.S[i1];
            j1 = lowbits(j1 + t1 + key[i1 % keylen]);
            u1 = me.S[j1];
            me.S[i1] = u1;
            me.S[j1] = t1;
        }
        // The "g" method returns the next (count) outputs as one number.
        me.g = function getnext(count) {
            var s = me.S;
            var i = lowbits(me.i + 1);
            var t = s[i];
            var j = lowbits(me.j + t);
            var u = s[j];
            s[i] = u;
            s[j] = t;
            var r = s[lowbits(t + u)];
            while(--count){
                i = lowbits(i + 1);
                t = s[i];
                j = lowbits(j + t);
                u = s[j];
                s[i] = u;
                s[j] = t;
                r = r * width + s[lowbits(t + u)];
            }
            me.i = i;
            me.j = j;
            return r;
        };
        // For robust unpredictability discard an initial batch of values.
        // See http://www.rsa.com/rsalabs/node.asp?id=2009
        me.g(width);
    }
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    /** @param {Object=} result
	* @param {string=} prop
	* @param {string=} typ
	*/ function flatten(obj, depth, result, prop, typ) {
        result = [];
        typ = typeof obj;
        if (depth && typ == 'object') for(prop in obj){
            if (prop.indexOf('S') < 5) try {
                result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
        }
        return result.length ? result : obj + (typ != 'string' ? '\0' : '');
    }
    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    /** @param {number=} smear
	* @param {number=} j */ function mixkey(seed, key, smear, j) {
        seed += ''; // Ensure the seed is a string
        smear = 0;
        for(j = 0; j < seed.length; j++)key[lowbits(j)] = lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
        seed = '';
        for(j in key)seed += String.fromCharCode(key[j]);
        return seed;
    }
    //
    // lowbits()
    // A quick "n mod width" for width a power of 2.
    //
    function lowbits(n) {
        return n & width - 1;
    }
    //
    // The following constants are related to IEEE 754 limits.
    //
    startdenom = math.pow(width, chunks);
    significance = math.pow(2, significance);
    overflow = significance * 2;
    mixkey(math.random(), pool);
// End anonymous scope, and pass initial values.
})([], internalMath, 256, 6, 52 // significance: there are 52 significant digits in a double
);
//end seed
/*
		PERLIN NOISE taken from the
		[toxi 040903]
		octaves and amplitude amount per octave are now user controlled
		via the noiseDetail() function.
		[toxi 030902]
		cleaned up code and now using bagel's cosine table to speed up
		[toxi 030901]
		implementation by the german demo group farbrausch
		as used in their demo "art": http://www.farb-rausch.de/fr010src.zip
	*/ var PERLIN_YWRAPB = 4, PERLIN_YWRAP = 1 << PERLIN_YWRAPB, PERLIN_ZWRAPB = 8, PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB, PERLIN_SIZE = 4095, PERLIN_MIN_AMPLITUDE = 0.001;
/** @api private */ var _noise_fsc = function(self, i) {
    var index = (i + 0.5) * self._perlin_PI % self._perlin_TWOPI;
    return 0.5 * (1 - self._perlin_cosTable[index]);
};
/**
	 * @module toxi/math/noise/PerlinNoise
	 * @api public
	 */ var PerlinNoise = function() {
    this._perlin_octaves = 4; // default to medium smooth
    this._perlin_amp_falloff = 0.5; // 50% reduction/octave
    this._sinCosLUT = SinCosLUT.getDefaultInstance();
};
PerlinNoise.prototype = {
    /**
		noise
		@api public
		@param [x=0] x is optional
		@param [y=0] y is optional
		@param [z=0] z is optional
		*/ noise: function(x, y, z) {
        var i = 0;
        x = x || 0;
        y = y || 0;
        z = z || 0;
        if (!this._perlin) {
            this._perlin = hasTypedArrays ? new Float32Array(PERLIN_SIZE) : [];
            var length = PERLIN_SIZE - 1;
            for(i = 0; i < PERLIN_SIZE + 1; i++)this._perlin[i] = internalMath.random();
        }
        this._perlin_cosTable = this._sinCosLUT.getSinLUT();
        this._perlin_TWOPI = this._perlin_PI = this._sinCosLUT.getPeriod();
        this._perlin_PI >>= 1;
        if (x < 0) x = -x;
        if (y < 0) y = -y;
        if (z < 0) z = -z;
        var xi = x, yi = y, zi = z, xf = x - xi, yf = y - yi, zf = z - zi, rxf, ryf, r = 0, ampl = 0.5, n1, n2, n3, of;
        for(i = 0; i < this._perlin_octaves; i++){
            of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB);
            rxf = _noise_fsc(this, xf);
            ryf = _noise_fsc(this, yf);
            n1 = this._perlin[of & PERLIN_SIZE];
            n1 += rxf * (this._perlin[of + 1 & PERLIN_SIZE] - n1);
            n2 = this._perlin[of + PERLIN_YWRAP & PERLIN_SIZE];
            n2 += rxf * (this._perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n2);
            n1 += ryf * (n2 - n1);
            of += PERLIN_ZWRAP;
            n2 = this._perlin[of & PERLIN_SIZE];
            n2 += rxf * (this._perlin[of + 1 & PERLIN_SIZE] - n2);
            n3 = this._perlin[of + PERLIN_YWRAP & PERLIN_SIZE];
            n3 += rxf * (this._perlin[of + PERLIN_YWRAP + 1 & PERLIN_SIZE] - n3);
            n2 += ryf * (n3 - n2);
            n1 += _noise_fsc(this, zf) * (n2 - n1);
            r += n1 * ampl;
            ampl *= this._perlin_amp_falloff;
            // break if amp has no more impact
            if (ampl < PERLIN_MIN_AMPLITUDE) break;
            xi <<= 1;
            xf *= 2;
            yi <<= 1;
            yf *= 2;
            zi <<= 1;
            zf *= 2;
            if (xf >= 1) {
                xi++;
                xf--;
            }
            if (yf >= 1) {
                yi++;
                yf--;
            }
            if (zf >= 1) {
                zi++;
                zf--;
            }
        }
        return r;
    },
    /**
		@api public
		@param {Number} lod
		@param {Number} falloff
		*/ noiseDetail: function(lod, falloff) {
        if (lod > 0) this._perlin_octaves = lod;
        if (falloff && falloff > 0) this._perlin_amp_falloff = falloff;
    },
    /**
		@api public
		@param {Number} [what] the random seed
		*/ noiseSeed: function(what) {
        internalMath.seedrandom(what);
    }
};
module.exports = PerlinNoise;

},{"../SinCosLUT":"1GGbh","../../internals/has":"2hvR2"}],"4itDx":[function(require,module,exports) {
var each = require('../../internals/each');
var has = require('../../internals/has');
/**
 * Simplex Noise in 2D, 3D and 4D. Based on the example code of this paper:
 * http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
 * @author Stefan Gustavson, Linkping University, Sweden (stegu at itn dot liu dot se)
 * Slight optimizations & restructuring by
 * @author Karsten Schmidt (info at toxi dot co dot uk)
 * javascript by
 * @author Kyle Phillips (kyle at haptic-data dot com)
*/ var _SQRT3 = Math.sqrt(3), _SQRT5 = Math.sqrt(5);
/**
 * Skewing and unskewing factors for 2D, 3D and 4D, some of them
 * pre-multiplied.
 */ var _F2 = 0.5 * (_SQRT3 - 1), _G2 = (3 - _SQRT3) / 6, _G22 = _G2 * 2 - 1, _F3 = 1 / 3, _G3 = 1 / 6, _F4 = (_SQRT5 - 1) / 4, _G4 = (5 - _SQRT5) / 20, _G42 = _G4 * 2, _G43 = _G4 * 3, _G44 = _G4 * 4 - 1;
/**
* Gradient vectors for 3D (pointing to mid points of all edges of a unit
* cube)
*/ var _grad3 = [
    [
        1,
        1,
        0
    ],
    [
        -1,
        1,
        0
    ],
    [
        1,
        -1,
        0
    ],
    [
        -1,
        -1,
        0
    ],
    [
        1,
        0,
        1
    ],
    [
        -1,
        0,
        1
    ],
    [
        1,
        0,
        -1
    ],
    [
        -1,
        0,
        -1
    ],
    [
        0,
        1,
        1
    ],
    [
        0,
        -1,
        1
    ],
    [
        0,
        1,
        -1
    ],
    [
        0,
        -1,
        -1
    ]
];
/**
* Gradient vectors for 4D (pointing to mid points of all edges of a unit 4D
* hypercube)
*/ var _grad4 = [
    [
        0,
        1,
        1,
        1
    ],
    [
        0,
        1,
        1,
        -1
    ],
    [
        0,
        1,
        -1,
        1
    ],
    [
        0,
        1,
        -1,
        -1
    ],
    [
        0,
        -1,
        1,
        1
    ],
    [
        0,
        -1,
        1,
        -1
    ],
    [
        0,
        -1,
        -1,
        1
    ],
    [
        0,
        -1,
        -1,
        -1
    ],
    [
        1,
        0,
        1,
        1
    ],
    [
        1,
        0,
        1,
        -1
    ],
    [
        1,
        0,
        -1,
        1
    ],
    [
        1,
        0,
        -1,
        -1
    ],
    [
        -1,
        0,
        1,
        1
    ],
    [
        -1,
        0,
        1,
        -1
    ],
    [
        -1,
        0,
        -1,
        1
    ],
    [
        -1,
        0,
        -1,
        -1
    ],
    [
        1,
        1,
        0,
        1
    ],
    [
        1,
        1,
        0,
        -1
    ],
    [
        1,
        -1,
        0,
        1
    ],
    [
        1,
        -1,
        0,
        -1
    ],
    [
        -1,
        1,
        0,
        1
    ],
    [
        -1,
        1,
        0,
        -1
    ],
    [
        -1,
        -1,
        0,
        1
    ],
    [
        -1,
        -1,
        0,
        -1
    ],
    [
        1,
        1,
        1,
        0
    ],
    [
        1,
        1,
        -1,
        0
    ],
    [
        1,
        -1,
        1,
        0
    ],
    [
        1,
        -1,
        -1,
        0
    ],
    [
        -1,
        1,
        1,
        0
    ],
    [
        -1,
        1,
        -1,
        0
    ],
    [
        -1,
        -1,
        1,
        0
    ],
    [
        -1,
        -1,
        -1,
        0
    ]
];
/**
	 * Permutation table
	 */ var _p = [
    151,
    160,
    137,
    91,
    90,
    15,
    131,
    13,
    201,
    95,
    96,
    53,
    194,
    233,
    7,
    225,
    140,
    36,
    103,
    30,
    69,
    142,
    8,
    99,
    37,
    240,
    21,
    10,
    23,
    190,
    6,
    148,
    247,
    120,
    234,
    75,
    0,
    26,
    197,
    62,
    94,
    252,
    219,
    203,
    117,
    35,
    11,
    32,
    57,
    177,
    33,
    88,
    237,
    149,
    56,
    87,
    174,
    20,
    125,
    136,
    171,
    168,
    68,
    175,
    74,
    165,
    71,
    134,
    139,
    48,
    27,
    166,
    77,
    146,
    158,
    231,
    83,
    111,
    229,
    122,
    60,
    211,
    133,
    230,
    220,
    105,
    92,
    41,
    55,
    46,
    245,
    40,
    244,
    102,
    143,
    54,
    65,
    25,
    63,
    161,
    1,
    216,
    80,
    73,
    209,
    76,
    132,
    187,
    208,
    89,
    18,
    169,
    200,
    196,
    135,
    130,
    116,
    188,
    159,
    86,
    164,
    100,
    109,
    198,
    173,
    186,
    3,
    64,
    52,
    217,
    226,
    250,
    124,
    123,
    5,
    202,
    38,
    147,
    118,
    126,
    255,
    82,
    85,
    212,
    207,
    206,
    59,
    227,
    47,
    16,
    58,
    17,
    182,
    189,
    28,
    42,
    223,
    183,
    170,
    213,
    119,
    248,
    152,
    2,
    44,
    154,
    163,
    70,
    221,
    153,
    101,
    155,
    167,
    43,
    172,
    9,
    129,
    22,
    39,
    253,
    19,
    98,
    108,
    110,
    79,
    113,
    224,
    232,
    178,
    185,
    112,
    104,
    218,
    246,
    97,
    228,
    251,
    34,
    242,
    193,
    238,
    210,
    144,
    12,
    191,
    179,
    162,
    241,
    81,
    51,
    145,
    235,
    249,
    14,
    239,
    107,
    49,
    192,
    214,
    31,
    181,
    199,
    106,
    157,
    184,
    84,
    204,
    176,
    115,
    121,
    50,
    45,
    127,
    4,
    150,
    254,
    138,
    236,
    205,
    93,
    222,
    114,
    67,
    29,
    24,
    72,
    243,
    141,
    128,
    195,
    78,
    66,
    215,
    61,
    156,
    180
];
/**
	 * To remove the need for index wrapping, double the permutation table
	 * length
	 */ var _perm = function() {
    var _per = has.typedArrays() ? new Int32Array(512) : [];
    for(var i = 0; i < 512; i++)_per[i] = _p[i & 255];
    return _per;
}();
/**
	 * A lookup table to traverse the simplex around a given point in 4D.
	 * Details can be found where this table is used, in the 4D noise method.
	 */ var _simplex = [
    [
        0,
        1,
        2,
        3
    ],
    [
        0,
        1,
        3,
        2
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        2,
        3,
        1
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        1,
        2,
        3,
        0
    ],
    [
        0,
        2,
        1,
        3
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        3,
        1,
        2
    ],
    [
        0,
        3,
        2,
        1
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        1,
        3,
        2,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        1,
        2,
        0,
        3
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        1,
        3,
        0,
        2
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        2,
        3,
        0,
        1
    ],
    [
        2,
        3,
        1,
        0
    ],
    [
        1,
        0,
        2,
        3
    ],
    [
        1,
        0,
        3,
        2
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        2,
        0,
        3,
        1
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        2,
        1,
        3,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        2,
        0,
        1,
        3
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        3,
        0,
        1,
        2
    ],
    [
        3,
        0,
        2,
        1
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        3,
        1,
        2,
        0
    ],
    [
        2,
        1,
        0,
        3
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        3,
        1,
        0,
        2
    ],
    [
        0,
        0,
        0,
        0
    ],
    [
        3,
        2,
        0,
        1
    ],
    [
        3,
        2,
        1,
        0
    ]
];
//if this environment supports typed arrays
//convert our arrays over for massive perf gain!
if (has.typedArrays()) {
    var makeEachTypedArray = function(arr) {
        var _g = [];
        each(arr, function(g) {
            _g.push(new Int32Array(g));
        });
        return _g;
    };
    _grad3 = makeEachTypedArray(_grad3);
    _grad4 = makeEachTypedArray(_grad4);
    _p = new Int32Array(_p);
    _simplex = makeEachTypedArray(_simplex);
    this.testObjs = {
        _grad3: _grad3,
        _grad4: _grad4,
        _p: _p,
        _simplex: _simplex
    };
}
/**
	* Computes dot product in 2D.
	* @param g 2-vector (grid offset)
	* @param {Number} x
	* @param {Number} y
	* @param {Number} z
	* @param {Number} w
	* @return {Number} dot product
	* @api private
	*/ var _dot = function(g, x, y, z, w) {
    var n = g[0] * x + g[1] * y;
    if (z) {
        n += g[2] * z;
        if (w) n += g[3] * w;
    }
    return n;
};
/**
	*This method is a *lot* faster than using (int)Math.floor(x).
	* @param {Number} x value to be floored
	* @return {Number}
	* @api private
	*/ var _fastfloor = function(x) {
    return x >= 0 ? Math.floor(x) : Math.floor(x - 1);
};
/**
	 * @module toxi/math/noise/simplexNoise
	 * @api public
	 */ var SimplexNoise = {
    /**
	* Computes 4D Simplex Noise.
	* @param {Number} [x] coordinate
	* @param {Number} [y]  coordinate
	* @param {Number} [z] coordinate
	* @param {Number} [w] coordinate
	* @return {Number} noise value in range -1 ... +1
	*/ noise: function(x, y, z, w) {
        //Noise contributions from five corners, we may use as few as 3 of them (depending on arguments)
        var numArgs = arguments.length, n0 = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0;
        //skew the input space to determin which simplex cell we're in
        var s = function() {
            switch(numArgs){
                case 2:
                    return (x + y) * _F2; //Hairy factor for 2d
                case 3:
                    return (x + y + z) * _F3; //Very nice and simple skew factor for 3d
                case 4:
                    return (x + y + z + w) * _F4; //factor for 4d skewing
                default:
                    throw new Error("Wrong arguments supplied to SimplexNoise.noise()");
            }
        }(), i = _fastfloor(x + s), j = _fastfloor(y + s), k = z !== undefined ? _fastfloor(z + s) : undefined, l = w !== undefined ? _fastfloor(w + s) : undefined;
        //unskew
        var t = function() {
            switch(numArgs){
                case 2:
                    return (i + j) * _G2;
                case 3:
                    return (i + j + k) * _G3;
                case 4:
                    return (i + j + k + l) * _G4;
            }
        }(), x0 = x - (i - t), y0 = y - (j - t), z0 = z !== undefined ? z - (k - t) : undefined, w0 = w !== undefined ? w - (l - t) : undefined;
        //Determine which simplex we are in
        if (numArgs == 2) //for the 2d case, the simplex shape is an equilateral triangle.
        return (function() {
            var i1, j1, x1, y1, x2, y2, ii, jj, t0, gi0, gi1, gi2, t2;
            if (x0 > y0) {
                i1 = 1;
                j1 = 0;
            } else {
                i1 = 0;
                j1 = 1;
            }
            // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
            // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
            // c = (3-sqrt(3))/6
            x1 = x0 - i1 + _G2; // Offsets for middle corner in (x,y) unskewed
            y1 = y0 - j1 + _G2;
            x2 = x0 + _G22; // Offsets for last corner in (x,y) unskewed
            y2 = y0 + _G22;
            // Work out the hashed gradient indices of the three simplex corners
            ii = i & 255;
            jj = j & 255;
            // Calculate the contribution from the three corners
            t0 = 0.5 - x0 * x0 - y0 * y0;
            if (t0 > 0) {
                t0 *= t0;
                gi0 = _perm[ii + _perm[jj]] % 12;
                n0 = t0 * t0 * _dot(_grad3[gi0], x0, y0); // (x,y) of grad3 used for
            // 2D gradient
            }
            var t1 = 0.5 - x1 * x1 - y1 * y1;
            if (t1 > 0) {
                t1 *= t1;
                gi1 = _perm[ii + i1 + _perm[jj + j1]] % 12;
                n1 = t1 * t1 * _dot(_grad3[gi1], x1, y1);
            }
            t2 = 0.5 - x2 * x2 - y2 * y2;
            if (t2 > 0) {
                t2 *= t2;
                gi2 = _perm[ii + 1 + _perm[jj + 1]] % 12;
                n2 = t2 * t2 * _dot(_grad3[gi2], x2, y2);
            }
            // Add contributions from each corner to get the final noise value.
            // The result is scaled to return values in the interval [-1,1].
            return 70 * (n0 + n1 + n2);
        })();
        else if (numArgs == 3) //for the 3d case, the simplex shape is a slightly irregular tetrahedron
        return (function() {
            var i1, j1, k1, // coords
            i2, j2, k2, x1, y1, z1, x2, y2, z2, x3, y3, z3, ii, jj, kk, t0, gi0, t1, gi1, t2, gi2, t3, gi3;
            if (x0 >= y0) {
                if (y0 >= z0) {
                    i1 = 1;
                    j1 = 0;
                    k1 = 0;
                    i2 = 1;
                    j2 = 1;
                    k2 = 0;
                } else if (x0 >= z0) {
                    i1 = 1;
                    j1 = 0;
                    k1 = 0;
                    i2 = 1;
                    j2 = 0;
                    k2 = 1;
                } else {
                    i1 = 0;
                    j1 = 0;
                    k1 = 1;
                    i2 = 1;
                    j2 = 0;
                    k2 = 1;
                } // Z X Y order
            } else {
                if (y0 < z0) {
                    i1 = 0;
                    j1 = 0;
                    k1 = 1;
                    i2 = 0;
                    j2 = 1;
                    k2 = 1;
                } else if (x0 < z0) {
                    i1 = 0;
                    j1 = 1;
                    k1 = 0;
                    i2 = 0;
                    j2 = 1;
                    k2 = 1;
                } else {
                    i1 = 0;
                    j1 = 1;
                    k1 = 0;
                    i2 = 1;
                    j2 = 1;
                    k2 = 0;
                } // Y X Z order
            }
            // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
            // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z),
            // and
            // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z),
            // where
            // c = 1/6.
            x1 = x0 - i1 + _G3; // Offsets for second corner in (x,y,z) coords
            y1 = y0 - j1 + _G3;
            z1 = z0 - k1 + _G3;
            x2 = x0 - i2 + _F3; // Offsets for third corner in (x,y,z)
            y2 = y0 - j2 + _F3;
            z2 = z0 - k2 + _F3;
            x3 = x0 - 0.5; // Offsets for last corner in (x,y,z)
            y3 = y0 - 0.5;
            z3 = z0 - 0.5;
            // Work out the hashed gradient indices of the four simplex corners
            ii = i & 255;
            jj = j & 255;
            kk = k & 255;
            // Calculate the contribution from the four corners
            t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
            if (t0 > 0) {
                t0 *= t0;
                gi0 = _perm[ii + _perm[jj + _perm[kk]]] % 12;
                n0 = t0 * t0 * _dot(_grad3[gi0], x0, y0, z0);
            }
            t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
            if (t1 > 0) {
                t1 *= t1;
                gi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1]]] % 12;
                n1 = t1 * t1 * _dot(_grad3[gi1], x1, y1, z1);
            }
            t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
            if (t2 > 0) {
                t2 *= t2;
                gi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2]]] % 12;
                n2 = t2 * t2 * _dot(_grad3[gi2], x2, y2, z2);
            }
            t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
            if (t3 > 0) {
                t3 *= t3;
                gi3 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1]]] % 12;
                n3 = t3 * t3 * _dot(_grad3[gi3], x3, y3, z3);
            }
            // Add contributions from each corner to get the final noise value.
            // The result is scaled to stay just inside [-1,1]
            return 32 * (n0 + n1 + n2 + n3);
        })();
        else // For the 4D case, the simplex is a 4D shape I won't even try to
        // describe.
        // To find out which of the 24 possible simplices we're in, we need to
        // determine the magnitude ordering of x0, y0, z0 and w0.
        // The method below is a good way of finding the ordering of x,y,z,w and
        // then find the correct traversal order for the simplex were in.
        // First, six pair-wise comparisons are performed between each possible
        // pair of the four coordinates, and the results are used to add up
        // binary bits for an integer index.
        return (function() {
            var i1, j1, k1, l1, i2, j2, k2, l2, i3, j3, k3, l3, // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some
            // order. Many values of c will never occur, since e.g. x>y>z>w makes
            // x<z, y<w and x<w impossible. Only the 24 indices which have non-zero
            // entries make any sense. We use a thresholding to set the coordinates
            // in turn from the largest magnitude. The number 3 in the "simplex"
            // array is at the position of the largest coordinate.
            sc = _simplex[function() {
                var c = 0;
                if (x0 > y0) c = 32;
                if (x0 > z0) c |= 16;
                if (y0 > z0) c |= 8;
                if (x0 > w0) c |= 4;
                if (y0 > w0) c |= 2;
                if (z0 > w0) c |= 1;
                return c;
            }()], x1, y1, z1, w1, x2, y2, z2, w2, x3, y3, z3, w3, x4, y4, z4, w4, ii, jj, kk, ll, t0, gi0, t1, gi1, t2, gi2, t3, gi3, t4, gi4;
            i1 = sc[0] >= 3 ? 1 : 0;
            j1 = sc[1] >= 3 ? 1 : 0;
            k1 = sc[2] >= 3 ? 1 : 0;
            l1 = sc[3] >= 3 ? 1 : 0;
            // The number 2 in the "simplex" array is at the second largest
            // coordinate.
            i2 = sc[0] >= 2 ? 1 : 0;
            j2 = sc[1] >= 2 ? 1 : 0;
            k2 = sc[2] >= 2 ? 1 : 0;
            l2 = sc[3] >= 2 ? 1 : 0;
            // The number 1 in the "simplex" array is at the second smallest
            // coordinate.
            i3 = sc[0] >= 1 ? 1 : 0;
            j3 = sc[1] >= 1 ? 1 : 0;
            k3 = sc[2] >= 1 ? 1 : 0;
            l3 = sc[3] >= 1 ? 1 : 0;
            // The fifth corner has all coordinate offsets = 1, so no need to look
            // that up.
            x1 = x0 - i1 + _G4; // Offsets for second corner in (x,y,z,w)
            y1 = y0 - j1 + _G4;
            z1 = z0 - k1 + _G4;
            w1 = w0 - l1 + _G4;
            x2 = x0 - i2 + _G42; // Offsets for third corner in (x,y,z,w)
            y2 = y0 - j2 + _G42;
            z2 = z0 - k2 + _G42;
            w2 = w0 - l2 + _G42;
            x3 = x0 - i3 + _G43; // Offsets for fourth corner in (x,y,z,w)
            y3 = y0 - j3 + _G43;
            z3 = z0 - k3 + _G43;
            w3 = w0 - l3 + _G43;
            x4 = x0 + _G44; // Offsets for last corner in (x,y,z,w)
            y4 = y0 + _G44;
            z4 = z0 + _G44;
            w4 = w0 + _G44;
            // Work out the hashed gradient indices of the five simplex corners
            ii = i & 255;
            jj = j & 255;
            kk = k & 255;
            ll = l & 255;
            // Calculate the contribution from the five corners
            t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
            if (t0 > 0) {
                t0 *= t0;
                gi0 = _perm[ii + _perm[jj + _perm[kk + _perm[ll]]]] % 32;
                n0 = t0 * t0 * _dot(_grad4[gi0], x0, y0, z0, w0);
            }
            t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;
            if (t1 > 0) {
                t1 *= t1;
                gi1 = _perm[ii + i1 + _perm[jj + j1 + _perm[kk + k1 + _perm[ll + l1]]]] % 32;
                n1 = t1 * t1 * _dot(_grad4[gi1], x1, y1, z1, w1);
            }
            t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;
            if (t2 > 0) {
                t2 *= t2;
                gi2 = _perm[ii + i2 + _perm[jj + j2 + _perm[kk + k2 + _perm[ll + l2]]]] % 32;
                n2 = t2 * t2 * _dot(_grad4[gi2], x2, y2, z2, w2);
            }
            t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;
            if (t3 > 0) {
                t3 *= t3;
                gi3 = _perm[ii + i3 + _perm[jj + j3 + _perm[kk + k3 + _perm[ll + l3]]]] % 32;
                n3 = t3 * t3 * _dot(_grad4[gi3], x3, y3, z3, w3);
            }
            t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;
            if (t4 > 0) {
                t4 *= t4;
                gi4 = _perm[ii + 1 + _perm[jj + 1 + _perm[kk + 1 + _perm[ll + 1]]]] % 32;
                n4 = t4 * t4 * _dot(_grad4[gi4], x4, y4, z4, w4);
            }
            // Sum up and scale the result to cover the range [-1,1]
            return 27 * (n0 + n1 + n2 + n3 + n4);
        })();
    }
};
module.exports = SimplexNoise;

},{"../../internals/each":"dGZ4W","../../internals/has":"2hvR2"}],"hHsg8":[function(require,module,exports) {
/** @module toxi/math/waves */ module.exports = {
    AbstractWave: require('./waves/AbstractWave'),
    AMFMSineWave: require('./waves/AMFMSineWave'),
    ConstantWave: require('./waves/ConstantWave'),
    FMHarmonicSquareWave: require('./waves/FMHarmonicSquareWave'),
    FMSawtoothWave: require('./waves/FMSawtoothWave'),
    FMSineWave: require('./waves/FMSineWave'),
    FMSquareWave: require('./waves/FMSquareWave'),
    FMTriangleWave: require('./waves/FMTriangleWave'),
    SineWave: require('./waves/SineWave'),
    WaveState: require('./waves/WaveState')
};

},{"./waves/AbstractWave":"dMl3Q","./waves/AMFMSineWave":"iH716","./waves/ConstantWave":"k1gYL","./waves/FMHarmonicSquareWave":"jO30k","./waves/FMSawtoothWave":"1zHGg","./waves/FMSineWave":"eGcz7","./waves/FMSquareWave":"8RLM4","./waves/FMTriangleWave":"a5eIv","./waves/SineWave":"6k45T","./waves/WaveState":"l6b9j"}],"dMl3Q":[function(require,module,exports) {
var WaveState = require('./WaveState');
var defaultNumberTo = function(i, num) {
    return typeof i === 'number' ? i : num;
};
/**
 * @module toxi/math/waves/AbstractWave
 * @description Abstract wave oscillator type which needs to be subclassed to implement
 * different waveforms. Please note that the frequency unit is radians, but
 * conversion methods to & from Hertz ({@link #hertzToRadians(float, float)})
 * are included in this base class.
 */ var AbstractWave = function(phase, freq, amp, offset) {
    if (typeof arguments[0] === 'object' && !freq && !amp && !offset) {
        //options object
        offset = phase.offset;
        amp = typeof phase.amp === 'number' ? phase.amp : phase.amplitude;
        freq = typeof phase.freq === 'number' ? phase.freq : phase.frequency;
        phase = phase.phase;
    }
    this.setPhase(defaultNumberTo(phase, 0));
    this.frequency = defaultNumberTo(freq, 0);
    this.amp = defaultNumberTo(amp, 1);
    this.offset = defaultNumberTo(offset, 0);
};
AbstractWave.prototype = {
    /**
     * Ensures phase remains in the 0...TWO_PI interval.
     * @param {Number} freq
     *            normalized progress frequency
     * @return {Number} current phase
     */ cyclePhase: function(freq) {
        if (freq === undefined) freq = 0;
        this.phase = (this.phase + freq) % AbstractWave.TWO_PI;
        if (this.phase < 0) this.phase += AbstractWave.TWO_PI;
        return this.phase;
    },
    getClass: function() {
        return "AbstractWave";
    },
    pop: function() {
        if (this.stateStack === undefined || this.stateStack !== undefined && this.stateStack.length <= 0) {
            //throw new Error("no wave states on stack");
            console.log(this.toString());
            console.log("no wave states on stack");
            return;
        }
        var s = this.stateStack.pop();
        this.phase = s.phase;
        this.frequency = s.frequency;
        this.amp = s.amp;
        this.offset = s.offset;
    },
    push: function() {
        if (this.stateStack === undefined) this.stateStack = [];
        this.stateStack.push(new WaveState(this.phase, this.frequency, this.amp, this.offset));
    },
    reset: function() {
        this.phase = this.origPhase;
    },
    setPhase: function(phase) {
        this.phase = phase;
        this.cyclePhase();
        this.origPhase = phase;
    },
    toString: function() {
        return this.getClass() + " phase:" + this.phase + " frequency: " + this.frequency + " amp: " + this.amp + " offset: " + this.offset;
    },
    update: function() {
        console.log(this.getClass() + " this should be overridden");
    }
};
AbstractWave.PI = 3.141592653589793;
AbstractWave.TWO_PI = 2 * AbstractWave.PI;
/**
 * Converts a frequency in Hertz into radians.
 *
 * @param hz frequency to convert (in Hz)
 * @param sampleRate sampling rate in Hz (equals period length @ 1 Hz)
 * @return frequency in radians
 */ AbstractWave.hertzToRadians = function(hz, sampleRate) {
    return hz / sampleRate * AbstractWave.TWO_PI;
};
/**
 * Converts a frequency from radians to Hertz.
 *
 * @param f frequency in radians
 * @param sampleRate  sampling rate in Hz (equals period length @ 1 Hz)
 * @return freq in Hz
 */ AbstractWave.radiansToHertz = function(f, sampleRate) {
    return f / AbstractWave.TWO_PI * sampleRate;
};
module.exports = AbstractWave;

},{"./WaveState":"l6b9j"}],"l6b9j":[function(require,module,exports) {
/**
 * @module toxi/math/waves/WaveState
 */ var WaveState = function(phase, frequency, amp, offset) {
    this.phase = phase;
    this.frequency = frequency;
    this.amp = amp;
    this.offset = offset;
};
module.exports = WaveState;

},{}],"iH716":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/AMFMSineWave
 * @augments toxi/math/waves/AbstractWave
 */ var AMFMSineWave = function(a, b, c, d, e) {
    if (typeof c == "number") {
        AbstractWave.call(this, a, b, 1, c);
        this.amod = d;
        this.fmod = e;
    } else {
        AbstractWave.call(this, a, b);
        this.amod = c;
        this.fmod = d;
    }
};
extend(AMFMSineWave, AbstractWave);
AMFMSineWave.prototype.getClass = function() {
    return "AMFMSineWave";
};
AMFMSineWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.amod.pop();
    this.fmod.pop();
};
AMFMSineWave.prototype.push = function() {
    this.parent.push.call(this);
    this.amod.push();
    this.fmod.push();
};
/**
 * Resets this wave and its modulating waves as well.
 *
 * @see toxi.math.waves.AbstractWave#reset()
 */ AMFMSineWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
    this.amod.reset();
};
/**
 * @class Progresses the wave and updates the result value. You must NEVER call the
 * update() method on the 2 modulating wave since this is handled
 * automatically by this method.
  * @augments AbstractWave
 * @member toxi
 * @see toxi.math.waves.AbstractWave#update()
 */ AMFMSineWave.prototype.update = function() {
    this.amp = this.amod.update();
    this.value = this.amp * Math.sin(this.phase) + this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = AMFMSineWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"k1gYL":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/ConstantWave
 * @augments toxi/math/waves/AbstractWave
 */ var ConstantWave = function(value) {
    AbstractWave.apply(this);
    this.value = value;
};
extend(ConstantWave, AbstractWave);
ConstantWave.prototype.getClass = function() {
    return "ConstantWave";
};
ConstantWave.prototype.update = function() {
    return this.value;
};
module.exports = ConstantWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"jO30k":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/FMHarmonicSquareWave
 * @description
 * <p>
 * Frequency modulated <strong>bandwidth-limited</strong> square wave using a
 * fourier series of harmonics. Also uses a secondary wave to modulate the
 * frequency of the main wave.
 * </p>
 *
 * <p>
 * <strong>Note:</strong> You must NEVER call the update() method on the
 * modulating wave.
 * </p>
 * @augments toxi/math/waves/AbstractWave
 */ var FMHarmonicSquareWave = function(a, b, c, d, e) {
    this.maxHarmonics = 3;
    if (typeof c == "number") {
        if (e === undefined) e = new ConstantWave(0);
        AbstractWave.call(this, a, b, c, d);
        this.fmod = e;
    } else {
        AbstractWave.call(this, a, b);
        this.fmod = c;
    }
};
extend(FMHarmonicSquareWave, AbstractWave);
FMHarmonicSquareWave.prototype.getClass = function() {
    return "FMHarmonicSquareWave";
};
FMHarmonicSquareWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.fmod.pop();
};
FMHarmonicSquareWave.prototype.push = function() {
    this.parent.push.call(this);
    this.fmod.push();
};
FMHarmonicSquareWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
};
/**
 * @class Progresses the wave and updates the result value. You must NEVER call the
 * update() method on the modulating wave since this is handled
 * automatically by this method.
 *
 * @see toxi.math.waves.AbstractWave#update()
 * @member toxi
 * @augments AbstractWave
 */ FMHarmonicSquareWave.prototype.update = function() {
    this.value = 0;
    for(var i = 1; i <= this.maxHarmonics; i += 2)this.value += 1 / i * Math.sin(i * this.phase);
    this.value *= this.amp;
    this.value += this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = FMHarmonicSquareWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"1zHGg":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/FMSawtoothWave
 * @augments toxi/math/waves/AbstractWave
 */ var FMSawtoothWave = function(a, b, c, d, e) {
    if (typeof c == "number") {
        AbstractWave.call(this, a, b, c, d);
        this.fmod = e;
    } else {
        AbstractWave.call(this, a, b);
        this.fmod = c;
    }
};
extend(FMSawtoothWave, AbstractWave);
FMSawtoothWave.prototype.getClass = function() {
    return "FMSawtoothWave";
};
FMSawtoothWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.fmod.pop();
};
FMSawtoothWave.prototype.push = function() {
    this.parent.push.call(this);
    this.fmod.push();
};
FMSawtoothWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
};
FMSawtoothWave.prototype.update = function() {
    this.value = (this.phase / AbstractWave.TWO_PI * 2 - 1) * this.amp + this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = FMSawtoothWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"eGcz7":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/FMSineWave
 * @augments toxi/math/waves/AbstractWave
 */ var FMSineWave = function(a, b, c, d, e) {
    if (typeof c == "number") {
        AbstractWave.call(this, a, b, c, d);
        this.fmod = e;
    } else {
        AbstractWave.call(this, a, b);
        this.fmod = c;
    }
};
extend(FMSineWave, AbstractWave);
FMSineWave.prototype.getClass = function() {
    return "FMSineWave";
};
FMSineWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.fmod.pop();
};
FMSineWave.prototype.push = function() {
    this.parent.push.call(this);
    this.fmod.push();
};
FMSineWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
};
FMSineWave.prototype.update = function() {
    this.value = Math.sin(this.phase) * this.amp + this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = FMSineWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"8RLM4":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave'), ConstantWave = require('./ConstantWave');
/**
 * @module toxi/math/waves/FMSquareWave
 * @augments toxi/math/waves/AbstractWave
 */ var FMSquareWave = function(a, b, c, d, e) {
    if (typeof c == "number") {
        if (e === undefined) AbstractWave.call(this, a, b, c, d, new ConstantWave(0));
        else {
            AbstractWave.call(this, a, b, c, d);
            this.fmod = e;
        }
    } else {
        AbstractWave.call(this, a, b);
        this.fmod = c;
    }
};
extend(FMSquareWave, AbstractWave);
FMSquareWave.prototype.getClass = function() {
    return "FMSquareWave";
};
FMSquareWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.fmod.pop();
};
FMSquareWave.prototype.push = function() {
    this.parent.push.call(this);
    this.fmod.push();
};
FMSquareWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
};
FMSquareWave.prototype.update = function() {
    this.value = (this.phase / AbstractWave.TWO_PI < 0.5 ? 1 : -1) * this.amp + this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = FMSquareWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q","./ConstantWave":"k1gYL"}],"a5eIv":[function(require,module,exports) {
var extend = require('../../internals').extend, mathUtils = require('../mathUtils'), AbstractWave = require('./AbstractWave'), ConstantWave = require('./ConstantWave');
/**
 * @module toxi/math/waves/FMTriangleWave
 * @augments toxi/math/waves/AbstractWave
 */ var FMTriangleWave = function(a, b, c, d, e) {
    if (typeof c == "number") {
        if (e !== undefined) {
            AbstractWave.call(this, a, b, c, d);
            this.fmod = e;
        } else AbstractWave.call(this, a, b, c, d, new ConstantWave(0));
    } else AbstractWave.call(this, a, b, 1, 0);
};
extend(FMTriangleWave, AbstractWave);
FMTriangleWave.prototype.getClass = function() {
    return "FMTriangleWave";
};
FMTriangleWave.prototype.pop = function() {
    this.parent.pop.call(this);
    this.fmod.pop();
};
FMTriangleWave.prototype.push = function() {
    this.parent.push.call(this);
    this.fmod.push();
};
FMTriangleWave.prototype.reset = function() {
    this.parent.reset.call(this);
    this.fmod.reset();
};
FMTriangleWave.prototype.update = function() {
    this.value = 2 * this.amp * (Math.abs(AbstractWave.PI - this.phase) * mathUtils.INV_PI - 0.5) + this.offset;
    this.cyclePhase(this.frequency + this.fmod.update());
    return this.value;
};
module.exports = FMTriangleWave;

},{"../../internals":"iIw4Q","../mathUtils":"bF4PI","./AbstractWave":"dMl3Q","./ConstantWave":"k1gYL"}],"6k45T":[function(require,module,exports) {
var extend = require('../../internals').extend, AbstractWave = require('./AbstractWave');
/**
 * @module toxi/math/waves/SineWave
 * @augments toxi/math/wave/AbstractWave
 * member toxi
 * @augments AbstractWave
 * @param {Number} [phase] phase
 * @param {Number} [freq] frequency
 * @param {Number} [amp] amplitude
 * @param {Number} [offset] offset
 */ var SineWave = function(phase, freq, amp, offset) {
    AbstractWave.call(this, phase, freq, amp, offset);
};
extend(SineWave, AbstractWave);
SineWave.prototype.getClass = function() {
    return "SineWave";
};
SineWave.prototype.update = function() {
    this.value = Math.sin(this.phase) * this.amp + this.offset;
    this.cyclePhase(this.frequency);
    return this.value;
};
module.exports = SineWave;

},{"../../internals":"iIw4Q","./AbstractWave":"dMl3Q"}],"ldSYI":[function(require,module,exports) {
module.exports = {
    ParticlePath2D: require('./physics2d/ParticlePath2D'),
    ParticleString2D: require('./physics2d/ParticleString2D'),
    PullBackString2D: require('./physics2d/PullBackString2D'),
    VerletConstrainedSpring2D: require('./physics2d/VerletConstrainedSpring2D'),
    VerletMinDistanceSpring2D: require('./physics2d/VerletMinDistanceSpring2D'),
    VerletParticle2D: require('./physics2d/VerletParticle2D'),
    VerletPhysics2D: require('./physics2d/VerletPhysics2D'),
    VerletSpring2D: require('./physics2d/VerletSpring2D')
};
module.exports.behaviors = require('./physics2d/behaviors');
module.exports.constraints = require('./physics2d/constraints');

},{"./physics2d/ParticlePath2D":"jrP7H","./physics2d/ParticleString2D":"hDykA","./physics2d/PullBackString2D":"1K9JS","./physics2d/VerletConstrainedSpring2D":"15WB7","./physics2d/VerletMinDistanceSpring2D":"3p7Fu","./physics2d/VerletParticle2D":"gUtkL","./physics2d/VerletPhysics2D":"fo4OG","./physics2d/VerletSpring2D":"bfMyV","./physics2d/behaviors":"fjrB5","./physics2d/constraints":"4ofSD"}],"jrP7H":[function(require,module,exports) {
var internals = require('../internals'), Spline2D = require('../geom/Spline2D'), VerletParticle2D = require('./VerletParticle2D');
var ParticlePath2D = function(points) {
    Spline2D.call(this, points);
    this.particles = [];
};
internals.extend(ParticlePath2D, Spline2D);
//public
ParticlePath2D.prototype.createParticles = function(physics, subDiv, step, mass) {
    this.particles = [];
    this.computeVertices(subDiv);
    var i = 0;
    var dv = this.getDecimatedVertices(step, true);
    for(i = 0; i < dv.length; i++){
        var v = dv[i];
        var p = new VerletParticle2D(v, mass);
        this.particles.push(p);
        physics.addParticle(p);
    }
    return this.particles;
};
module.exports = ParticlePath2D;

},{"../internals":"iIw4Q","../geom/Spline2D":"f1xbM","./VerletParticle2D":"gUtkL"}],"gUtkL":[function(require,module,exports) {
var internals = require('../internals'), Vec2D = require('../geom/Vec2D');
var VerletParticle2D = function(x, y, w) {
    this.force = new Vec2D();
    if (internals.has.XY(x)) {
        if (internals.is.VerletParticle2D(x)) {
            y = x.y;
            w = x.weight;
            x = x.x;
            this.isLocked = x.isLocked;
        } else if (y === undefined) {
            y = x.y;
            w = 1;
            x = x.x;
        } else {
            w = y;
            y = x.y;
            x = x.x;
        }
    }
    Vec2D.call(this, x, y);
    this.isLocked = false;
    this.prev = new Vec2D(this);
    this.temp = new Vec2D();
    w = w || 1;
    this.setWeight(w);
};
internals.extend(VerletParticle2D, Vec2D);
VerletParticle2D.prototype.addBehavior = function(behavior, timeStep) {
    if (this.behaviors === undefined) this.behaviors = [];
    if (behavior === undefined) throw new Error("behavior was undefined");
    timeStep = timeStep === undefined ? 1 : timeStep;
    behavior.configure(timeStep);
    this.behaviors.push(behavior);
    return this;
};
VerletParticle2D.prototype.addConstraint = function(c) {
    if (this.constraints === undefined) this.constraints = [];
    this.constraints.push(c);
    return this;
};
VerletParticle2D.prototype.addForce = function(f) {
    this.force.addSelf(f);
    return this;
};
VerletParticle2D.prototype.addVelocity = function(v) {
    this.prev.subSelf(v);
    return this;
};
VerletParticle2D.prototype.applyBehaviors = function() {
    if (this.behaviors !== undefined) {
        var i = 0, len = this.behaviors.length;
        for(i = 0; i < len; i++)this.behaviors[i].applyBehavior(this);
    }
};
VerletParticle2D.prototype.applyConstraints = function() {
    if (this.constraints !== undefined) {
        var i = 0, len = this.constraints.length;
        for(i = 0; i < len; i++)this.constraints[i].applyConstraint(this);
    }
};
VerletParticle2D.prototype.clearForce = function() {
    this.force.clear();
    return this;
};
VerletParticle2D.prototype.clearVelocity = function() {
    this.prev.set(this);
    return this;
};
VerletParticle2D.prototype.getInvWeight = function() {
    return this.invWeight;
};
VerletParticle2D.prototype.getPreviousPosition = function() {
    return this.prev;
};
VerletParticle2D.prototype.getVelocity = function() {
    return this.sub(this.prev);
};
VerletParticle2D.prototype.getWeight = function() {
    return this.weight;
};
VerletParticle2D.prototype.lock = function() {
    this.isLocked = true;
    return this;
};
VerletParticle2D.prototype.removeAllBehaviors = function() {
    this.behaviors = [];
    return this;
};
VerletParticle2D.prototype.removeAllConstraints = function() {
    this.constraints = [];
    return this;
};
VerletParticle2D.prototype.removeBehavior = function(b) {
    return internals.removeItemFrom(b, this.behaviors);
};
VerletParticle2D.prototype.removeConstraint = function(c) {
    return internals.removeItemFrom(c, this.constraints);
};
VerletParticle2D.prototype.scaleVelocity = function(scl) {
    this.prev.interpolateToSelf(this, 1 - scl);
    return this;
};
VerletParticle2D.prototype.setPreviousPosition = function(p) {
    this.prev.set(p);
    return this;
};
VerletParticle2D.prototype.setWeight = function(w) {
    this.weight = w;
    this.invWeight = w !== 0 ? 1 / w : 0; //avoid divide by zero
};
VerletParticle2D.prototype.unlock = function() {
    this.clearVelocity();
    this.isLocked = false;
    return this;
};
VerletParticle2D.prototype.update = function() {
    if (!this.isLocked) {
        this.applyBehaviors();
        //applyForce() - inline
        this.temp.set(this);
        this.addSelf(this.sub(this.prev).addSelf(this.force.scale(this.weight)));
        this.prev.set(this.temp);
        this.force.clear();
        //
        this.applyConstraints();
    }
};
module.exports = VerletParticle2D;

},{"../internals":"iIw4Q","../geom/Vec2D":"hVtPc"}],"hDykA":[function(require,module,exports) {
var VerletParticle2D = require('./VerletParticle2D'), VerletSpring2D = require('./VerletSpring2D');
/**
* Utility builder/grouping/management class to connect a set of particles into
* a physical string/thread. Custom spring types can be used by subclassing this
* class and overwriting the
* {@link #createSpring(VerletParticle2D, VerletParticle2D, float, float)}
method.
*/ /**
  Construct a ParticleString2D,
  parameter options:
  1 - options object
  3 - VerletPhysics2D physics, Array<VerletParticle2D> plist, Number strength
  6 - VerletPhysics2D physic, Vec2D pos, Vec2D step, Number num, Number mass, Number strength
  */ var ParticleString2D = function() {
    var opts = {
        physics: undefined,
        plist: undefined,
        pos: undefined,
        step: undefined,
        num: undefined,
        mass: undefined,
        strength: undefined
    }, is6ParamConstructor = false;
    if (arguments.length === 0) throw new Error("Incorrect Parameters");
    else if (arguments.length == 1) {
        var arg = arguments[0];
        for(var prop in arg)opts[prop] = arg[prop];
    } else {
        opts.physics = arguments[0];
        if (arguments.length == 6) {
            opts.pos = arguments[1];
            opts.step = arguments[2];
            opts.num = arguments[3];
            opts.mass = arguments[4];
            opts.strength = arguments[5];
        } else {
            opts.plist = arguments[1];
            opts.strength = arguments[2];
        }
    }
    if (opts.num !== undefined && opts.pos !== undefined && opts.step !== undefined && opts.mass !== undefined) is6ParamConstructor = true;
    if (!is6ParamConstructor && opts.plist === undefined) throw new Error("Incorrect Parameters, please supply plist or num, pos, step & mass");
    this.physics = opts.physics;
    this.links = [];
    var prev, p, s, strength, i = 0;
    if (is6ParamConstructor) {
        var pos = opts.pos.copy(), step = opts.step, mass = opts.mass, len = step.magnitude();
        this.particles = [];
        strength = opts.strength;
        for(i = 0; i < opts.num; i++){
            p = new VerletParticle2D(pos.copy(), mass);
            this.particles.push(p);
            this.physics.particles.push(p);
            if (prev !== undefined) {
                s = this.createSpring(prev, p, len, strength);
                this.links.push(s);
                this.physics.addSpring(s);
            }
            prev = p;
            pos.addSelf(step);
        }
    } else {
        strength = opts.strength;
        this.particles = opts.plist || [];
        for(i = 0; i < this.particles.length; i++){
            p = this.particles[i];
            this.physics.addParticle(p);
            if (prev !== undefined) {
                s = this.createSpring(prev, p, prev.distanceTo(p), strength);
                this.links.push(s);
                this.physics.addSpring(s);
            }
            prev = p;
        }
    }
};
ParticleString2D.prototype = {
    clear: function() {
        for(var i = 0, len = this.links.length; i < len; i++)this.physics.removeSpringElements(this.links[i]);
        this.particles = [];
        this.links = [];
    },
    createSpring: function(a, b, len, strength) {
        return new VerletSpring2D(a, b, len, strength);
    },
    getHead: function() {
        return this.particles[0];
    },
    getNumParticles: function() {
        return this.particles.length;
    },
    getTail: function() {
        return this.particles[this.particles.length - 1];
    }
};
module.exports = ParticleString2D;

},{"./VerletParticle2D":"gUtkL","./VerletSpring2D":"bfMyV"}],"bfMyV":[function(require,module,exports) {
var VerletSpring2D = function(a, b, len, str) {
    this.a = a;
    this.b = b;
    this.restLength = len;
    this.strength = str;
};
VerletSpring2D.EPS = 0.000001;
VerletSpring2D.prototype = {
    getRestLength: function() {
        return this.restLength;
    },
    getStrength: function() {
        return this.strength;
    },
    lockA: function(s) {
        this.isALocked = s;
        return this;
    },
    lockB: function(s) {
        this.isBLocked = s;
        return this;
    },
    setRestLength: function(len) {
        this.restLength = len;
        this.restLengthSquared = len * len;
        return this;
    },
    setStrength: function(strength) {
        this.strength = strength;
        return this;
    },
    update: function(applyConstraints) {
        var delta = this.b.sub(this.a);
        //add minute offset to avoid div-by-zero errors
        var dist = delta.magnitude() + VerletSpring2D.EPS;
        var normDistStrength = (dist - this.restLength) / (dist * (this.a.invWeight + this.b.invWeight)) * this.strength;
        if (!this.a.isLocked && !this.isALocked) {
            this.a.addSelf(delta.scale(normDistStrength * this.a.invWeight));
            if (applyConstraints) this.a.applyConstraints();
        }
        if (!this.b.isLocked && !this.isBLocked) {
            this.b.addSelf(delta.scale(-normDistStrength * this.b.invWeight));
            if (applyConstraints) this.b.applyConstraints();
        }
    }
};
module.exports = VerletSpring2D;

},{}],"1K9JS":[function(require,module,exports) {
var internals = require('../internals'), VerletSpring2D = require('./VerletSpring2D');
/**
* Creates a pullback spring (default restlength=0.5) between 2 particles and
* locks the first one given at the current position. The spring is only
* enforced if the current length of the spring exceeds the rest length. This
* behaviour is the opposite to the {@link VerletMinDistanceSpring2D}.
*/ var PullBackString2D = function(a, b, strength) {
    VerletSpring2D.apply(this, [
        a,
        b,
        0,
        strength
    ]);
    a.lock();
    this.setRestLength(0.5);
};
internals.extend(PullBackString2D, VerletSpring2D);
PullBackString2D.prototype.update = function(applyConstraints) {
    if (this.b.distanceToSquared(this.a) > this.restLengthSquared) this.parent.update.call(this, applyConstraints);
};
module.exports = PullBackString2D;

},{"../internals":"iIw4Q","./VerletSpring2D":"bfMyV"}],"15WB7":[function(require,module,exports) {
var internals = require('../internals'), VerletSpring2D = require('./VerletSpring2D');
var VerletConstrainedSpring2D = function(particleA, particleB, len, str, limit) {
    VerletSpring2D.call(this, particleA, particleB, len, str);
    this.limit = limit === undefined ? Number.MAX_VALUE : limit;
};
internals.extend(VerletConstrainedSpring2D, VerletSpring2D);
VerletConstrainedSpring2D.update = function(applyConstraints) {
    var delta = this.b.sub(this.a);
    // add minute offset to avoid div-by-zero errors
    var dist = delta.magnitude() + VerletSpring2D.EPS;
    var normDistStrength = (dist - this.restLength) / (dist * (this.a.invWeight + this.b.invWeight)) * this.strength;
    if (!this.a.isLocked && !this.isALocked) {
        this.a.addSelf(delta.scale(normDistStrength * this.a.invWeight).limit(this.limit));
        if (applyConstraints) this.a.applyConstraints();
    }
    if (!this.b.isLocked && !this.isBLocked) {
        this.b.subSelf(delta.scale(normDistStrength * this.b.invWeight).limit(this.limit));
        if (applyConstraints) this.b.applyConstraints();
    }
};
module.exports = VerletConstrainedSpring2D;

},{"../internals":"iIw4Q","./VerletSpring2D":"bfMyV"}],"3p7Fu":[function(require,module,exports) {
var internals = require('../internals'), VerletSpring2D = require('./VerletSpring2D');
var VerletMinDistanceSpring2D = function(particleA, particleB, len, str) {
    VerletSpring2D.call(this, particleA, particleB, len, str);
    this.setRestLength(len);
};
internals.extend(VerletMinDistanceSpring2D, VerletSpring2D);
VerletMinDistanceSpring2D.prototype.update = function(applyConstraints) {
    if (this.b.distanceToSquared(this.a) < this.restLengthSquared) this.parent.update.call(this, applyConstraints);
};
module.exports = VerletMinDistanceSpring2D;

},{"../internals":"iIw4Q","./VerletSpring2D":"bfMyV"}],"fo4OG":[function(require,module,exports) {
var internals = require('../internals'), GravityBehavior = require('./behaviors/GravityBehavior'), Rect = require('../geom/Rect'), Vec2D = require('../geom/Vec2D'), id = 0;
var VerletPhysics2D = function(gravity, numIterations, drag, timeStep) {
    var opts = {
        numIterations: 50,
        drag: 0,
        timeStep: 1
    };
    var a;
    if (arguments.length == 1 && (arguments[0].gravity || arguments[0].numIterations || arguments[0].timeStep || arguments[0].drag)) {
        a = arguments[0];
        opts.gravity = a.gravity;
        opts.numIterations = a.numIterations || opts.numIterations;
        opts.drag = a.drag || opts.drag;
        opts.timeStep = a.timeStep || opts.timeStep;
    } else if (arguments.length == 1) opts.gravity = gravity; //might be Vec2D, will get handled below
    else if (arguments.length == 4) {
        opts.gravity = gravity;
        opts.numIterations = numIterations;
        opts.drag = drag;
        opts.timeStep = timeStep;
    }
    this.behaviors = [];
    this.particles = [];
    this.springs = [];
    this.numIterations = opts.numIterations;
    this.timeStep = opts.timeStep;
    this.setDrag(opts.drag);
    if (opts.gravity) {
        if (internals.has.XY(opts.gravity)) opts.gravity = new GravityBehavior(new Vec2D(opts.gravity));
        this.addBehavior(opts.gravity);
    }
    this.id = id++;
};
VerletPhysics2D.addConstraintToAll = function(c, list) {
    for(var i = 0; i < list.length; i++)list[i].addConstraint(c);
};
VerletPhysics2D.removeConstraintFromAll = function(c, list) {
    for(var i = 0; i < list.length; i++)list[i].removeConstraint(c);
};
VerletPhysics2D.prototype = {
    addBehavior: function(behavior) {
        behavior.configure(this.timeStep);
        this.behaviors.push(behavior);
    },
    addParticle: function(p) {
        this.particles.push(p);
        return this;
    },
    addSpring: function(s) {
        if (this.getSpring(s.a, s.b) === undefined) this.springs.push(s);
        return this;
    },
    clear: function() {
        this.particles = [];
        this.springs = [];
        return this;
    },
    constrainToBounds: function() {
        var p, i = 0, len = this.particles.length;
        for(i = 0; i < len; i++){
            p = this.particles[i];
            if (p.bounds !== undefined) p.constrain(p.bounds);
        }
        if (this.worldBounds !== undefined) for(i = 0; i < len; i++){
            p = this.particles[i];
            p.constrain(this.worldBounds);
        }
    },
    getCurrentBounds: function() {
        var min = new Vec2D(Number.MAX_VALUE, Number.MAX_VALUE);
        var max = new Vec2D(Number.MIN_VALUE, Number.MIN_VALUE);
        var i = 0, pLen = this.particles.length, p;
        for(; i < pLen; i++){
            p = this.particles[i];
            min.minSelf(p);
            max.maxSelf(p);
        }
        return new Rect(min, max);
    },
    getDrag: function() {
        return 1 - this.drag;
    },
    getNumIterations: function() {
        return this.numIterations;
    },
    getSpring: function(a, b) {
        var i = 0, sLen = this.springs.length;
        for(; i < sLen; i++){
            var s = this.springs[i];
            if (s.a === a && s.b === b || s.a === b && s.b === b) return s;
        }
        return undefined;
    },
    getTimeStep: function() {
        return this.timeStep;
    },
    getWorldBounds: function() {
        return this.worldBounds;
    },
    removeBehavior: function(c) {
        return internals.removeItemFrom(c, this.behaviors);
    },
    removeParticle: function(p) {
        return internals.removeItemFrom(p, this.particles);
    },
    removeSpring: function(s) {
        return internals.removeItemFrom(s, this.springs);
    },
    removeSpringElements: function(s) {
        if (this.removeSpring(s) !== undefined) return this.removeParticle(s.a) && this.removeParticle(s.b);
        return false;
    },
    setDrag: function(drag) {
        this.drag = 1 - drag;
    },
    setNumIterations: function(numIterations) {
        this.numIterations = numIterations;
    },
    setTimeStep: function(timeStep) {
        this.timeStep = timeStep;
        var i = 0, l = this.behaviors.length;
        for(; i < l; i++)this.behaviors[i].configure(timeStep);
    },
    setWorldBounds: function(world) {
        this.worldBounds = world;
        return this;
    },
    update: function() {
        this.updateParticles();
        this.updateSprings();
        this.constrainToBounds();
        return this;
    },
    updateParticles: function() {
        var i = 0, j = 0, bLen = this.behaviors.length, pLen = this.particles.length, b, p;
        for(; i < bLen; i++){
            b = this.behaviors[i];
            for(j = 0; j < pLen; j++)b.applyBehavior(this.particles[j]);
        }
        for(j = 0; j < pLen; j++){
            p = this.particles[j];
            p.scaleVelocity(this.drag);
            p.update();
        }
    },
    updateSprings: function() {
        var i = this.numIterations, sLen = this.springs.length, j = 0;
        for(; i > 0; i--)for(j = 0; j < sLen; j++)this.springs[j].update(i === 1);
    }
};
module.exports = VerletPhysics2D;

},{"../internals":"iIw4Q","./behaviors/GravityBehavior":"gOfOh","../geom/Rect":"7QDy8","../geom/Vec2D":"hVtPc"}],"gOfOh":[function(require,module,exports) {
var internals = require('../../internals'), ConstantForceBehavior = require('./ConstantForceBehavior');
var GravityBehavior = function(gravityVec) {
    ConstantForceBehavior.call(this, gravityVec);
};
internals.extend(GravityBehavior, ConstantForceBehavior);
GravityBehavior.prototype.configure = function(timeStep) {
    this.timeStep = timeStep;
    this.scaledForce = this.force.scale(timeStep * timeStep);
};
module.exports = GravityBehavior;

},{"../../internals":"iIw4Q","./ConstantForceBehavior":"ghyld"}],"ghyld":[function(require,module,exports) {
var Vec2D = require('../../geom/Vec2D');
var ConstantForceBehavior = function(force) {
    this.force = force;
    this.scaledForce = new Vec2D();
    this.timeStep = 0;
};
ConstantForceBehavior.prototype = {
    applyBehavior: function(p) {
        p.addForce(this.scaledForce);
    },
    configure: function(timeStep) {
        this.timeStep = timeStep;
        this.setForce(this.force);
    },
    getForce: function() {
        return this.force;
    },
    setForce: function(forceVec) {
        this.force = forceVec;
        this.scaledForce = this.force.scale(this.timeStep);
    },
    toString: function() {
        return "behavior force: " + this.force + " scaledForce: " + this.scaledForce + " timeStep: " + this.timeStep;
    }
};
module.exports = ConstantForceBehavior;

},{"../../geom/Vec2D":"hVtPc"}],"fjrB5":[function(require,module,exports) {
var AttractionBehavior = require('./behaviors/AttractionBehavior');
var ConstantForceBehavior = require('./behaviors/ConstantForceBehavior');
var GravityBehavior = require('./behaviors/GravityBehavior');
exports.AttractionBehavior = AttractionBehavior;
exports.ConstantForceBehavior = ConstantForceBehavior;
exports.GravityBehavior = GravityBehavior;

},{"./behaviors/AttractionBehavior":"fOlnw","./behaviors/ConstantForceBehavior":"ghyld","./behaviors/GravityBehavior":"gOfOh"}],"fOlnw":[function(require,module,exports) {
var AttractionBehavior = function(attractor, radius, strength, jitter) {
    if (arguments.length < 3) throw new Error("Constructor received incorrect Parameters");
    this.jitter = jitter || 0;
    this.attractor = attractor;
    this.strength = strength;
    this.setRadius(radius);
};
AttractionBehavior.prototype = {
    applyBehavior: function(p) {
        var delta = this.attractor.sub(p);
        var dist = delta.magSquared();
        if (dist < this.radiusSquared) {
            var f = delta.normalizeTo(1 - dist / this.radiusSquared).jitter(this.jitter).scaleSelf(this.attrStrength);
            p.addForce(f);
        }
    },
    configure: function(timeStep) {
        this.timeStep = timeStep;
        this.setStrength(this.strength);
    },
    getAttractor: function() {
        return this.attractor;
    },
    getJitter: function() {
        return this.jitter;
    },
    getRadius: function() {
        return this.radius;
    },
    getStrength: function() {
        return this.strength;
    },
    setAttractor: function(attractor) {
        this.attractor = attractor;
    },
    setJitter: function(jitter) {
        this.jitter = jitter;
    },
    setRadius: function(r) {
        this.radius = r;
        this.radiusSquared = r * r;
    },
    setStrength: function(strength) {
        this.strength = strength;
        this.attrStrength = strength * this.timeStep;
    }
};
module.exports = AttractionBehavior;

},{}],"4ofSD":[function(require,module,exports) {
var AngularConstraint = require('./constraints/AngularConstraint');
var AxisConstraint = require('./constraints/AxisConstraint');
var CircularConstraint = require('./constraints/CircularConstraint');
var MaxConstraint = require('./constraints/MaxConstraint');
var MinConstraint = require('./constraints/MinConstraint');
var RectConstraint = require('./constraints/RectConstraint');
/** @module toxi/physics2d/constraints */ exports.AngularConstraint = AngularConstraint;
exports.AxisConstraint = AxisConstraint;
exports.CircularConstraint = CircularConstraint;
exports.MaxConstraint = MaxConstraint;
exports.MinConstraint = MinConstraint;
exports.RectConstraint = RectConstraint;

},{"./constraints/AngularConstraint":"XTS6A","./constraints/AxisConstraint":"5Muul","./constraints/CircularConstraint":"pntwn","./constraints/MaxConstraint":"56Ayu","./constraints/MinConstraint":"2Qe2W","./constraints/RectConstraint":"4ial1"}],"XTS6A":[function(require,module,exports) {
var Vec2D = require('../../geom/Vec2D');
//either Vec2D + angle
/**
     * @param {Vec2D | Number} vector | angle
     * @param {Number} [theta]
     */ var AngularConstraint = function(theta_p, theta) {
    if (arguments.length > 1) {
        this.theta = theta;
        this.rootPos = new Vec2D(theta_p);
    } else {
        this.rootPos = new Vec2D();
        this.theta = theta_p;
    }
//due to lack-of int/float types, no support of theta in degrees
};
AngularConstraint.prototype.applyConstraint = function(p) {
    var delta = p.sub(this.rootPos);
    var heading = Math.floor(delta.heading() / this.theta) * this.theta;
    p.set(this.rootPos.add(Vec2D.fromTheta(heading).scaleSelf(delta.magnitude())));
};
module.exports = AngularConstraint;

},{"../../geom/Vec2D":"hVtPc"}],"5Muul":[function(require,module,exports) {
/**
 * Constrains a particle's movement by locking a given axis to a fixed value.
 */ var AxisConstraint = function(axis, constraintAmount) {
    this.axis = axis;
    this.constraint = constraintAmount;
};
AxisConstraint.prototype.applyConstraint = function(p) {
    p.setComponent(this.axis, this.constraint);
};
module.exports = AxisConstraint;

},{}],"pntwn":[function(require,module,exports) {
var Circle = require('../../geom/Circle');
var CircularConstraint = function(a, b) {
    if (arguments.length == 1) this.circle = a;
    else this.circle = new Circle(a, b);
};
CircularConstraint.prototype.applyConstraint = function(p) {
    if (this.circle.containsPoint(p)) p.set(this.circle.add(p.sub(this.circle).normalizeTo(this.circle.getRadius())));
};
module.exports = CircularConstraint;

},{"../../geom/Circle":"7rYzr"}],"56Ayu":[function(require,module,exports) {
var MaxConstraint = function(axis, threshold) {
    this.axis = axis;
    this.threshold = threshold;
};
MaxConstraint.prototype.applyConstraint = function(p) {
    if (p.getComponent(this.axis) > this.threshold) p.setComponent(this.axis, this.threshold);
};
module.exports = MaxConstraint;

},{}],"2Qe2W":[function(require,module,exports) {
var MinConstraint = function(axis, threshold) {
    this.axis = axis;
    this.threshold = threshold;
};
MinConstraint.prototype.applyConstraint = function(p) {
    if (p.getComponent(this.axis) < this.threshold) p.setComponent(this.axis, this.threshold);
};
module.exports = MinConstraint;

},{}],"4ial1":[function(require,module,exports) {
var Vec2D = require('../../geom/Vec2D'), has = require('../../internals/has'), Ray2D = require('../../geom/Ray2D'), Rect = require('../../geom/Rect');
var RectConstraint = function(a, b) {
    if (arguments.length == 1) {
        if (typeof a.copy === 'function') //if passed in as a toxi.geom.Rect
        this.rect = a.copy();
        else if (has.XYWidthHeight(a)) //if passed in as { x: y: width: height: }
        this.rect = new Rect(a);
    } else if (arguments.length > 1) this.rect = new Rect(a, b);
    if (!this.rect) throw new Error('Received Incorrect arguments');
    this.intersectRay = new Ray2D(this.rect.getCentroid(), new Vec2D());
};
RectConstraint.prototype = {
    applyConstraint: function(p) {
        if (this.rect.containsPoint(p)) p.set(this.rect.intersectsRay(this.intersectRay.setDirection(this.intersectRay.sub(p)), 0, Number.MAX_VALUE));
    },
    getBox: function() {
        return this.rect.copy();
    },
    setBox: function(rect) {
        this.rect = rect.copy();
        this.intersectRay.set(this.rect.getCentroid());
    }
};
module.exports = RectConstraint;

},{"../../geom/Vec2D":"hVtPc","../../internals/has":"2hvR2","../../geom/Ray2D":"k92SH","../../geom/Rect":"7QDy8"}],"1JuYi":[function(require,module,exports) {
/** @module toxi/processing */ module.exports = {
    ToxiclibsSupport: require('./processing/ToxiclibsSupport')
};

},{"./processing/ToxiclibsSupport":"jfjml"}],"jfjml":[function(require,module,exports) {
var Matrix4x4 = require('../geom/Matrix4x4'), Vec3D = require('../geom/Vec3D'), TriangleMesh = require('../geom/mesh/TriangleMesh');
var ToxiclibsSupport = function(processing, optional_gfx) {
    if (typeof Processing === 'undefined') throw new Error("Processing.js has not been loaded");
    this.sketch = processing;
    this.app = processing;
    if (optional_gfx !== undefined) this.gfx = processing;
    else this.gfx = this.app;
    this._normalMap = new Matrix4x4().translateSelf(128, 128, 128).scaleSelf(127);
};
ToxiclibsSupport.prototype = {
    box: function(aabb, smooth) {
        var mesh = aabb.toMesh();
        if (smooth === undefined) smooth = false;
        if (smooth) mesh.computeVertexNormals();
        this.mesh(mesh, smooth, 0);
    },
    circle: function(p, radius) {
        this.gfx.ellipse(p.x, p.y, radius, radius);
    },
    cone: function() {
        var cone = arguments[0], res = 6, thetaOffset = 0, topClosed = true, bottomClosed = true, smooth = false;
        if (arguments.length == 5) {
            res = arguments[1];
            topClosed = arguments[2];
            bottomClosed = arguments[3];
            smooth = arguments[4];
        } else if (arguments.length == 3) {
            res = arguments[1];
            smooth = arguments[2];
        }
        var mesh = cone.toMesh({
            mesh: new TriangleMesh(),
            steps: res,
            thetaOffset: thetaOffset,
            topClosed: topClosed,
            bottomClosed: bottomClosed
        });
        if (smooth) mesh.computeVertexNormals();
        window.mesh = mesh;
        this.mesh(mesh, smooth, 0);
    },
    cylinder: function(cyl, res, smooth) {
        if (arguments.length == 1) this.mesh(cyl.toMesh(), false, 0);
        else {
            var mesh = cyl.toMesh(res, 0);
            if (smooth === undefined) smooth = false;
            if (smooth) mesh.computeVertexNormals();
            this.mesh(mesh, smooth, 0);
        }
    },
    /*
	Pjs currently doesn't provide access to PGraphics properties,
	such as ellipseMode. So I am allowing it as an optional propery
	*/ ellipse: function(e, ellipseMode) {
        var r = e.getRadii();
        if (ellipseMode === undefined) ellipseMode = this.app.CENTER;
        if (ellipseMode === this.app.CENTER) this.gfx.ellipse(e.x, e.y, r.x * 2, r.y * 2);
        else if (ellipseMode === this.app.RADIUS) this.gfx.ellipse(e.x, e.y, r.x * 2, r.y * 2);
        else if (ellipseMode === this.app.CORNER || this.gfx.ellipseMode === this.app.CORNERS) this.gfx.ellipse(e.x - r.x, e.y - r.y, r.x * 2, r.y * 2);
    },
    getGraphics: function() {
        return this.gfx;
    },
    line: function() {
        var a, b;
        if (arguments.length == 1) {
            var line = arguments[0];
            a = line.a;
            b = line.b;
        } else a = arguments[0], b = arguments[1];
        if (a.z === undefined) this.gfx.line(a.x, a.y, b.x, b.y);
        else this.gfx.line(a.x, a.y, a.z, b.x, b.y, b.z);
    },
    lineStrip2D: function(points) {
        //var isFilled = this.fill; //TODO <-- verify how this works!
        //this.gfx.fill = false;
        this.processVertices2D(points, this.app.POLYGON, false);
    //this.gfx.fill = isFilled;
    },
    lineStrip3D: function(points) {
        //var isFilled = this.gfx.fill;
        //this.gfx.fill = false;
        this.processVertices3D(points, this.app.POLYGON, false);
    //this.gfx.fill = isFilled;
    },
    mesh: function(mesh, smooth, normalLength) {
        if (smooth === undefined) smooth = false;
        if (normalLength === undefined) normalLength = 0;
        this.gfx.beginShape(this.app.TRIANGLES);
        var i = 0, len = mesh.faces.length;
        if (smooth) for(i = 0; i < len; i++){
            var f = mesh.faces[i];
            this.gfx.normal(f.a.normal.x, f.a.normal.y, f.a.normal.z);
            this.gfx.vertex(f.a.x, f.a.y, f.a.z);
            this.gfx.normal(f.b.normal.x, f.b.normal.y, f.b.normal.z);
            this.gfx.vertex(f.b.x, f.b.y, f.b.z);
            this.gfx.normal(f.c.normal.x, f.c.normal.y, f.c.normal.z);
            this.gfx.vertex(f.c.x, f.c.y, f.c.z);
        }
        else for(var i = 0; i < len; i++){
            var f = mesh.faces[i];
            this.gfx.normal(f.normal.x, f.normal.y, f.normal.z);
            this.gfx.vertex(f.a.x, f.a.y, f.a.z);
            this.gfx.vertex(f.b.x, f.b.y, f.b.z);
            this.gfx.vertex(f.c.x, f.c.y, f.c.z);
        }
        this.gfx.endShape();
        if (normalLength > 0) {
            var strokeCol = 0;
            var isStroked = this.gfx.stroke; //TODO <-- verify this works!
            if (isStroked) strokeCol = this.gfx.strokeColor;
            len = mesh.vertices.length;
            if (smooth) for(i = 0; i < len; i++){
                var v = mesh.vertices[i], w = v.add(v.normal.scale(normalLength));
                n = v.normal.scale(127);
                this.gfx.stroke(n.x + 128, n.y + 128, n.z + 128);
                this.gfx.line(v.x, v.y, v.z, w.x, w.y, w.z);
            }
            else {
                var third = 1 / 3;
                len = mesh.faces.length;
                for(i = 0; i < len; i++){
                    var f = mesh.faces[i], c = f.a.add(f.b).addSelf(f.c).scaleSelf(third), d = c.add(f.normal.scale(normalLength)), n = f.normal.scale(127);
                    this.gfx.stroke(n.x + 128, n.y + 128, n.z + 128);
                    this.gfx.line(c.x, c.y, c.z, d.x, d.y, d.z);
                }
            }
            if (isStroked) this.gfx.stroke(strokeCol);
            else this.gfx.noStroke();
        }
    },
    meshNormalMapped: function(mesh, vertexNormals, normalLength) {
        this.gfx.beginShape(this.app.TRIANGLES);
        var i = 0, len = mesh.faces.length;
        if (vertexNormals) for(i = 0; i < len; i++){
            var f = mesh.faces[i], n = this._normalMap.applyTo(f.a.normal);
            this.gfx.fill(n.x, n.y, n.z);
            this.gfx.normal(f.a.normal.x, f.a.normal.y, f.a.normal.z);
            this.gfx.vertex(f.a.x, f.a.y, f.a.z);
            n = this._normalMap.applyTo(f.b.normal);
            this.gfx.fill(n.x, n.y, n.z);
            this.gfx.normal(f.b.normal.x, f.b.normal.y, f.b.normal.z);
            this.gfx.vertex(f.b.x, f.b.y, f.b.z);
            n = this._normalMap.applyTo(f.c.nromal);
            this.gfx.fil(n.x, n.y, n.z);
            this.gfx.normal(f.c.normal.x, f.c.normal.y, f.c.normal.z);
            this.gfx.vertex(f.c.x, f.c.y, f.c.z);
        }
        else for(i = 0; i < len; i++){
            var f = mesh.faces[i];
            this.gfx.normal(f.normal.x, f.normal.y, f.normal.z);
            this.gfx.vertex(f.a.x, f.a.y, f.a.z);
            this.gfx.vertex(f.b.x, f.b.y, f.b.z);
            this.gfx.vertex(f.c.x, f.c.y, f.c.z);
        }
        this.gfx.endShape();
        if (normalLength > 0) {
            if (vertexNormals) {
                len = mesh.vertices.length;
                for(i = 0; i < len; i++){
                    var v = mesh.vertices[i], w = v.add(v.normal.scale(normalLength)), n = v.normal.scale(127);
                    this.gfx.stroke(n.x + 128, n.y + 128, n.z + 128);
                    this.gfx.line(v.x, v.y, v.z, w.x, w.y, w.z);
                }
            } else {
                len = mesh.faces.length;
                for(i = 0; i < len; i++){
                    var f = mesh.faces[i], c = f.getCentroid(), d = c.add(f.normal.scale(normalLength)), n = f.normal.scale(127);
                    this.gfx.stroke(n.x + 128, n.y + 128, n.z + 128);
                    this.gfx.line(c.x, c.y, c.z, d.x, d.y, d.z);
                }
            }
        }
    },
    origin: function() {
        var o = undefined, len = undefined;
        if (arguments.length == 1) {
            len = arguments[0];
            o = Vec3D.ZERO;
        } else {
            o = arguments[0];
            len = arguments[1];
        }
        this.gfx.stroke(255, 0, 0);
        this.gfx.line(o.x, o.y, o.z, o.x + len, o.y, o.z);
        this.gfx.stroke(0, 255, 0);
        this.gfx.line(o.x, o.y, o.z, o.x, o.y + len, o.z);
        this.gfx.stroke(0, 0, 255);
        this.gfx.line(o.x, o.y, o.z, o.x, o.y, o.z + len);
    },
    plane: function(plane, size) {
        this.mesh(plane.toMesh(size), false, 0);
    },
    point: function(p) {
        if (p.z === undefined) this.gfx.point(p.x, p.y);
        else this.gfx.point(p.x, p.y, p.z);
    },
    /**
	 * iterates and draws the provided 2D points
	 * @param {Array} or {Processing#Iterator} points to iterate
	 */ points2D: function(points) {
        this.processVertices2D(points, this.app.POINTS, false);
    },
    /**
	 * iterates and draws the provided 3D points
	 * @param {Array} or {Processing#Iterator} points to iterate
	 */ points3D: function(points) {
        this.processVertices3D(points, this.app.POINTS, false);
    },
    polygon2D: function(poly) {
        this.processVertices2D(poly.vertices, this.app.POLYGON, false);
    },
    /**
	 * Processes the 2D vertices from a Processing.js Iterator object
	 * @params {Iterator} iterator
	 * @params {Number} shapeID
	 * @params {Boolean} closed
	 */ processVertices2D: function(iterator, shapeID, closed) {
        //if first param wasnt passed in as a pjs Iterator, make it one
        if (iterator.hasNext === undefined || iterator.next === undefined) iterator = new this.app.ObjectIterator(iterator);
        this.gfx.beginShape(shapeID);
        for(var v = void 0; iterator.hasNext() && ((v = iterator.next()) || true);)this.gfx.vertex(v.x, v.y);
        /*var i=0,
			len = points.length;
		for(i=0;i<len;i++){
			var v = points[i];
			this.gfx.vertex(v.x,v.y);
		}*/ if (closed) this.gfx.endShape(this.app.CLOSE);
        else this.gfx.endShape();
    },
    /**
	 * Processes the 3D vertices from a Processing.js Iterator object
	 * @params {Iterator} iterator
	 * @params {Number} shapeID
	 * @params {Boolean} closed
	 */ processVertices3D: function(iterator, shapeID, closed) {
        //if first param wasnt passed in as a pjs Iterator, make it one
        if (iterator.hasNext === undefined || iterator.next === undefined) iterator = new this.app.ObjectIterator(iterator);
        this.gfx.beginShape(shapeID);
        for(var v = void 0; iterator.hasNext() && ((v = iterator.next()) || true);)this.gfx.vertex(v.x, v.y, v.z);
        /*var i=0,
			len = points.length;
		for(i=0;i<len;i++){
			var v = points[i];
			this.gfx.vertex(v.x,v.y,v.z);
		}*/ if (closed) this.gfx.endShape(this.app.CLOSE);
        else this.gfx.endShape();
    },
    ray: function(ray, length) {
        var e = ray.getPointAtDistance(length);
        if (ray.z === undefined) this.gfx.line(ray.x, ray.y, e.x, e.y);
        else this.gfx.line(ray.x, ray.y, ray.z, e.x, e.y, e.z);
    },
    /*
	Pjs currently doesn't provide access to PGraphics properties,
	such as rectMode. So I am allowing it as an optional propery
	*/ rect: function(r, rectMode) {
        if (rectMode === undefined) rectMode = this.app.CORNER;
        if (rectMode === this.app.CORNER) this.gfx.rect(r.x, r.y, r.width, r.height);
        else if (rectMode === this.app.CORNERS) this.gfx.rect(r.x, r.y, r.x + r.width, r.y + r.height);
        else if (rectMode === this.app.CENTER) this.gfx.rect(r.x + r.widt * 0.5, r.y + r.height * 0.5, r.width, r.height);
        else if (rectMode === this.app.RADIUS) {
            var rw = r.width * 0.5, rh = r.height * 0.5;
            this.gfx.rect(r.x + rw, r.y + rh, rw, rh);
        }
    },
    setGraphics: function(gfx) {
        this.gfx = gfx;
    },
    sphere: function(sphere, res, smooth) {
        this.mesh(sphere.toMesh(res), smooth);
    },
    texturedMesh: function(mesh, tex, smooth) {
        this.gfx.beginShape(this.app.TRIANGLES);
        this.gfx.texture(tex);
        var i = 0, len = mesh.faces.length;
        if (smooth) for(i = 0; i < len; i++){
            var f = mesh.faces[i];
            if (f.uvA !== undefined && f.uvB !== undefined && f.uvC !== undefined) {
                this.gfx.normal(f.a.normal.x, f.a.normal.y, f.a.normal.z);
                this.gfx.vertex(f.a.x, f.a.y, f.a.z, f.uvA.x, f.uvA.y);
                this.gfx.normal(f.b.normal.x, f.b.normal.y, f.b.normal.z);
                this.gfx.vertex(f.b.x, f.b.y, f.b.z, f.uvB.x, f.uvB.y);
                this.gfx.normal(f.c.normal.x, f.c.normal.y, f.c.normal.z);
                this.gfx.vertex(f.c.x, f.c.y, f.c.z, f.uvC.x, f.uvC.y);
            } else {
                this.gfx.vertex(f.a.x, f.a.y, f.a.z);
                this.gfx.vertex(f.b.x, f.b.y, f.b.z);
                this.gfx.vertex(f.c.x, f.c.y, f.c.z);
            }
        }
        else for(i = 0; i < len; i++){
            var f = mesh.faces[i];
            this.gfx.normal(f.normal.x, f.normal.y, f.normal.z);
            if (f.uvA !== undefined && f.uvB !== undefined && f.uvC !== undefined) {
                this.gfx.vertex(f.a.x, f.a.y, f.a.z, f.uvA.x, f.uvA.y);
                this.gfx.vertex(f.b.x, f.b.y, f.b.z, f.uvB.x, f.uvB.y);
                this.gfx.vertex(f.c.x, f.c.y, f.c.z, f.uvC.x, f.uvC.y);
            } else {
                this.gfx.vertex(f.a.x, f.a.y, f.a.z);
                this.gfx.vertex(f.b.x, f.b.y, f.b.z);
                this.gfx.vertex(f.c.x, f.c.y, f.c.z);
            }
        }
        this.gfx.endShape();
    },
    //works for Triangle3D or Triangle2D
    triangle: function(tri, isFullShape) {
        var isTriangle = function() {
            if (tri.a !== undefined && tri.b !== undefined && tri.c !== undefined) return tri.a.x !== undefined;
            return false;
        }, isTriangle3D = function() {
            if (isTriangle()) return tri.a.z !== undefined;
            return false;
        };
        if (isFullShape || isFullShape === undefined) this.gfx.beginShape(this.app.TRIANGLES);
        if (isTriangle3D()) {
            var n = tri.computeNormal();
            this.gfx.normal(n.x, n.y, n.z);
            this.gfx.vertex(tri.a.x, tri.a.y, tri.a.z);
            this.gfx.vertex(tri.b.x, tri.b.y, tri.b.z);
            this.gfx.vertex(tri.c.x, tri.c.y, tri.c.z);
        } else {
            this.gfx.vertex(tri.a.x, tri.a.y);
            this.gfx.vertex(tri.b.x, tri.b.y);
            this.gfx.vertex(tri.c.x, tri.c.y);
        }
        if (isFullShape || isFullShape === undefined) this.gfx.endShape();
    },
    vertex: function(v) {
        if (v.z === undefined) this.gfx.vertex(v.x, v.y);
        else this.gfx.vertex(v.x, v.y, v.z);
    }
};
module.exports = ToxiclibsSupport;

},{"../geom/Matrix4x4":"c1T7H","../geom/Vec3D":"2Czl7","../geom/mesh/TriangleMesh":"b6pcq"}],"duKsg":[function(require,module,exports) {
/** @module toxi.THREE */ module.exports = {
    ToxiclibsSupport: require('./THREE/ToxiclibsSupport')
};

},{"./THREE/ToxiclibsSupport":"4nxbx"}],"4nxbx":[function(require,module,exports) {
/*global THREE*/ var is = require('../internals/is');
/**
     * @author Kyle Phillips  / haptic-data.com
     * a bridge between Toxiclibs.js and Three.js
     *
     * Three.js does type-checking to ensure that vectors, vertices and faces are of THREE's types
     * this helps to do that conversion process.
     */ var ToxiclibsSupport = function(scene) {
    if (THREE === undefined) throw new Error("THREE.js has not been loaded");
    this.scene = scene;
    this.objectDictionary = {
    };
};
ToxiclibsSupport.createLineGeometry = function(line3d, geometry) {
    return ToxiclibsSupport.createMeshGeometry({
        vertices: [
            line3d.a,
            line3d.b
        ]
    }, geometry);
};
/**
     * create a THREE.Geometry with matching vertices to your triangleMesh
     * @param {toxi.geom.mesh.TriangleMesh} triangleMesh the toxiclibs.js triangle mesh to convert
     * @param {THREE.Geometry} [geometry] optional geometry to pass in if you would prefer to update
     * a geometry instead of create a new one
     * @returns {THREE.Geometry}
     */ ToxiclibsSupport.createMeshGeometry = function createMeshGeometry(obj, geometry) {
    geometry = geometry || new THREE.Geometry();
    //create a map where the unique id of the Vertex
    //references the index in the array
    var idIndexMap = {
    };
    var v, i, f, len, vertices;
    //add all vertices
    vertices = is.Array(obj) ? obj : obj.vertices;
    len = vertices.length;
    if (!vertices) throw new Error('no vertices found');
    for(i = 0; i < len; i++){
        v = vertices[i];
        geometry.vertices[i] = new THREE.Vector3(v.x, v.y, v.z);
        idIndexMap[v.id] = i;
    }
    if (obj.faces) {
        len = obj.faces.length;
        for(i = 0; i < len; i++){
            f = obj.faces[i];
            //normal.y *= -1;
            //unlike toxiclibs, a face in three.js are indices related to the vertices array
            geometry.faces[i] = new THREE.Face3(idIndexMap[f.a.id], idIndexMap[f.b.id], idIndexMap[f.c.id], new THREE.Vector3(f.normal.x, f.normal.y, f.normal.z));
        }
    }
    geometry.computeCentroids();
    geometry.computeVertexNormals();
    return geometry;
};
ToxiclibsSupport.createMesh = function(triangleMesh, material) {
    if (material === undefined) material = new THREE.MeshBasicMaterial();
    var geometry = ToxiclibsSupport.createMeshGeometry(triangleMesh);
    return new THREE.Mesh(geometry, material);
};
ToxiclibsSupport.createParticle = function(position, materials) {
    var particle = new THREE.Particle(materials);
    particle.position.x = position.x;
    particle.position.y = position.y;
    particle.position.z = position.z;
    return particle;
};
ToxiclibsSupport.prototype = {
    addLine: function(line3d, material) {
        if (material === undefined) material = new THREE.LineBasicMaterial();
        var geom = ToxiclibsSupport.createLineGeometry(line3d);
        var line = new THREE.Line(geom, material);
        this.scene.add(line);
        return line;
    },
    /**
         * add a toxiclibs.js mesh to the three.js scene
         * @param {Object|toxi.geom.mesh.TriangleMesh} obj_or_mesh either an options object or
         * the toxiclibsjs mesh
         * --
         * @param {toxi.geom.mesh.Trianglemesh} [obj_or_mesh.geometry] the mesh in the options object
         * @param {THREE.Material} [obj_or_mesh.material] the three.js material for the mesh
         * @param {boolean} [obj_or_mesh.holdInDictionary] should ToxiclibsSupport hold a reference?
         * --
         * @param {THREE.Material} [threeMaterials] the three.js material for the mesh
         */ addMesh: function(obj_or_mesh, threeMaterials) {
        var toxiTriangleMesh;
        if (arguments.length == 1) {
            toxiTriangleMesh = obj_or_mesh.geometry;
            threeMaterials = obj_or_mesh.materials;
        } else toxiTriangleMesh = obj_or_mesh;
        var threeMesh = this.createMesh(toxiTriangleMesh, threeMaterials);
        this.scene.add(threeMesh);
        return threeMesh;
    },
    addParticles: function(positions, material) {
        if (material === undefined) material = new THREE.ParticleBasicMaterial();
        positions = is.Array(positions) ? positions : [
            positions
        ];
        var particle = new THREE.Geometry(), pos;
        for(var i = 0, len = positions.length; i < len; i++){
            pos = positions[i];
            particle.vertices[i] = new THREE.Vector3(pos.x, pos.y, pos.z);
        }
        var particleSystem = new THREE.ParticleSystem(particle, material);
        this.scene.add(particleSystem);
        return particle;
    },
    createMeshGeometry: function(triangleMesh) {
        return ToxiclibsSupport.createMeshGeometry(triangleMesh);
    },
    createMesh: function(triangleMesh, material) {
        return ToxiclibsSupport.createMesh(triangleMesh, material);
    }
};
module.exports = ToxiclibsSupport;

},{"../internals/is":"4G2iR"}],"2Oq8Q":[function(require,module,exports) {
exports.datatypes = require('./util/datatypes');

},{"./util/datatypes":"hy5Xy"}],"hy5Xy":[function(require,module,exports) {
module.exports = {
    ArraySet: require('./datatypes/ArraySet'),
    FloatRange: require('./datatypes/FloatRange'),
    UndirectedGraph: require('./datatypes/UndirectedGraph')
};

},{"./datatypes/ArraySet":"1JKcn","./datatypes/FloatRange":"7jbx6","./datatypes/UndirectedGraph":"dhXTb"}],"1JKcn":[function(require,module,exports) {
var internals = require('../../internals');
/**
 * ArraySet
 * toxi/core/util/datatypes/ArraySet
 * implements relevant portions of the java version as well as those from java's AbstractSet
 */ /**
 * @class
 * @member toxi
 */ var ArraySet = function(collection) {
    Array.apply(this);
    if (arguments.length >= 1) for(var i = 0, len = collection.length; i < len; i++){
        var item = collection[i];
        if (this.indexOf(item) < 0) this.push(item);
    }
};
internals.extend(ArraySet, Array);
internals.mixin(ArraySet.prototype, {
    add: function(item) {
        if (this.contains(item)) return false;
        this.push(item);
        return true;
    },
    addAll: function(collection) {
        var self = this;
        for(var i = 0, len = collection.length; i < len; i++)this.push(collection[i]);
    },
    clear: function() {
        this.retainAll([]);
    },
    clone: function() {
        return new ArraySet(this);
    },
    contains: function(item) {
        return this.indexOf(item) >= 0;
    },
    containsAll: function(collection) {
        for(var i = 0, len = collection.length; i < len; i++){
            var val = collection[i];
            if (!this.contains(val)) return false;
        }
        return true;
    },
    containsAny: function(collection) {
        for(var i = 0, len = collection.length; i < len; i++){
            if (this.contains(collection[i])) return true;
        }
        return false;
    },
    equals: function(object) {
        return this === object;
    },
    get: function(index) {
        return this[index];
    },
    iterator: function() {
        return new internals.Iterator(this);
    },
    isEmpty: function() {
        return this.length < 1;
    },
    remove: function(o) {
        var i = this.indexOf(o);
        if (i >= 0) {
            this.splice(i, 1);
            return true;
        }
        return false;
    },
    removeAll: function() {
        this.retainAll([]);
    },
    retainAll: function(collection) {
        var self = this, changed = false;
        for(var i = 0; i < this.length; i++){
            var val = this[i];
            if (collection.indexOf(val) < 0) {
                this.splice(i, 1);
                changed = true;
                i--;
            }
        }
        return changed;
    },
    size: function() {
        return this.length;
    },
    toArray: function(arr) {
        arr = arr || [];
        for(var i = 0; i < this.length; i++)if (this.hasOwnProperty()) arr[i] = this[i];
        return arr;
    }
});
module.exports = ArraySet;

},{"../../internals":"iIw4Q"}],"dhXTb":[function(require,module,exports) {
var ArraySet = require('./ArraySet');
//wrap connections in this before passing them out
//this way the rest of the lib can treat it like a Java Collection
/*var __NodeCollection = function(nodes){
	var self = this;
	for(var i=0,len = nodes.length;i<len;i++){
		this[i] = nodes[i];
	}
};
__NodeCollection.prototype = {
	contains: function(el){
		return this[el] !== undefined;
	},
	size: function(){
		var i = 0;
		for(var prop in this){
			if(this.hasOwnProperty(prop)){
				i++;
			}
		}
		return i;
	}
};*/ /**
 * @exports UndirectedGraph as toxi.UndirectedGraph
 */ var UndirectedGraph = function() {
    this._nodeLinks = {
    };
    this._nodeIDs = [];
};
UndirectedGraph.prototype = {
    add: function(node) {
        if (this._nodeLinks[node] !== undefined) return;
        this._nodeLinks[node] = new ArraySet();
        this._nodeIDs.push(node);
    },
    connect: function(nodeA, nodeB) {
        if (this._nodeLinks[nodeA] === undefined) throw new Error("nodeA has not been added");
        if (this._nodeLinks[nodeB] === undefined) throw new Error("nodeB has not been added");
        this._nodeLinks[nodeA].push(nodeB);
        this._nodeLinks[nodeB].push(nodeA);
    },
    disconnect: function(nodeA, nodeB) {
        if (this._nodeLinks[nodeA] === undefined) throw new Error("nodeA has not been added");
        if (this._nodeLinks[nodeB] === undefined) throw new Error("nodeB has not been added");
        this._nodeLinks[nodeA].splice(this._nodeLinks[nodeA].indexOf(nodeB), 1);
        this._nodeLinks[nodeB].splice(this._nodeLinks[nodeB].indexOf(nodeA), 1);
    },
    getConnectedNodesFor: function(node) {
        if (this._nodeLinks[node] === undefined) throw new Error("node has not been added");
        return this._nodeLinks[node];
    },
    getNodes: function() {
        return this._nodeIDs;
    },
    remove: function(node) {
        var connections = this._nodeLinks[node];
        if (connections === undefined) return;
        for(var i = 0, len = connections.length; i < len; i++){
            var neighbor = connections[i];
            var nodeI = neighbor.indexOf(node);
            neighbor.splice(nodeI, 1);
        }
        delete this._nodeLinks[node];
        var i = this._nodeIDs.indexOf(node);
        this._nodeIDs.splice(node, 1);
    }
};
module.exports = UndirectedGraph;

},{"./ArraySet":"1JKcn"}]},["6oyVt","6hGTq"], "6hGTq", "parcelRequire0eb0")

//# sourceMappingURL=index.b793e1a0.js.map
